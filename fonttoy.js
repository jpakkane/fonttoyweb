// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof require === 'function';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    e: {
      f: func
    }
  });
  var wrappedFunc = instance.exports.f;
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 1024,
    STACK_BASE = 30448,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5273328,
    DYNAMIC_BASE = 5273328,
    DYNAMICTOP_PTR = 30416;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY, 'provided buffer should be ' + INITIAL_TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    wasmMemory = new WebAssembly.Memory({ 'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = wasmMemory.buffer;
  } else
  {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  assert(buffer.byteLength === INITIAL_TOTAL_MEMORY);
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'fonttoy.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (Module['wasmBinary']) {
      return new Uint8Array(Module['wasmBinary']);
    }
    if (Module['readBinary']) {
      return Module['readBinary'](wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm(env) {

  // prepare imports
  var info = {
    'env': env
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        return WebAssembly.instantiateStreaming(response, info)
          .then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
// the wasm module at that time, and it receives imports and provides exports and so forth, the app
// doesn't need to care that it is wasm or asm.js.

Module['asm'] = function(global, env, providedBuffer) {
  // memory was already allocated (so js could use the buffer)
  env['memory'] = wasmMemory
  ;
  // import table
  env['table'] = wasmTable = new WebAssembly.Table({
    'initial': 19200,
    'maximum': 19200,
    'element': 'anyfunc'
  });
  // With the wasm backend __memory_base and __table_base and only needed for
  // relocatable output.
  env['__memory_base'] = 1024; // tell the memory segments where to place themselves
  // table starts at 0 by default (even in dynamic linking, for the main module)
  env['__table_base'] = 0;

  var exports = createWasm(env);
  assert(exports, 'binaryen setup failed (no wasm support?)');
  return exports;
};

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 29424;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_parser_cpp() } });








/* no memory initializer */
var tempDoublePtr = 30432
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }
  Module["___assert_fail"] = ___assert_fail;

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  Module["___cxa_allocate_exception"] = ___cxa_allocate_exception;

  
  var ___exception_infos={};
  Module["___exception_infos"] = ___exception_infos;
  
  var ___exception_caught= [];
  Module["___exception_caught"] = ___exception_caught;
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  Module["___exception_addRef"] = ___exception_addRef;
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }
  Module["___exception_deAdjust"] = ___exception_deAdjust;function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }
  Module["___cxa_begin_catch"] = ___cxa_begin_catch;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  Module["___cxa_pure_virtual"] = ___cxa_pure_virtual;

  
  var ___exception_last=0;
  Module["___exception_last"] = ___exception_last;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  Module["___cxa_throw"] = ___cxa_throw;

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  Module["___cxa_uncaught_exception"] = ___cxa_uncaught_exception;

  function ___gxx_personality_v0() {
    }
  Module["___gxx_personality_v0"] = ___gxx_personality_v0;

  function ___lock() {}
  Module["___lock"] = ___lock;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  Module["___setErrNo"] = ___setErrNo;function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }
  Module["___map_file"] = ___map_file;

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  Module["PATH"] = PATH;
  
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH_FS"] = PATH_FS;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(19);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(6);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(5);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(11);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(6);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(5);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(1);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[2];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(39);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(39);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(22);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(12);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(19);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  Module["IDBFS"] = IDBFS;
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(22);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(-e.errno); // syscall errnos are negated, node's are not
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(22);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(-e.errno);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(-e.errno);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(-e.errno);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
  
          return position;
        }}};
  Module["NODEFS"] = NODEFS;
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(2);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(1);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(1);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(1);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(1);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(1);
        },readlink:function (node) {
          throw new FS.ErrnoError(1);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(5);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(22);
          }
          return position;
        }}};
  Module["WORKERFS"] = WORKERFS;
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  Module["ERRNO_CODES"] = ERRNO_CODES;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(9);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -20;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -22;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -22;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -22;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -13;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(9);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -75;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((result)>>2)]=tempI64[0],HEAP32[(((result)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall140"] = ___syscall140;

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall145"] = ___syscall145;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall146"] = ___syscall146;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -22;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -22; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(22);
          return -1;
        default: {
          return -22;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall221"] = ___syscall221;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall5"] = ___syscall5;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -25;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -25;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -25;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -25;
          return -22; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -25;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -25;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall54"] = ___syscall54;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall6"] = ___syscall6;

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall91"] = ___syscall91;

  function ___unlock() {}
  Module["___unlock"] = ___unlock;

  function _abort() {
      Module['abort']();
    }
  Module["_abort"] = _abort;

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }
  Module["_emscripten_get_heap_size"] = _emscripten_get_heap_size;

  
  var ENV={};
  Module["ENV"] = ENV;function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }
  Module["_getenv"] = _getenv;

  var _llvm_cos_f64=Math_cos;
  Module["_llvm_cos_f64"] = _llvm_cos_f64;

  var _llvm_sin_f64=Math_sin;
  Module["_llvm_sin_f64"] = _llvm_sin_f64;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }
  Module["_llvm_stackrestore"] = _llvm_stackrestore;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }
  Module["_llvm_stacksave"] = _llvm_stacksave;

  function _llvm_trap() {
      abort('trap!');
    }
  Module["_llvm_trap"] = _llvm_trap;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big;
  
   

   

   

   

  function _pthread_cond_wait() { return 0; }
  Module["_pthread_cond_wait"] = _pthread_cond_wait;

  
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  Module["abortOnCannotGrowMemory"] = abortOnCannotGrowMemory;function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }
  Module["_emscripten_resize_heap"] = _emscripten_resize_heap; 

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  Module["__isLeapYear"] = __isLeapYear;
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  Module["__arraySum"] = __arraySum;
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_LEAP"] = __MONTH_DAYS_LEAP;
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_REGULAR"] = __MONTH_DAYS_REGULAR;function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  Module["__addDays"] = __addDays;function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  Module["_strftime"] = _strftime;function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
  Module["_strftime_l"] = _strftime_l;
FS.staticInit();;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array


function nullFunc_diiiid(x) { err("Invalid function pointer called with signature 'diiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidiiii(x) { err("Invalid function pointer called with signature 'iidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiddddiii(x) { err("Invalid function pointer called with signature 'iiiiddddiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { err("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { err("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiij(x) { err("Invalid function pointer called with signature 'iiiiij'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_jiji(x) { err("Invalid function pointer called with signature 'jiji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

var asmGlobalArg = {}

var asmLibraryArg = {
  "abort": abort,
  "setTempRet0": setTempRet0,
  "getTempRet0": getTempRet0,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_diiiid": nullFunc_diiiid,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iidiiii": nullFunc_iidiiii,
  "nullFunc_iii": nullFunc_iii,
  "nullFunc_iiii": nullFunc_iiii,
  "nullFunc_iiiiddddiii": nullFunc_iiiiddddiii,
  "nullFunc_iiiii": nullFunc_iiiii,
  "nullFunc_iiiiid": nullFunc_iiiiid,
  "nullFunc_iiiiii": nullFunc_iiiiii,
  "nullFunc_iiiiiid": nullFunc_iiiiiid,
  "nullFunc_iiiiiii": nullFunc_iiiiiii,
  "nullFunc_iiiiiiii": nullFunc_iiiiiiii,
  "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii,
  "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii,
  "nullFunc_iiiiij": nullFunc_iiiiij,
  "nullFunc_jiji": nullFunc_jiji,
  "nullFunc_v": nullFunc_v,
  "nullFunc_vi": nullFunc_vi,
  "nullFunc_vii": nullFunc_vii,
  "nullFunc_viii": nullFunc_viii,
  "nullFunc_viiii": nullFunc_viiii,
  "nullFunc_viiiii": nullFunc_viiiii,
  "nullFunc_viiiiii": nullFunc_viiiiii,
  "___assert_fail": ___assert_fail,
  "___cxa_allocate_exception": ___cxa_allocate_exception,
  "___cxa_begin_catch": ___cxa_begin_catch,
  "___cxa_pure_virtual": ___cxa_pure_virtual,
  "___cxa_throw": ___cxa_throw,
  "___cxa_uncaught_exception": ___cxa_uncaught_exception,
  "___exception_addRef": ___exception_addRef,
  "___exception_deAdjust": ___exception_deAdjust,
  "___gxx_personality_v0": ___gxx_personality_v0,
  "___lock": ___lock,
  "___map_file": ___map_file,
  "___setErrNo": ___setErrNo,
  "___syscall140": ___syscall140,
  "___syscall145": ___syscall145,
  "___syscall146": ___syscall146,
  "___syscall221": ___syscall221,
  "___syscall5": ___syscall5,
  "___syscall54": ___syscall54,
  "___syscall6": ___syscall6,
  "___syscall91": ___syscall91,
  "___unlock": ___unlock,
  "__addDays": __addDays,
  "__arraySum": __arraySum,
  "__isLeapYear": __isLeapYear,
  "_abort": _abort,
  "_emscripten_get_heap_size": _emscripten_get_heap_size,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "_emscripten_resize_heap": _emscripten_resize_heap,
  "_getenv": _getenv,
  "_llvm_cos_f64": _llvm_cos_f64,
  "_llvm_sin_f64": _llvm_sin_f64,
  "_llvm_stackrestore": _llvm_stackrestore,
  "_llvm_stacksave": _llvm_stacksave,
  "_llvm_trap": _llvm_trap,
  "_pthread_cond_wait": _pthread_cond_wait,
  "_strftime": _strftime,
  "_strftime_l": _strftime_l,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "tempDoublePtr": tempDoublePtr,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR
}
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___GLOBAL__sub_I_parser_cpp = asm["__GLOBAL__sub_I_parser_cpp"];
asm["__GLOBAL__sub_I_parser_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_parser_cpp.apply(null, arguments);
};

var real___Z10token_name9TokenType = asm["__Z10token_name9TokenType"];
asm["__Z10token_name9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z10token_name9TokenType.apply(null, arguments);
};

var real___Z14model_progressPvPKdS1_ddddiii = asm["__Z14model_progressPvPKdS1_ddddiii"];
asm["__Z14model_progressPvPKdS1_ddddiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z14model_progressPvPKdS1_ddddiii.apply(null, arguments);
};

var real___Z14put_beziers_inR6StrokeR11SvgExporter = asm["__Z14put_beziers_inR6StrokeR11SvgExporter"];
asm["__Z14put_beziers_inR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z14put_beziers_inR6StrokeR11SvgExporter.apply(null, arguments);
};

var real___Z14put_indexes_inR6StrokeR11SvgExporter = asm["__Z14put_indexes_inR6StrokeR11SvgExporter"];
asm["__Z14put_indexes_inR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z14put_indexes_inR6StrokeR11SvgExporter.apply(null, arguments);
};

var real___Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_ = asm["__Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_"];
asm["__Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_.apply(null, arguments);
};

var real___Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE = asm["__Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE"];
asm["__Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE.apply(null, arguments);
};

var real___Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
asm["__Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___Z4maxddd = asm["__Z4maxddd"];
asm["__Z4maxddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z4maxddd.apply(null, arguments);
};

var real___Z8optimizeP6Stroke = asm["__Z8optimizeP6Stroke"];
asm["__Z8optimizeP6Stroke"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z8optimizeP6Stroke.apply(null, arguments);
};

var real___Z9build_svgR6StrokeR11SvgExporter = asm["__Z9build_svgR6StrokeR11SvgExporter"];
asm["__Z9build_svgR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z9build_svgR6StrokeR11SvgExporter.apply(null, arguments);
};

var real___Z9node_name8NodeType = asm["__Z9node_name8NodeType"];
asm["__Z9node_name8NodeType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z9node_name8NodeType.apply(null, arguments);
};

var real___Z9write_svgR6StrokePKc = asm["__Z9write_svgR6StrokePKc"];
asm["__Z9write_svgR6StrokePKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z9write_svgR6StrokePKc.apply(null, arguments);
};

var real___ZL14evaluate_modelPvPKdPdid = asm["__ZL14evaluate_modelPvPKdPdid"];
asm["__ZL14evaluate_modelPvPKdPdid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL14evaluate_modelPvPKdPdid.apply(null, arguments);
};

var real___ZL25default_terminate_handlerv = asm["__ZL25default_terminate_handlerv"];
asm["__ZL25default_terminate_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL25default_terminate_handlerv.apply(null, arguments);
};

var real___ZN10ConstraintC2Ev = asm["__ZN10ConstraintC2Ev"];
asm["__ZN10ConstraintC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10ConstraintC2Ev.apply(null, arguments);
};

var real___ZN10ConstraintD0Ev = asm["__ZN10ConstraintD0Ev"];
asm["__ZN10ConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10ConstraintD0Ev.apply(null, arguments);
};

var real___ZN10ConstraintD2Ev = asm["__ZN10ConstraintD2Ev"];
asm["__ZN10ConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10ConstraintD2Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"];
asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv.apply(null, arguments);
};

var real___ZN10__cxxabiv116__shim_type_infoD2Ev = asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"];
asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv116__shim_type_infoD2Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv117__class_type_infoD0Ev = asm["__ZN10__cxxabiv117__class_type_infoD0Ev"];
asm["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv117__class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv120__si_class_type_infoD0Ev = asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"];
asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv120__si_class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev = asm["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"];
asm["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"];
asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b.apply(null, arguments);
};

var real___ZN11Interpreter10assignmentERK4Node = asm["__ZN11Interpreter10assignmentERK4Node"];
asm["__ZN11Interpreter10assignmentERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter10assignmentERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter10eval_minusERK4Node = asm["__ZN11Interpreter10eval_minusERK4Node"];
asm["__ZN11Interpreter10eval_minusERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter10eval_minusERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter10expressionERK4Node = asm["__ZN11Interpreter10expressionERK4Node"];
asm["__ZN11Interpreter10expressionERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter10expressionERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter11eval_divideERK4Node = asm["__ZN11Interpreter11eval_divideERK4Node"];
asm["__ZN11Interpreter11eval_divideERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter11eval_divideERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter11eval_fncallERK4Node = asm["__ZN11Interpreter11eval_fncallERK4Node"];
asm["__ZN11Interpreter11eval_fncallERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter11eval_fncallERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd = asm["__ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd"];
asm["__ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd.apply(null, arguments);
};

var real___ZN11Interpreter13eval_multiplyERK4Node = asm["__ZN11Interpreter13eval_multiplyERK4Node"];
asm["__ZN11Interpreter13eval_multiplyERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter13eval_multiplyERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter13eval_variableERK4Node = asm["__ZN11Interpreter13eval_variableERK4Node"];
asm["__ZN11Interpreter13eval_variableERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter13eval_variableERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter14eval_argumentsERK4Node = asm["__ZN11Interpreter14eval_argumentsERK4Node"];
asm["__ZN11Interpreter14eval_argumentsERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter14eval_argumentsERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter15execute_programEv = asm["__ZN11Interpreter15execute_programEv"];
asm["__ZN11Interpreter15execute_programEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter15execute_programEv.apply(null, arguments);
};

var real___ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node = asm["__ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node"];
asm["__ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter9eval_plusERK4Node = asm["__ZN11Interpreter9eval_plusERK4Node"];
asm["__ZN11Interpreter9eval_plusERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter9eval_plusERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter9set_errorEPKcii = asm["__ZN11Interpreter9set_errorEPKcii"];
asm["__ZN11Interpreter9set_errorEPKcii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter9set_errorEPKcii.apply(null, arguments);
};

var real___ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node = asm["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node"];
asm["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node.apply(null, arguments);
};

var real___ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii = asm["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii"];
asm["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii.apply(null, arguments);
};

var real___ZN11InterpreterC2ERK6ParserP15ExternalFuncall = asm["__ZN11InterpreterC2ERK6ParserP15ExternalFuncall"];
asm["__ZN11InterpreterC2ERK6ParserP15ExternalFuncall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11InterpreterC2ERK6ParserP15ExternalFuncall.apply(null, arguments);
};

var real___ZN11InterpreterD2Ev = asm["__ZN11InterpreterD2Ev"];
asm["__ZN11InterpreterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11InterpreterD2Ev.apply(null, arguments);
};

var real___ZN11SvgExporter10draw_crossEdd = asm["__ZN11SvgExporter10draw_crossEdd"];
asm["__ZN11SvgExporter10draw_crossEdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter10draw_crossEdd.apply(null, arguments);
};

var real___ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b = asm["__ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b"];
asm["__ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b.apply(null, arguments);
};

var real___ZN11SvgExporter11draw_circleEddd = asm["__ZN11SvgExporter11draw_circleEddd"];
asm["__ZN11SvgExporter11draw_circleEddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter11draw_circleEddd.apply(null, arguments);
};

var real___ZN11SvgExporter12setup_canvasEv = asm["__ZN11SvgExporter12setup_canvasEv"];
asm["__ZN11SvgExporter12setup_canvasEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter12setup_canvasEv.apply(null, arguments);
};

var real___ZN11SvgExporter21draw_horizontal_guideEdPKc = asm["__ZN11SvgExporter21draw_horizontal_guideEdPKc"];
asm["__ZN11SvgExporter21draw_horizontal_guideEdPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter21draw_horizontal_guideEdPKc.apply(null, arguments);
};

var real___ZN11SvgExporter9draw_lineEddddPKcdS1_ = asm["__ZN11SvgExporter9draw_lineEddddPKcdS1_"];
asm["__ZN11SvgExporter9draw_lineEddddPKcdS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter9draw_lineEddddPKcdS1_.apply(null, arguments);
};

var real___ZN11SvgExporter9draw_textEdddPKc = asm["__ZN11SvgExporter9draw_textEdddPKc"];
asm["__ZN11SvgExporter9draw_textEdddPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter9draw_textEdddPKc.apply(null, arguments);
};

var real___ZN11SvgExporter9write_svgEPKc = asm["__ZN11SvgExporter9write_svgEPKc"];
asm["__ZN11SvgExporter9write_svgEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporter9write_svgEPKc.apply(null, arguments);
};

var real___ZN11SvgExporterC2Ev = asm["__ZN11SvgExporterC2Ev"];
asm["__ZN11SvgExporterC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporterC2Ev.apply(null, arguments);
};

var real___ZN11SvgExporterD2Ev = asm["__ZN11SvgExporterD2Ev"];
asm["__ZN11SvgExporterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN11SvgExporterD2Ev.apply(null, arguments);
};

var real___ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN14FreeConstraintC2Ei5Point = asm["__ZN14FreeConstraintC2Ei5Point"];
asm["__ZN14FreeConstraintC2Ei5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN14FreeConstraintC2Ei5Point.apply(null, arguments);
};

var real___ZN14FreeConstraintD0Ev = asm["__ZN14FreeConstraintD0Ev"];
asm["__ZN14FreeConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN14FreeConstraintD0Ev.apply(null, arguments);
};

var real___ZN14FreeConstraintD2Ev = asm["__ZN14FreeConstraintD2Ev"];
asm["__ZN14FreeConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN14FreeConstraintD2Ev.apply(null, arguments);
};

var real___ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN15AngleConstraintC2Eiidd = asm["__ZN15AngleConstraintC2Eiidd"];
asm["__ZN15AngleConstraintC2Eiidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15AngleConstraintC2Eiidd.apply(null, arguments);
};

var real___ZN15AngleConstraintD0Ev = asm["__ZN15AngleConstraintD0Ev"];
asm["__ZN15AngleConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15AngleConstraintD0Ev.apply(null, arguments);
};

var real___ZN15AngleConstraintD2Ev = asm["__ZN15AngleConstraintD2Ev"];
asm["__ZN15AngleConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15AngleConstraintD2Ev.apply(null, arguments);
};

var real___ZN15ExternalFuncallC2Ev = asm["__ZN15ExternalFuncallC2Ev"];
asm["__ZN15ExternalFuncallC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15ExternalFuncallC2Ev.apply(null, arguments);
};

var real___ZN15ExternalFuncallD0Ev = asm["__ZN15ExternalFuncallD0Ev"];
asm["__ZN15ExternalFuncallD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15ExternalFuncallD0Ev.apply(null, arguments);
};

var real___ZN15ExternalFuncallD2Ev = asm["__ZN15ExternalFuncallD2Ev"];
asm["__ZN15ExternalFuncallD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15ExternalFuncallD2Ev.apply(null, arguments);
};

var real___ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN15FixedConstraintC2Ei5Point = asm["__ZN15FixedConstraintC2Ei5Point"];
asm["__ZN15FixedConstraintC2Ei5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15FixedConstraintC2Ei5Point.apply(null, arguments);
};

var real___ZN15FixedConstraintD0Ev = asm["__ZN15FixedConstraintD0Ev"];
asm["__ZN15FixedConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15FixedConstraintD0Ev.apply(null, arguments);
};

var real___ZN15FixedConstraintD2Ev = asm["__ZN15FixedConstraintD2Ev"];
asm["__ZN15FixedConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15FixedConstraintD2Ev.apply(null, arguments);
};

var real___ZN15TokenDefinitionC2ERKS_ = asm["__ZN15TokenDefinitionC2ERKS_"];
asm["__ZN15TokenDefinitionC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15TokenDefinitionC2ERKS_.apply(null, arguments);
};

var real___ZN15TokenDefinitionD2Ev = asm["__ZN15TokenDefinitionD2Ev"];
asm["__ZN15TokenDefinitionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15TokenDefinitionD2Ev.apply(null, arguments);
};

var real___ZN15WhichCoordinate9try_unionERKS_ = asm["__ZN15WhichCoordinate9try_unionERKS_"];
asm["__ZN15WhichCoordinate9try_unionERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15WhichCoordinate9try_unionERKS_.apply(null, arguments);
};

var real___ZN15WhichCoordinateC2Ebb = asm["__ZN15WhichCoordinateC2Ebb"];
asm["__ZN15WhichCoordinateC2Ebb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN15WhichCoordinateC2Ebb.apply(null, arguments);
};

var real___ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN16MirrorConstraintC2Eiii = asm["__ZN16MirrorConstraintC2Eiii"];
asm["__ZN16MirrorConstraintC2Eiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16MirrorConstraintC2Eiii.apply(null, arguments);
};

var real___ZN16MirrorConstraintD0Ev = asm["__ZN16MirrorConstraintD0Ev"];
asm["__ZN16MirrorConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16MirrorConstraintD0Ev.apply(null, arguments);
};

var real___ZN16MirrorConstraintD2Ev = asm["__ZN16MirrorConstraintD2Ev"];
asm["__ZN16MirrorConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16MirrorConstraintD2Ev.apply(null, arguments);
};

var real___ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN16SmoothConstraintC2Eiii = asm["__ZN16SmoothConstraintC2Eiii"];
asm["__ZN16SmoothConstraintC2Eiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16SmoothConstraintC2Eiii.apply(null, arguments);
};

var real___ZN16SmoothConstraintD0Ev = asm["__ZN16SmoothConstraintD0Ev"];
asm["__ZN16SmoothConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16SmoothConstraintD0Ev.apply(null, arguments);
};

var real___ZN16SmoothConstraintD2Ev = asm["__ZN16SmoothConstraintD2Ev"];
asm["__ZN16SmoothConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN16SmoothConstraintD2Ev.apply(null, arguments);
};

var real___ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN19DirectionConstraintC2Eiid = asm["__ZN19DirectionConstraintC2Eiid"];
asm["__ZN19DirectionConstraintC2Eiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN19DirectionConstraintC2Eiid.apply(null, arguments);
};

var real___ZN19DirectionConstraintD0Ev = asm["__ZN19DirectionConstraintD0Ev"];
asm["__ZN19DirectionConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN19DirectionConstraintD0Ev.apply(null, arguments);
};

var real___ZN19DirectionConstraintD2Ev = asm["__ZN19DirectionConstraintD2Ev"];
asm["__ZN19DirectionConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN19DirectionConstraintD2Ev.apply(null, arguments);
};

var real___ZN20CoordinateDefinitionC2Eibb = asm["__ZN20CoordinateDefinitionC2Eibb"];
asm["__ZN20CoordinateDefinitionC2Eibb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN20CoordinateDefinitionC2Eibb.apply(null, arguments);
};

var real___ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZN20SameOffsetConstraintC2Eiiii = asm["__ZN20SameOffsetConstraintC2Eiiii"];
asm["__ZN20SameOffsetConstraintC2Eiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN20SameOffsetConstraintC2Eiiii.apply(null, arguments);
};

var real___ZN20SameOffsetConstraintD0Ev = asm["__ZN20SameOffsetConstraintD0Ev"];
asm["__ZN20SameOffsetConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN20SameOffsetConstraintD0Ev.apply(null, arguments);
};

var real___ZN20SameOffsetConstraintD2Ev = asm["__ZN20SameOffsetConstraintD2Ev"];
asm["__ZN20SameOffsetConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN20SameOffsetConstraintD2Ev.apply(null, arguments);
};

var real___ZN4NodeC2E8NodeTypeRK5Token = asm["__ZN4NodeC2E8NodeTypeRK5Token"];
asm["__ZN4NodeC2E8NodeTypeRK5Token"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4NodeC2E8NodeTypeRK5Token.apply(null, arguments);
};

var real___ZN4NodeC2EOS_ = asm["__ZN4NodeC2EOS_"];
asm["__ZN4NodeC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4NodeC2EOS_.apply(null, arguments);
};

var real___ZN4NodeD2Ev = asm["__ZN4NodeD2Ev"];
asm["__ZN4NodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4NodeD2Ev.apply(null, arguments);
};

var real___ZN5Lexer4nextEv = asm["__ZN5Lexer4nextEv"];
asm["__ZN5Lexer4nextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5Lexer4nextEv.apply(null, arguments);
};

var real___ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = asm["__ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"];
asm["__ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZN5LexerD2Ev = asm["__ZN5LexerD2Ev"];
asm["__ZN5LexerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5LexerD2Ev.apply(null, arguments);
};

var real___ZN5PointC2EOS_ = asm["__ZN5PointC2EOS_"];
asm["__ZN5PointC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointC2EOS_.apply(null, arguments);
};

var real___ZN5PointC2ERKS_ = asm["__ZN5PointC2ERKS_"];
asm["__ZN5PointC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointC2ERKS_.apply(null, arguments);
};

var real___ZN5PointC2Edd = asm["__ZN5PointC2Edd"];
asm["__ZN5PointC2Edd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointC2Edd.apply(null, arguments);
};

var real___ZN5PointC2Ev = asm["__ZN5PointC2Ev"];
asm["__ZN5PointC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointC2Ev.apply(null, arguments);
};

var real___ZN5PointaSEOS_ = asm["__ZN5PointaSEOS_"];
asm["__ZN5PointaSEOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointaSEOS_.apply(null, arguments);
};

var real___ZN5PointaSERKS_ = asm["__ZN5PointaSERKS_"];
asm["__ZN5PointaSERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5PointaSERKS_.apply(null, arguments);
};

var real___ZN5TokenC2EOS_ = asm["__ZN5TokenC2EOS_"];
asm["__ZN5TokenC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5TokenC2EOS_.apply(null, arguments);
};

var real___ZN5TokenC2ERKS_ = asm["__ZN5TokenC2ERKS_"];
asm["__ZN5TokenC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5TokenC2ERKS_.apply(null, arguments);
};

var real___ZN5TokenC2Ev = asm["__ZN5TokenC2Ev"];
asm["__ZN5TokenC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5TokenC2Ev.apply(null, arguments);
};

var real___ZN5TokenD2Ev = asm["__ZN5TokenD2Ev"];
asm["__ZN5TokenD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5TokenD2Ev.apply(null, arguments);
};

var real___ZN5TokenaSEOS_ = asm["__ZN5TokenaSEOS_"];
asm["__ZN5TokenaSEOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN5TokenaSEOS_.apply(null, arguments);
};

var real___ZN6BezierC2E5PointS0_S0_S0_ = asm["__ZN6BezierC2E5PointS0_S0_S0_"];
asm["__ZN6BezierC2E5PointS0_S0_S0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6BezierC2E5PointS0_S0_S0_.apply(null, arguments);
};

var real___ZN6BezierC2ERKS_ = asm["__ZN6BezierC2ERKS_"];
asm["__ZN6BezierC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6BezierC2ERKS_.apply(null, arguments);
};

var real___ZN6Bridge10get_strokeEv = asm["__ZN6Bridge10get_strokeEv"];
asm["__ZN6Bridge10get_strokeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Bridge10get_strokeEv.apply(null, arguments);
};

var real___ZN6Bridge10has_strokeEv = asm["__ZN6Bridge10has_strokeEv"];
asm["__ZN6Bridge10has_strokeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Bridge10has_strokeEv.apply(null, arguments);
};

var real___ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE = asm["__ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE"];
asm["__ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE.apply(null, arguments);
};

var real___ZN6BridgeC2Ev = asm["__ZN6BridgeC2Ev"];
asm["__ZN6BridgeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6BridgeC2Ev.apply(null, arguments);
};

var real___ZN6BridgeD0Ev = asm["__ZN6BridgeD0Ev"];
asm["__ZN6BridgeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6BridgeD0Ev.apply(null, arguments);
};

var real___ZN6BridgeD2Ev = asm["__ZN6BridgeD2Ev"];
asm["__ZN6BridgeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6BridgeD2Ev.apply(null, arguments);
};

var real___ZN6Parser11e5_subtractEv = asm["__ZN6Parser11e5_subtractEv"];
asm["__ZN6Parser11e5_subtractEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser11e5_subtractEv.apply(null, arguments);
};

var real___ZN6Parser11e6_multiplyEv = asm["__ZN6Parser11e6_multiplyEv"];
asm["__ZN6Parser11e6_multiplyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser11e6_multiplyEv.apply(null, arguments);
};

var real___ZN6Parser12e1_statementEv = asm["__ZN6Parser12e1_statementEv"];
asm["__ZN6Parser12e1_statementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser12e1_statementEv.apply(null, arguments);
};

var real___ZN6Parser13e3_expressionEv = asm["__ZN6Parser13e3_expressionEv"];
asm["__ZN6Parser13e3_expressionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser13e3_expressionEv.apply(null, arguments);
};

var real___ZN6Parser14e8_parenthesesEv = asm["__ZN6Parser14e8_parenthesesEv"];
asm["__ZN6Parser14e8_parenthesesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser14e8_parenthesesEv.apply(null, arguments);
};

var real___ZN6Parser5parseEv = asm["__ZN6Parser5parseEv"];
asm["__ZN6Parser5parseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser5parseEv.apply(null, arguments);
};

var real___ZN6Parser6acceptE9TokenType = asm["__ZN6Parser6acceptE9TokenType"];
asm["__ZN6Parser6acceptE9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser6acceptE9TokenType.apply(null, arguments);
};

var real___ZN6Parser6e4_addEv = asm["__ZN6Parser6e4_addEv"];
asm["__ZN6Parser6e4_addEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser6e4_addEv.apply(null, arguments);
};

var real___ZN6Parser6expectE9TokenType = asm["__ZN6Parser6expectE9TokenType"];
asm["__ZN6Parser6expectE9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser6expectE9TokenType.apply(null, arguments);
};

var real___ZN6Parser8e2_commaEv = asm["__ZN6Parser8e2_commaEv"];
asm["__ZN6Parser8e2_commaEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser8e2_commaEv.apply(null, arguments);
};

var real___ZN6Parser8e9_tokenEv = asm["__ZN6Parser8e9_tokenEv"];
asm["__ZN6Parser8e9_tokenEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser8e9_tokenEv.apply(null, arguments);
};

var real___ZN6Parser9e7_divideEv = asm["__ZN6Parser9e7_divideEv"];
asm["__ZN6Parser9e7_divideEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser9e7_divideEv.apply(null, arguments);
};

var real___ZN6Parser9set_errorEPKcii = asm["__ZN6Parser9set_errorEPKcii"];
asm["__ZN6Parser9set_errorEPKcii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Parser9set_errorEPKcii.apply(null, arguments);
};

var real___ZN6ParserC2ER5Lexer = asm["__ZN6ParserC2ER5Lexer"];
asm["__ZN6ParserC2ER5Lexer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6ParserC2ER5Lexer.apply(null, arguments);
};

var real___ZN6ParserD2Ev = asm["__ZN6ParserD2Ev"];
asm["__ZN6ParserD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6ParserD2Ev.apply(null, arguments);
};

var real___ZN6Stroke12update_modelEv = asm["__ZN6Stroke12update_modelEv"];
asm["__ZN6Stroke12update_modelEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Stroke12update_modelEv.apply(null, arguments);
};

var real___ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE = asm["__ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE"];
asm["__ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE.apply(null, arguments);
};

var real___ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZN6Stroke6freezeEv = asm["__ZN6Stroke6freezeEv"];
asm["__ZN6Stroke6freezeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6Stroke6freezeEv.apply(null, arguments);
};

var real___ZN6StrokeC2EOS_ = asm["__ZN6StrokeC2EOS_"];
asm["__ZN6StrokeC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6StrokeC2EOS_.apply(null, arguments);
};

var real___ZN6StrokeC2Ei = asm["__ZN6StrokeC2Ei"];
asm["__ZN6StrokeC2Ei"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6StrokeC2Ei.apply(null, arguments);
};

var real___ZN6StrokeD2Ev = asm["__ZN6StrokeD2Ev"];
asm["__ZN6StrokeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6StrokeD2Ev.apply(null, arguments);
};

var real___ZN6VectorC2ERK5Point = asm["__ZN6VectorC2ERK5Point"];
asm["__ZN6VectorC2ERK5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6VectorC2ERK5Point.apply(null, arguments);
};

var real___ZN6VectorC2Edd = asm["__ZN6VectorC2Edd"];
asm["__ZN6VectorC2Edd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN6VectorC2Edd.apply(null, arguments);
};

var real___ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLComment9ToCommentEv = asm["__ZN8tinyxml210XMLComment9ToCommentEv"];
asm["__ZN8tinyxml210XMLComment9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLComment9ToCommentEv.apply(null, arguments);
};

var real___ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLCommentD0Ev = asm["__ZN8tinyxml210XMLCommentD0Ev"];
asm["__ZN8tinyxml210XMLCommentD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLCommentD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLCommentD2Ev = asm["__ZN8tinyxml210XMLCommentD2Ev"];
asm["__ZN8tinyxml210XMLCommentD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLCommentD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement12SetAttributeEPKcS2_ = asm["__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_"];
asm["__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement12SetAttributeEPKcS2_.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement12SetAttributeEPKcd = asm["__ZN8tinyxml210XMLElement12SetAttributeEPKcd"];
asm["__ZN8tinyxml210XMLElement12SetAttributeEPKcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement12SetAttributeEPKcd.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement15CreateAttributeEv = asm["__ZN8tinyxml210XMLElement15CreateAttributeEv"];
asm["__ZN8tinyxml210XMLElement15CreateAttributeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement15CreateAttributeEv.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE = asm["__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE"];
asm["__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement15ParseAttributesEPcPi = asm["__ZN8tinyxml210XMLElement15ParseAttributesEPcPi"];
asm["__ZN8tinyxml210XMLElement15ParseAttributesEPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement15ParseAttributesEPcPi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc = asm["__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc"];
asm["__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement7SetNameEPKcb = asm["__ZN8tinyxml210XMLElement7SetNameEPKcb"];
asm["__ZN8tinyxml210XMLElement7SetNameEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement7SetNameEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement7SetTextEPKc = asm["__ZN8tinyxml210XMLElement7SetTextEPKc"];
asm["__ZN8tinyxml210XMLElement7SetTextEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement7SetTextEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElement9ToElementEv = asm["__ZN8tinyxml210XMLElement9ToElementEv"];
asm["__ZN8tinyxml210XMLElement9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElement9ToElementEv.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElementD0Ev = asm["__ZN8tinyxml210XMLElementD0Ev"];
asm["__ZN8tinyxml210XMLElementD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElementD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLElementD2Ev = asm["__ZN8tinyxml210XMLElementD2Ev"];
asm["__ZN8tinyxml210XMLElementD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLElementD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter10PrintSpaceEi = asm["__ZN8tinyxml210XMLPrinter10PrintSpaceEi"];
asm["__ZN8tinyxml210XMLPrinter10PrintSpaceEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter10PrintSpaceEi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter10PushHeaderEbb = asm["__ZN8tinyxml210XMLPrinter10PushHeaderEbb"];
asm["__ZN8tinyxml210XMLPrinter10PushHeaderEbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter10PushHeaderEbb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE = asm["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"];
asm["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE = asm["__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE"];
asm["__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter11OpenElementEPKcb = asm["__ZN8tinyxml210XMLPrinter11OpenElementEPKcb"];
asm["__ZN8tinyxml210XMLPrinter11OpenElementEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter11OpenElementEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter11PrintStringEPKcb = asm["__ZN8tinyxml210XMLPrinter11PrintStringEPKcb"];
asm["__ZN8tinyxml210XMLPrinter11PrintStringEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter11PrintStringEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter11PushCommentEPKc = asm["__ZN8tinyxml210XMLPrinter11PushCommentEPKc"];
asm["__ZN8tinyxml210XMLPrinter11PushCommentEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter11PushCommentEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter11PushUnknownEPKc = asm["__ZN8tinyxml210XMLPrinter11PushUnknownEPKc"];
asm["__ZN8tinyxml210XMLPrinter11PushUnknownEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter11PushUnknownEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter12CloseElementEb = asm["__ZN8tinyxml210XMLPrinter12CloseElementEb"];
asm["__ZN8tinyxml210XMLPrinter12CloseElementEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter12CloseElementEb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ = asm["__ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_"];
asm["__ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter15PushDeclarationEPKc = asm["__ZN8tinyxml210XMLPrinter15PushDeclarationEPKc"];
asm["__ZN8tinyxml210XMLPrinter15PushDeclarationEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter15PushDeclarationEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv = asm["__ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv"];
asm["__ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter4PutcEc = asm["__ZN8tinyxml210XMLPrinter4PutcEc"];
asm["__ZN8tinyxml210XMLPrinter4PutcEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter4PutcEc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE = asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE"];
asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE = asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE"];
asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE = asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE"];
asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE = asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE"];
asm["__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5WriteEPKc = asm["__ZN8tinyxml210XMLPrinter5WriteEPKc"];
asm["__ZN8tinyxml210XMLPrinter5WriteEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5WriteEPKc.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter5WriteEPKcm = asm["__ZN8tinyxml210XMLPrinter5WriteEPKcm"];
asm["__ZN8tinyxml210XMLPrinter5WriteEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter5WriteEPKcm.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter8PushTextEPKcb = asm["__ZN8tinyxml210XMLPrinter8PushTextEPKcb"];
asm["__ZN8tinyxml210XMLPrinter8PushTextEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter8PushTextEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE = asm["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE"];
asm["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi = asm["__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi"];
asm["__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinterD0Ev = asm["__ZN8tinyxml210XMLPrinterD0Ev"];
asm["__ZN8tinyxml210XMLPrinterD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinterD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLPrinterD2Ev = asm["__ZN8tinyxml210XMLPrinterD2Ev"];
asm["__ZN8tinyxml210XMLPrinterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLPrinterD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml210XMLUnknown9ToUnknownEv = asm["__ZN8tinyxml210XMLUnknown9ToUnknownEv"];
asm["__ZN8tinyxml210XMLUnknown9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLUnknown9ToUnknownEv.apply(null, arguments);
};

var real___ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLUnknownD0Ev = asm["__ZN8tinyxml210XMLUnknownD0Ev"];
asm["__ZN8tinyxml210XMLUnknownD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLUnknownD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLUnknownD2Ev = asm["__ZN8tinyxml210XMLUnknownD2Ev"];
asm["__ZN8tinyxml210XMLUnknownD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLUnknownD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE = asm["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"];
asm["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE = asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE"];
asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE = asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE"];
asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE = asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE"];
asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE = asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE"];
asm["__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE = asm["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE"];
asm["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE = asm["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE"];
asm["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitorC2Ev = asm["__ZN8tinyxml210XMLVisitorC2Ev"];
asm["__ZN8tinyxml210XMLVisitorC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitorC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitorD0Ev = asm["__ZN8tinyxml210XMLVisitorD0Ev"];
asm["__ZN8tinyxml210XMLVisitorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitorD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml210XMLVisitorD2Ev = asm["__ZN8tinyxml210XMLVisitorD2Ev"];
asm["__ZN8tinyxml210XMLVisitorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml210XMLVisitorD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10ClearErrorEv = asm["__ZN8tinyxml211XMLDocument10ClearErrorEv"];
asm["__ZN8tinyxml211XMLDocument10ClearErrorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10ClearErrorEv.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE = asm["__ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE"];
asm["__ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10NewCommentEPKc = asm["__ZN8tinyxml211XMLDocument10NewCommentEPKc"];
asm["__ZN8tinyxml211XMLDocument10NewCommentEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10NewCommentEPKc.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10NewElementEPKc = asm["__ZN8tinyxml211XMLDocument10NewElementEPKc"];
asm["__ZN8tinyxml211XMLDocument10NewElementEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10NewElementEPKc.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10NewUnknownEPKc = asm["__ZN8tinyxml211XMLDocument10NewUnknownEPKc"];
asm["__ZN8tinyxml211XMLDocument10NewUnknownEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10NewUnknownEPKc.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument10ToDocumentEv = asm["__ZN8tinyxml211XMLDocument10ToDocumentEv"];
asm["__ZN8tinyxml211XMLDocument10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument10ToDocumentEv.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_ = asm["__ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_"];
asm["__ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument12DepthTrackerD2Ev = asm["__ZN8tinyxml211XMLDocument12DepthTrackerD2Ev"];
asm["__ZN8tinyxml211XMLDocument12DepthTrackerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument12DepthTrackerD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE = asm["__ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE"];
asm["__ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument14NewDeclarationEPKc = asm["__ZN8tinyxml211XMLDocument14NewDeclarationEPKc"];
asm["__ZN8tinyxml211XMLDocument14NewDeclarationEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument14NewDeclarationEPKc.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE = asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE"];
asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE = asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE"];
asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE = asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE"];
asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE = asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE"];
asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE = asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE"];
asm["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument5ClearEv = asm["__ZN8tinyxml211XMLDocument5ClearEv"];
asm["__ZN8tinyxml211XMLDocument5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument5ClearEv.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument7NewTextEPKc = asm["__ZN8tinyxml211XMLDocument7NewTextEPKc"];
asm["__ZN8tinyxml211XMLDocument7NewTextEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument7NewTextEPKc.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE = asm["__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE"];
asm["__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument8PopDepthEv = asm["__ZN8tinyxml211XMLDocument8PopDepthEv"];
asm["__ZN8tinyxml211XMLDocument8PopDepthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument8PopDepthEv.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb = asm["__ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb"];
asm["__ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument8SaveFileEPKcb = asm["__ZN8tinyxml211XMLDocument8SaveFileEPKcb"];
asm["__ZN8tinyxml211XMLDocument8SaveFileEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument8SaveFileEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz = asm["__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz"];
asm["__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE = asm["__ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE"];
asm["__ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocument9PushDepthEv = asm["__ZN8tinyxml211XMLDocument9PushDepthEv"];
asm["__ZN8tinyxml211XMLDocument9PushDepthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocument9PushDepthEv.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE = asm["__ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE"];
asm["__ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocumentD0Ev = asm["__ZN8tinyxml211XMLDocumentD0Ev"];
asm["__ZN8tinyxml211XMLDocumentD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocumentD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml211XMLDocumentD2Ev = asm["__ZN8tinyxml211XMLDocumentD2Ev"];
asm["__ZN8tinyxml211XMLDocumentD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml211XMLDocumentD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttribute12SetAttributeEPKc = asm["__ZN8tinyxml212XMLAttribute12SetAttributeEPKc"];
asm["__ZN8tinyxml212XMLAttribute12SetAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttribute12SetAttributeEPKc.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttribute12SetAttributeEd = asm["__ZN8tinyxml212XMLAttribute12SetAttributeEd"];
asm["__ZN8tinyxml212XMLAttribute12SetAttributeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttribute12SetAttributeEd.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttribute7SetNameEPKc = asm["__ZN8tinyxml212XMLAttribute7SetNameEPKc"];
asm["__ZN8tinyxml212XMLAttribute7SetNameEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttribute7SetNameEPKc.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi = asm["__ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi"];
asm["__ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttributeC2Ev = asm["__ZN8tinyxml212XMLAttributeC2Ev"];
asm["__ZN8tinyxml212XMLAttributeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttributeC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttributeD0Ev = asm["__ZN8tinyxml212XMLAttributeD0Ev"];
asm["__ZN8tinyxml212XMLAttributeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttributeD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml212XMLAttributeD2Ev = asm["__ZN8tinyxml212XMLAttributeD2Ev"];
asm["__ZN8tinyxml212XMLAttributeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml212XMLAttributeD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml214XMLDeclaration13ToDeclarationEv = asm["__ZN8tinyxml214XMLDeclaration13ToDeclarationEv"];
asm["__ZN8tinyxml214XMLDeclaration13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml214XMLDeclaration13ToDeclarationEv.apply(null, arguments);
};

var real___ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml214XMLDeclarationD0Ev = asm["__ZN8tinyxml214XMLDeclarationD0Ev"];
asm["__ZN8tinyxml214XMLDeclarationD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml214XMLDeclarationD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml214XMLDeclarationD2Ev = asm["__ZN8tinyxml214XMLDeclarationD2Ev"];
asm["__ZN8tinyxml214XMLDeclarationD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml214XMLDeclarationD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27MemPoolC2Ev = asm["__ZN8tinyxml27MemPoolC2Ev"];
asm["__ZN8tinyxml27MemPoolC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27MemPoolC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27MemPoolD0Ev = asm["__ZN8tinyxml27MemPoolD0Ev"];
asm["__ZN8tinyxml27MemPoolD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27MemPoolD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml27MemPoolD2Ev = asm["__ZN8tinyxml27MemPoolD2Ev"];
asm["__ZN8tinyxml27MemPoolD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27MemPoolD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair10TransferToEPS0_ = asm["__ZN8tinyxml27StrPair10TransferToEPS0_"];
asm["__ZN8tinyxml27StrPair10TransferToEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair10TransferToEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair14SetInternedStrEPKc = asm["__ZN8tinyxml27StrPair14SetInternedStrEPKc"];
asm["__ZN8tinyxml27StrPair14SetInternedStrEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair14SetInternedStrEPKc.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair18CollapseWhitespaceEv = asm["__ZN8tinyxml27StrPair18CollapseWhitespaceEv"];
asm["__ZN8tinyxml27StrPair18CollapseWhitespaceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair18CollapseWhitespaceEv.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair3SetEPcS1_i = asm["__ZN8tinyxml27StrPair3SetEPcS1_i"];
asm["__ZN8tinyxml27StrPair3SetEPcS1_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair3SetEPcS1_i.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair5ResetEv = asm["__ZN8tinyxml27StrPair5ResetEv"];
asm["__ZN8tinyxml27StrPair5ResetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair5ResetEv.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair6GetStrEv = asm["__ZN8tinyxml27StrPair6GetStrEv"];
asm["__ZN8tinyxml27StrPair6GetStrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair6GetStrEv.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair6SetStrEPKci = asm["__ZN8tinyxml27StrPair6SetStrEPKci"];
asm["__ZN8tinyxml27StrPair6SetStrEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair6SetStrEPKci.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair9ParseNameEPc = asm["__ZN8tinyxml27StrPair9ParseNameEPc"];
asm["__ZN8tinyxml27StrPair9ParseNameEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair9ParseNameEPc.apply(null, arguments);
};

var real___ZN8tinyxml27StrPair9ParseTextEPcPKciPi = asm["__ZN8tinyxml27StrPair9ParseTextEPcPKciPi"];
asm["__ZN8tinyxml27StrPair9ParseTextEPcPKciPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPair9ParseTextEPcPKciPi.apply(null, arguments);
};

var real___ZN8tinyxml27StrPairC2Ev = asm["__ZN8tinyxml27StrPairC2Ev"];
asm["__ZN8tinyxml27StrPairC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPairC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27StrPairD2Ev = asm["__ZN8tinyxml27StrPairD2Ev"];
asm["__ZN8tinyxml27StrPairD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27StrPairD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode10DeleteNodeEPS0_ = asm["__ZN8tinyxml27XMLNode10DeleteNodeEPS0_"];
asm["__ZN8tinyxml27XMLNode10DeleteNodeEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode10DeleteNodeEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode10FirstChildEv = asm["__ZN8tinyxml27XMLNode10FirstChildEv"];
asm["__ZN8tinyxml27XMLNode10FirstChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode10FirstChildEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode10ToDocumentEv = asm["__ZN8tinyxml27XMLNode10ToDocumentEv"];
asm["__ZN8tinyxml27XMLNode10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode10ToDocumentEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode11DeleteChildEPS0_ = asm["__ZN8tinyxml27XMLNode11DeleteChildEPS0_"];
asm["__ZN8tinyxml27XMLNode11DeleteChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode11DeleteChildEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode11GetDocumentEv = asm["__ZN8tinyxml27XMLNode11GetDocumentEv"];
asm["__ZN8tinyxml27XMLNode11GetDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode11GetDocumentEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode13ToDeclarationEv = asm["__ZN8tinyxml27XMLNode13ToDeclarationEv"];
asm["__ZN8tinyxml27XMLNode13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode13ToDeclarationEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode14DeleteChildrenEv = asm["__ZN8tinyxml27XMLNode14DeleteChildrenEv"];
asm["__ZN8tinyxml27XMLNode14DeleteChildrenEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode14DeleteChildrenEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode14InsertEndChildEPS0_ = asm["__ZN8tinyxml27XMLNode14InsertEndChildEPS0_"];
asm["__ZN8tinyxml27XMLNode14InsertEndChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode14InsertEndChildEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ = asm["__ZN8tinyxml27XMLNode16InsertFirstChildEPS0_"];
asm["__ZN8tinyxml27XMLNode16InsertFirstChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode16InsertFirstChildEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode6ToTextEv = asm["__ZN8tinyxml27XMLNode6ToTextEv"];
asm["__ZN8tinyxml27XMLNode6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode6ToTextEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode6UnlinkEPS0_ = asm["__ZN8tinyxml27XMLNode6UnlinkEPS0_"];
asm["__ZN8tinyxml27XMLNode6UnlinkEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode6UnlinkEPS0_.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode8SetValueEPKcb = asm["__ZN8tinyxml27XMLNode8SetValueEPKcb"];
asm["__ZN8tinyxml27XMLNode8SetValueEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode8SetValueEPKcb.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode9LastChildEv = asm["__ZN8tinyxml27XMLNode9LastChildEv"];
asm["__ZN8tinyxml27XMLNode9LastChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode9LastChildEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode9ToCommentEv = asm["__ZN8tinyxml27XMLNode9ToCommentEv"];
asm["__ZN8tinyxml27XMLNode9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode9ToCommentEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode9ToElementEv = asm["__ZN8tinyxml27XMLNode9ToElementEv"];
asm["__ZN8tinyxml27XMLNode9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode9ToElementEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNode9ToUnknownEv = asm["__ZN8tinyxml27XMLNode9ToUnknownEv"];
asm["__ZN8tinyxml27XMLNode9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNode9ToUnknownEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNodeD0Ev = asm["__ZN8tinyxml27XMLNodeD0Ev"];
asm["__ZN8tinyxml27XMLNodeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNodeD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml27XMLNodeD2Ev = asm["__ZN8tinyxml27XMLNodeD2Ev"];
asm["__ZN8tinyxml27XMLNodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLNodeD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27XMLText6ToTextEv = asm["__ZN8tinyxml27XMLText6ToTextEv"];
asm["__ZN8tinyxml27XMLText6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLText6ToTextEv.apply(null, arguments);
};

var real___ZN8tinyxml27XMLText8SetCDataEb = asm["__ZN8tinyxml27XMLText8SetCDataEb"];
asm["__ZN8tinyxml27XMLText8SetCDataEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLText8SetCDataEb.apply(null, arguments);
};

var real___ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi = asm["__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi"];
asm["__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE = asm["__ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE"];
asm["__ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZN8tinyxml27XMLTextD0Ev = asm["__ZN8tinyxml27XMLTextD0Ev"];
asm["__ZN8tinyxml27XMLTextD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLTextD0Ev.apply(null, arguments);
};

var real___ZN8tinyxml27XMLTextD2Ev = asm["__ZN8tinyxml27XMLTextD2Ev"];
asm["__ZN8tinyxml27XMLTextD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLTextD2Ev.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil10IsNameCharEh = asm["__ZN8tinyxml27XMLUtil10IsNameCharEh"];
asm["__ZN8tinyxml27XMLUtil10IsNameCharEh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil10IsNameCharEh.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i = asm["__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i"];
asm["__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil12IsWhiteSpaceEc = asm["__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc"];
asm["__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil12IsWhiteSpaceEc.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi = asm["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi"];
asm["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi = asm["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi"];
asm["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi = asm["__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi"];
asm["__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil15IsNameStartCharEh = asm["__ZN8tinyxml27XMLUtil15IsNameStartCharEh"];
asm["__ZN8tinyxml27XMLUtil15IsNameStartCharEh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil15IsNameStartCharEh.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi = asm["__ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi"];
asm["__ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc = asm["__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc"];
asm["__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc.apply(null, arguments);
};

var real___ZN8tinyxml27XMLUtil5ToStrEdPci = asm["__ZN8tinyxml27XMLUtil5ToStrEdPci"];
asm["__ZN8tinyxml27XMLUtil5ToStrEdPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml27XMLUtil5ToStrEdPci.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPKcLi10EE3PopEv = asm["__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv"];
asm["__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPKcLi10EE3PopEv.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_ = asm["__ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_"];
asm["__ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPKcLi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPKcLi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPKcLi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPKcLi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPKcLi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPKcLi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_ = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi = asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi"];
asm["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_ = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_ = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_ = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_ = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev = asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev"];
asm["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi = asm["__ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi"];
asm["__ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIcLi20EE4PushEc = asm["__ZN8tinyxml28DynArrayIcLi20EE4PushEc"];
asm["__ZN8tinyxml28DynArrayIcLi20EE4PushEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIcLi20EE4PushEc.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIcLi20EE7PushArrEi = asm["__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi"];
asm["__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIcLi20EE7PushArrEi.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIcLi20EEC2Ev = asm["__ZN8tinyxml28DynArrayIcLi20EEC2Ev"];
asm["__ZN8tinyxml28DynArrayIcLi20EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIcLi20EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28DynArrayIcLi20EED2Ev = asm["__ZN8tinyxml28DynArrayIcLi20EED2Ev"];
asm["__ZN8tinyxml28DynArrayIcLi20EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28DynArrayIcLi20EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv = asm["__ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv"];
asm["__ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EE4FreeEPv = asm["__ZN8tinyxml28MemPoolTILi40EE4FreeEPv"];
asm["__ZN8tinyxml28MemPoolTILi40EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EE4FreeEPv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EE5AllocEv = asm["__ZN8tinyxml28MemPoolTILi40EE5AllocEv"];
asm["__ZN8tinyxml28MemPoolTILi40EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EE5AllocEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EE5ClearEv = asm["__ZN8tinyxml28MemPoolTILi40EE5ClearEv"];
asm["__ZN8tinyxml28MemPoolTILi40EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EE5ClearEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EEC2Ev = asm["__ZN8tinyxml28MemPoolTILi40EEC2Ev"];
asm["__ZN8tinyxml28MemPoolTILi40EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EED0Ev = asm["__ZN8tinyxml28MemPoolTILi40EED0Ev"];
asm["__ZN8tinyxml28MemPoolTILi40EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EED0Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi40EED2Ev = asm["__ZN8tinyxml28MemPoolTILi40EED2Ev"];
asm["__ZN8tinyxml28MemPoolTILi40EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi40EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv = asm["__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv"];
asm["__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EE4FreeEPv = asm["__ZN8tinyxml28MemPoolTILi52EE4FreeEPv"];
asm["__ZN8tinyxml28MemPoolTILi52EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EE4FreeEPv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EE5AllocEv = asm["__ZN8tinyxml28MemPoolTILi52EE5AllocEv"];
asm["__ZN8tinyxml28MemPoolTILi52EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EE5AllocEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EE5ClearEv = asm["__ZN8tinyxml28MemPoolTILi52EE5ClearEv"];
asm["__ZN8tinyxml28MemPoolTILi52EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EE5ClearEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EEC2Ev = asm["__ZN8tinyxml28MemPoolTILi52EEC2Ev"];
asm["__ZN8tinyxml28MemPoolTILi52EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EED0Ev = asm["__ZN8tinyxml28MemPoolTILi52EED0Ev"];
asm["__ZN8tinyxml28MemPoolTILi52EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EED0Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi52EED2Ev = asm["__ZN8tinyxml28MemPoolTILi52EED2Ev"];
asm["__ZN8tinyxml28MemPoolTILi52EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi52EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv = asm["__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv"];
asm["__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EE4FreeEPv = asm["__ZN8tinyxml28MemPoolTILi56EE4FreeEPv"];
asm["__ZN8tinyxml28MemPoolTILi56EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EE4FreeEPv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EE5AllocEv = asm["__ZN8tinyxml28MemPoolTILi56EE5AllocEv"];
asm["__ZN8tinyxml28MemPoolTILi56EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EE5AllocEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EE5ClearEv = asm["__ZN8tinyxml28MemPoolTILi56EE5ClearEv"];
asm["__ZN8tinyxml28MemPoolTILi56EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EE5ClearEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EEC2Ev = asm["__ZN8tinyxml28MemPoolTILi56EEC2Ev"];
asm["__ZN8tinyxml28MemPoolTILi56EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EED0Ev = asm["__ZN8tinyxml28MemPoolTILi56EED0Ev"];
asm["__ZN8tinyxml28MemPoolTILi56EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EED0Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi56EED2Ev = asm["__ZN8tinyxml28MemPoolTILi56EED2Ev"];
asm["__ZN8tinyxml28MemPoolTILi56EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi56EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv = asm["__ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv"];
asm["__ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EE4FreeEPv = asm["__ZN8tinyxml28MemPoolTILi60EE4FreeEPv"];
asm["__ZN8tinyxml28MemPoolTILi60EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EE4FreeEPv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EE5AllocEv = asm["__ZN8tinyxml28MemPoolTILi60EE5AllocEv"];
asm["__ZN8tinyxml28MemPoolTILi60EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EE5AllocEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EE5ClearEv = asm["__ZN8tinyxml28MemPoolTILi60EE5ClearEv"];
asm["__ZN8tinyxml28MemPoolTILi60EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EE5ClearEv.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EEC2Ev = asm["__ZN8tinyxml28MemPoolTILi60EEC2Ev"];
asm["__ZN8tinyxml28MemPoolTILi60EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EEC2Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EED0Ev = asm["__ZN8tinyxml28MemPoolTILi60EED0Ev"];
asm["__ZN8tinyxml28MemPoolTILi60EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EED0Ev.apply(null, arguments);
};

var real___ZN8tinyxml28MemPoolTILi60EED2Ev = asm["__ZN8tinyxml28MemPoolTILi60EED2Ev"];
asm["__ZN8tinyxml28MemPoolTILi60EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml28MemPoolTILi60EED2Ev.apply(null, arguments);
};

var real___ZN8tinyxml2L9callfopenEPKcS1_ = asm["__ZN8tinyxml2L9callfopenEPKcS1_"];
asm["__ZN8tinyxml2L9callfopenEPKcS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN8tinyxml2L9callfopenEPKcS1_.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop1Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"];
asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop1Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop2Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"];
asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop2Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"];
asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"];
asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"];
asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"];
asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
asm["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
asm["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
asm["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
asm["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = asm["__ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"];
asm["__ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNK11Interpreter9get_errorEv = asm["__ZNK11Interpreter9get_errorEv"];
asm["__ZNK11Interpreter9get_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK11Interpreter9get_errorEv.apply(null, arguments);
};

var real___ZNK11SvgExporter13x_to_canvas_xEd = asm["__ZNK11SvgExporter13x_to_canvas_xEd"];
asm["__ZNK11SvgExporter13x_to_canvas_xEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK11SvgExporter13x_to_canvas_xEd.apply(null, arguments);
};

var real___ZNK11SvgExporter13y_to_canvas_yEd = asm["__ZNK11SvgExporter13y_to_canvas_yEd"];
asm["__ZNK11SvgExporter13y_to_canvas_yEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK11SvgExporter13y_to_canvas_yEd.apply(null, arguments);
};

var real___ZNK11SvgExporter9to_stringEv = asm["__ZNK11SvgExporter9to_stringEv"];
asm["__ZNK11SvgExporter9to_stringEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK11SvgExporter9to_stringEv.apply(null, arguments);
};

var real___ZNK14FreeConstraint10get_limitsEv = asm["__ZNK14FreeConstraint10get_limitsEv"];
asm["__ZNK14FreeConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK14FreeConstraint17determines_pointsEv = asm["__ZNK14FreeConstraint17determines_pointsEv"];
asm["__ZNK14FreeConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK14FreeConstraint18num_free_variablesEv = asm["__ZNK14FreeConstraint18num_free_variablesEv"];
asm["__ZNK14FreeConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK15AngleConstraint10get_limitsEv = asm["__ZNK15AngleConstraint10get_limitsEv"];
asm["__ZNK15AngleConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK15AngleConstraint17determines_pointsEv = asm["__ZNK15AngleConstraint17determines_pointsEv"];
asm["__ZNK15AngleConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK15AngleConstraint18num_free_variablesEv = asm["__ZNK15AngleConstraint18num_free_variablesEv"];
asm["__ZNK15AngleConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK15FixedConstraint10get_limitsEv = asm["__ZNK15FixedConstraint10get_limitsEv"];
asm["__ZNK15FixedConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK15FixedConstraint17determines_pointsEv = asm["__ZNK15FixedConstraint17determines_pointsEv"];
asm["__ZNK15FixedConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK15FixedConstraint18num_free_variablesEv = asm["__ZNK15FixedConstraint18num_free_variablesEv"];
asm["__ZNK15FixedConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK15WhichCoordinate12defines_sameERKS_ = asm["__ZNK15WhichCoordinate12defines_sameERKS_"];
asm["__ZNK15WhichCoordinate12defines_sameERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15WhichCoordinate12defines_sameERKS_.apply(null, arguments);
};

var real___ZNK15WhichCoordinate17fully_constrainedEv = asm["__ZNK15WhichCoordinate17fully_constrainedEv"];
asm["__ZNK15WhichCoordinate17fully_constrainedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK15WhichCoordinate17fully_constrainedEv.apply(null, arguments);
};

var real___ZNK16MirrorConstraint10get_limitsEv = asm["__ZNK16MirrorConstraint10get_limitsEv"];
asm["__ZNK16MirrorConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK16MirrorConstraint17determines_pointsEv = asm["__ZNK16MirrorConstraint17determines_pointsEv"];
asm["__ZNK16MirrorConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK16MirrorConstraint18num_free_variablesEv = asm["__ZNK16MirrorConstraint18num_free_variablesEv"];
asm["__ZNK16MirrorConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK16SmoothConstraint10get_limitsEv = asm["__ZNK16SmoothConstraint10get_limitsEv"];
asm["__ZNK16SmoothConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK16SmoothConstraint17determines_pointsEv = asm["__ZNK16SmoothConstraint17determines_pointsEv"];
asm["__ZNK16SmoothConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK16SmoothConstraint18num_free_variablesEv = asm["__ZNK16SmoothConstraint18num_free_variablesEv"];
asm["__ZNK16SmoothConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK19DirectionConstraint10get_limitsEv = asm["__ZNK19DirectionConstraint10get_limitsEv"];
asm["__ZNK19DirectionConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK19DirectionConstraint17determines_pointsEv = asm["__ZNK19DirectionConstraint17determines_pointsEv"];
asm["__ZNK19DirectionConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK19DirectionConstraint18num_free_variablesEv = asm["__ZNK19DirectionConstraint18num_free_variablesEv"];
asm["__ZNK19DirectionConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint10get_limitsEv = asm["__ZNK20SameOffsetConstraint10get_limitsEv"];
asm["__ZNK20SameOffsetConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint10get_limitsEv.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = asm["__ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"];
asm["__ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint17determines_pointsEv = asm["__ZNK20SameOffsetConstraint17determines_pointsEv"];
asm["__ZNK20SameOffsetConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint17determines_pointsEv.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint18num_free_variablesEv = asm["__ZNK20SameOffsetConstraint18num_free_variablesEv"];
asm["__ZNK20SameOffsetConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint18num_free_variablesEv.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = asm["__ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"];
asm["__ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi.apply(null, arguments);
};

var real___ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK5Point1xEv = asm["__ZNK5Point1xEv"];
asm["__ZNK5Point1xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK5Point1xEv.apply(null, arguments);
};

var real___ZNK5Point1yEv = asm["__ZNK5Point1yEv"];
asm["__ZNK5Point1yEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK5Point1yEv.apply(null, arguments);
};

var real___ZNK5PointmiERK6Vector = asm["__ZNK5PointmiERK6Vector"];
asm["__ZNK5PointmiERK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK5PointmiERK6Vector.apply(null, arguments);
};

var real___ZNK5PointmiERKS_ = asm["__ZNK5PointmiERKS_"];
asm["__ZNK5PointmiERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK5PointmiERKS_.apply(null, arguments);
};

var real___ZNK5PointplERK6Vector = asm["__ZNK5PointplERK6Vector"];
asm["__ZNK5PointplERK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK5PointplERK6Vector.apply(null, arguments);
};

var real___ZNK6Bezier11evaluate_d1Ed = asm["__ZNK6Bezier11evaluate_d1Ed"];
asm["__ZNK6Bezier11evaluate_d1Ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier11evaluate_d1Ed.apply(null, arguments);
};

var real___ZNK6Bezier11evaluate_d2Ed = asm["__ZNK6Bezier11evaluate_d2Ed"];
asm["__ZNK6Bezier11evaluate_d2Ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier11evaluate_d2Ed.apply(null, arguments);
};

var real___ZNK6Bezier20evaluate_left_normalEd = asm["__ZNK6Bezier20evaluate_left_normalEd"];
asm["__ZNK6Bezier20evaluate_left_normalEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier20evaluate_left_normalEd.apply(null, arguments);
};

var real___ZNK6Bezier2c1Ev = asm["__ZNK6Bezier2c1Ev"];
asm["__ZNK6Bezier2c1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier2c1Ev.apply(null, arguments);
};

var real___ZNK6Bezier2c2Ev = asm["__ZNK6Bezier2c2Ev"];
asm["__ZNK6Bezier2c2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier2c2Ev.apply(null, arguments);
};

var real___ZNK6Bezier2p1Ev = asm["__ZNK6Bezier2p1Ev"];
asm["__ZNK6Bezier2p1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier2p1Ev.apply(null, arguments);
};

var real___ZNK6Bezier2p2Ev = asm["__ZNK6Bezier2p2Ev"];
asm["__ZNK6Bezier2p2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Bezier2p2Ev.apply(null, arguments);
};

var real___ZNK6Parser14get_statementsEv = asm["__ZNK6Parser14get_statementsEv"];
asm["__ZNK6Parser14get_statementsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Parser14get_statementsEv.apply(null, arguments);
};

var real___ZNK6Parser8is_errorEv = asm["__ZNK6Parser8is_errorEv"];
asm["__ZNK6Parser8is_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Parser8is_errorEv.apply(null, arguments);
};

var real___ZNK6Parser9get_errorEv = asm["__ZNK6Parser9get_errorEv"];
asm["__ZNK6Parser9get_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Parser9get_errorEv.apply(null, arguments);
};

var real___ZNK6Parser9get_nodesEv = asm["__ZNK6Parser9get_nodesEv"];
asm["__ZNK6Parser9get_nodesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Parser9get_nodesEv.apply(null, arguments);
};

var real___ZNK6Stroke10get_pointsEv = asm["__ZNK6Stroke10get_pointsEv"];
asm["__ZNK6Stroke10get_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Stroke10get_pointsEv.apply(null, arguments);
};

var real___ZNK6Stroke13build_beziersEv = asm["__ZNK6Stroke13build_beziersEv"];
asm["__ZNK6Stroke13build_beziersEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Stroke13build_beziersEv.apply(null, arguments);
};

var real___ZNK6Stroke17calculate_2nd_derEv = asm["__ZNK6Stroke17calculate_2nd_derEv"];
asm["__ZNK6Stroke17calculate_2nd_derEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Stroke17calculate_2nd_derEv.apply(null, arguments);
};

var real___ZNK6Stroke18get_free_variablesEv = asm["__ZNK6Stroke18get_free_variablesEv"];
asm["__ZNK6Stroke18get_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Stroke18get_free_variablesEv.apply(null, arguments);
};

var real___ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE = asm["__ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE"];
asm["__ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE.apply(null, arguments);
};

var real___ZNK6Vector10normalizedEv = asm["__ZNK6Vector10normalizedEv"];
asm["__ZNK6Vector10normalizedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector10normalizedEv.apply(null, arguments);
};

var real___ZNK6Vector19is_numerically_zeroEv = asm["__ZNK6Vector19is_numerically_zeroEv"];
asm["__ZNK6Vector19is_numerically_zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector19is_numerically_zeroEv.apply(null, arguments);
};

var real___ZNK6Vector1xEv = asm["__ZNK6Vector1xEv"];
asm["__ZNK6Vector1xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector1xEv.apply(null, arguments);
};

var real___ZNK6Vector1yEv = asm["__ZNK6Vector1yEv"];
asm["__ZNK6Vector1yEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector1yEv.apply(null, arguments);
};

var real___ZNK6Vector3dotERKS_ = asm["__ZNK6Vector3dotERKS_"];
asm["__ZNK6Vector3dotERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector3dotERKS_.apply(null, arguments);
};

var real___ZNK6Vector6lengthEv = asm["__ZNK6Vector6lengthEv"];
asm["__ZNK6Vector6lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6Vector6lengthEv.apply(null, arguments);
};

var real___ZNK6VectormiERKS_ = asm["__ZNK6VectormiERKS_"];
asm["__ZNK6VectormiERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6VectormiERKS_.apply(null, arguments);
};

var real___ZNK6VectormlEd = asm["__ZNK6VectormlEd"];
asm["__ZNK6VectormlEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK6VectormlEd.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE = asm["__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE"];
asm["__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLComment9ToCommentEv = asm["__ZNK8tinyxml210XMLComment9ToCommentEv"];
asm["__ZNK8tinyxml210XMLComment9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLComment9ToCommentEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement11ClosingTypeEv = asm["__ZNK8tinyxml210XMLElement11ClosingTypeEv"];
asm["__ZNK8tinyxml210XMLElement11ClosingTypeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement11ClosingTypeEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE = asm["__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE"];
asm["__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement13FindAttributeEPKc = asm["__ZNK8tinyxml210XMLElement13FindAttributeEPKc"];
asm["__ZNK8tinyxml210XMLElement13FindAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement13FindAttributeEPKc.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement14FirstAttributeEv = asm["__ZNK8tinyxml210XMLElement14FirstAttributeEv"];
asm["__ZNK8tinyxml210XMLElement14FirstAttributeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement14FirstAttributeEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement4NameEv = asm["__ZNK8tinyxml210XMLElement4NameEv"];
asm["__ZNK8tinyxml210XMLElement4NameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement4NameEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement9AttributeEPKcS2_ = asm["__ZNK8tinyxml210XMLElement9AttributeEPKcS2_"];
asm["__ZNK8tinyxml210XMLElement9AttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement9AttributeEPKcS2_.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLElement9ToElementEv = asm["__ZNK8tinyxml210XMLElement9ToElementEv"];
asm["__ZNK8tinyxml210XMLElement9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLElement9ToElementEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLPrinter4CStrEv = asm["__ZNK8tinyxml210XMLPrinter4CStrEv"];
asm["__ZNK8tinyxml210XMLPrinter4CStrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLPrinter4CStrEv.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE = asm["__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE"];
asm["__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml210XMLUnknown9ToUnknownEv = asm["__ZNK8tinyxml210XMLUnknown9ToUnknownEv"];
asm["__ZNK8tinyxml210XMLUnknown9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml210XMLUnknown9ToUnknownEv.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument10ToDocumentEv = asm["__ZNK8tinyxml211XMLDocument10ToDocumentEv"];
asm["__ZNK8tinyxml211XMLDocument10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument10ToDocumentEv.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_ = asm["__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_"];
asm["__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument14WhitespaceModeEv = asm["__ZNK8tinyxml211XMLDocument14WhitespaceModeEv"];
asm["__ZNK8tinyxml211XMLDocument14WhitespaceModeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument14WhitespaceModeEv.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument15ProcessEntitiesEv = asm["__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv"];
asm["__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument15ProcessEntitiesEv.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument5ErrorEv = asm["__ZNK8tinyxml211XMLDocument5ErrorEv"];
asm["__ZNK8tinyxml211XMLDocument5ErrorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument5ErrorEv.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE = asm["__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE"];
asm["__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml211XMLDocument6HasBOMEv = asm["__ZNK8tinyxml211XMLDocument6HasBOMEv"];
asm["__ZNK8tinyxml211XMLDocument6HasBOMEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml211XMLDocument6HasBOMEv.apply(null, arguments);
};

var real___ZNK8tinyxml212XMLAttribute4NameEv = asm["__ZNK8tinyxml212XMLAttribute4NameEv"];
asm["__ZNK8tinyxml212XMLAttribute4NameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml212XMLAttribute4NameEv.apply(null, arguments);
};

var real___ZNK8tinyxml212XMLAttribute4NextEv = asm["__ZNK8tinyxml212XMLAttribute4NextEv"];
asm["__ZNK8tinyxml212XMLAttribute4NextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml212XMLAttribute4NextEv.apply(null, arguments);
};

var real___ZNK8tinyxml212XMLAttribute5ValueEv = asm["__ZNK8tinyxml212XMLAttribute5ValueEv"];
asm["__ZNK8tinyxml212XMLAttribute5ValueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml212XMLAttribute5ValueEv.apply(null, arguments);
};

var real___ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE = asm["__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE"];
asm["__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml214XMLDeclaration13ToDeclarationEv = asm["__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv"];
asm["__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml214XMLDeclaration13ToDeclarationEv.apply(null, arguments);
};

var real___ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml27StrPair5EmptyEv = asm["__ZNK8tinyxml27StrPair5EmptyEv"];
asm["__ZNK8tinyxml27StrPair5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27StrPair5EmptyEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode10FirstChildEv = asm["__ZNK8tinyxml27XMLNode10FirstChildEv"];
asm["__ZNK8tinyxml27XMLNode10FirstChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode10FirstChildEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode10ToDocumentEv = asm["__ZNK8tinyxml27XMLNode10ToDocumentEv"];
asm["__ZNK8tinyxml27XMLNode10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode10ToDocumentEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode11NextSiblingEv = asm["__ZNK8tinyxml27XMLNode11NextSiblingEv"];
asm["__ZNK8tinyxml27XMLNode11NextSiblingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode11NextSiblingEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode13ToDeclarationEv = asm["__ZNK8tinyxml27XMLNode13ToDeclarationEv"];
asm["__ZNK8tinyxml27XMLNode13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode13ToDeclarationEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_ = asm["__ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_"];
asm["__ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode5ValueEv = asm["__ZNK8tinyxml27XMLNode5ValueEv"];
asm["__ZNK8tinyxml27XMLNode5ValueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode5ValueEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode6ParentEv = asm["__ZNK8tinyxml27XMLNode6ParentEv"];
asm["__ZNK8tinyxml27XMLNode6ParentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode6ParentEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode6ToTextEv = asm["__ZNK8tinyxml27XMLNode6ToTextEv"];
asm["__ZNK8tinyxml27XMLNode6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode6ToTextEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode9ToCommentEv = asm["__ZNK8tinyxml27XMLNode9ToCommentEv"];
asm["__ZNK8tinyxml27XMLNode9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode9ToCommentEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode9ToElementEv = asm["__ZNK8tinyxml27XMLNode9ToElementEv"];
asm["__ZNK8tinyxml27XMLNode9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode9ToElementEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLNode9ToUnknownEv = asm["__ZNK8tinyxml27XMLNode9ToUnknownEv"];
asm["__ZNK8tinyxml27XMLNode9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLNode9ToUnknownEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE = asm["__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE"];
asm["__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE = asm["__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE"];
asm["__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLText5CDataEv = asm["__ZNK8tinyxml27XMLText5CDataEv"];
asm["__ZNK8tinyxml27XMLText5CDataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLText5CDataEv.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE = asm["__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE"];
asm["__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE.apply(null, arguments);
};

var real___ZNK8tinyxml27XMLText6ToTextEv = asm["__ZNK8tinyxml27XMLText6ToTextEv"];
asm["__ZNK8tinyxml27XMLText6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml27XMLText6ToTextEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv = asm["__ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv"];
asm["__ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv = asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv"];
asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv = asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv"];
asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv = asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv"];
asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv = asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv"];
asm["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv.apply(null, arguments);
};

var real___ZNK8tinyxml28DynArrayIcLi20EE3MemEv = asm["__ZNK8tinyxml28DynArrayIcLi20EE3MemEv"];
asm["__ZNK8tinyxml28DynArrayIcLi20EE3MemEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28DynArrayIcLi20EE3MemEv.apply(null, arguments);
};

var real___ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv = asm["__ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv"];
asm["__ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv.apply(null, arguments);
};

var real___ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv = asm["__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv"];
asm["__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv.apply(null, arguments);
};

var real___ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv = asm["__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv"];
asm["__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv.apply(null, arguments);
};

var real___ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv = asm["__ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv"];
asm["__ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv.apply(null, arguments);
};

var real___ZNKSt11logic_error4whatEv = asm["__ZNKSt11logic_error4whatEv"];
asm["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt11logic_error4whatEv.apply(null, arguments);
};

var real___ZNKSt13runtime_error4whatEv = asm["__ZNKSt13runtime_error4whatEv"];
asm["__ZNKSt13runtime_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt13runtime_error4whatEv.apply(null, arguments);
};

var real___ZNKSt18bad_variant_access4whatEv = asm["__ZNKSt18bad_variant_access4whatEv"];
asm["__ZNKSt18bad_variant_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt18bad_variant_access4whatEv.apply(null, arguments);
};

var real___ZNKSt19bad_optional_access4whatEv = asm["__ZNKSt19bad_optional_access4whatEv"];
asm["__ZNKSt19bad_optional_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt19bad_optional_access4whatEv.apply(null, arguments);
};

var real___ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = asm["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"];
asm["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = asm["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"];
asm["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"];
asm["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"];
asm["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"];
asm["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"];
asm["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE = asm["__ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE"];
asm["__ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"];
asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb.apply(null, arguments);
};

var real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"];
asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb.apply(null, arguments);
};

var real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"];
asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb.apply(null, arguments);
};

var real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"];
asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb.apply(null, arguments);
};

var real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE = asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE"];
asm["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE.apply(null, arguments);
};

var real___ZNKSt3__212_GLOBAL__N_111__fake_bindclEv = asm["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"];
asm["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212_GLOBAL__N_111__fake_bindclEv.apply(null, arguments);
};

var real___ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv = asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"];
asm["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv.apply(null, arguments);
};

var real___ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_ = asm["__ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_"];
asm["__ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_.apply(null, arguments);
};

var real___ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm = asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"];
asm["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE16translate_nocaseEc = asm["__ZNKSt3__212regex_traitsIcE16translate_nocaseEc"];
asm["__ZNKSt3__212regex_traitsIcE16translate_nocaseEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE16translate_nocaseEc.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc = asm["__ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc"];
asm["__ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c = asm["__ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c"];
asm["__ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c = asm["__ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"];
asm["__ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c = asm["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c"];
asm["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c = asm["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"];
asm["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE7isctypeEct = asm["__ZNKSt3__212regex_traitsIcE7isctypeEct"];
asm["__ZNKSt3__212regex_traitsIcE7isctypeEct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE7isctypeEct.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_ = asm["__ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_"];
asm["__ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_.apply(null, arguments);
};

var real___ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_ = asm["__ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_"];
asm["__ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_.apply(null, arguments);
};

var real___ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv = asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"];
asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring5c_strEv = asm["__ZNKSt3__218__libcpp_refstring5c_strEv"];
asm["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring5c_strEv.apply(null, arguments);
};

var real___ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info = asm["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"];
asm["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info.apply(null, arguments);
};

var real___ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = asm["__ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info = asm["__ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info"];
asm["__ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__XEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__XEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__XEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__cEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__cEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__cEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__rEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__rEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__rEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__xEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__xEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__xEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = asm["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE7__am_pmEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE7__weeksEv = asm["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE7__weeksEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE8__monthsEv = asm["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"];
asm["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE8__monthsEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__XEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__XEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__XEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__cEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__cEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__cEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__rEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__rEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__rEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__xEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__xEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__xEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = asm["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE7__am_pmEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE7__weeksEv = asm["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE7__weeksEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE8__monthsEv = asm["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"];
asm["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE8__monthsEv.apply(null, arguments);
};

var real___ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"];
asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv.apply(null, arguments);
};

var real___ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"];
asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv.apply(null, arguments);
};

var real___ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv = asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"];
asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv.apply(null, arguments);
};

var real___ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_ = asm["__ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_"];
asm["__ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = asm["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"];
asm["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_tolowerEPcPKc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_tolowerEc = asm["__ZNKSt3__25ctypeIcE10do_tolowerEc"];
asm["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_tolowerEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_toupperEPcPKc = asm["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"];
asm["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_toupperEPcPKc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_toupperEc = asm["__ZNKSt3__25ctypeIcE10do_toupperEc"];
asm["__ZNKSt3__25ctypeIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_toupperEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = asm["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"];
asm["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE8do_widenEc = asm["__ZNKSt3__25ctypeIcE8do_widenEc"];
asm["__ZNKSt3__25ctypeIcE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE8do_widenEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = asm["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"];
asm["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE9do_narrowEcc = asm["__ZNKSt3__25ctypeIcE9do_narrowEcc"];
asm["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE9do_narrowEcc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = asm["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"];
asm["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = asm["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"];
asm["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_tolowerEPwPKw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_tolowerEw = asm["__ZNKSt3__25ctypeIwE10do_tolowerEw"];
asm["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_tolowerEw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_toupperEPwPKw = asm["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"];
asm["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_toupperEPwPKw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_toupperEw = asm["__ZNKSt3__25ctypeIwE10do_toupperEw"];
asm["__ZNKSt3__25ctypeIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_toupperEw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = asm["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"];
asm["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = asm["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"];
asm["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE5do_isEtw = asm["__ZNKSt3__25ctypeIwE5do_isEtw"];
asm["__ZNKSt3__25ctypeIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE5do_isEtw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = asm["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"];
asm["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE8do_widenEc = asm["__ZNKSt3__25ctypeIwE8do_widenEc"];
asm["__ZNKSt3__25ctypeIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE8do_widenEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = asm["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"];
asm["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE9do_narrowEwc = asm["__ZNKSt3__25ctypeIwE9do_narrowEwc"];
asm["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE9do_narrowEwc.apply(null, arguments);
};

var real___ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE = asm["__ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE"];
asm["__ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE = asm["__ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE"];
asm["__ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE = asm["__ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE"];
asm["__ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE.apply(null, arguments);
};

var real___ZNKSt3__26locale4nameEv = asm["__ZNKSt3__26locale4nameEv"];
asm["__ZNKSt3__26locale4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale4nameEv.apply(null, arguments);
};

var real___ZNKSt3__26locale5__imp4nameEv = asm["__ZNKSt3__26locale5__imp4nameEv"];
asm["__ZNKSt3__26locale5__imp4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale5__imp4nameEv.apply(null, arguments);
};

var real___ZNKSt3__26locale5__imp9use_facetEl = asm["__ZNKSt3__26locale5__imp9use_facetEl"];
asm["__ZNKSt3__26locale5__imp9use_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale5__imp9use_facetEl.apply(null, arguments);
};

var real___ZNKSt3__26locale9use_facetERNS0_2idE = asm["__ZNKSt3__26locale9use_facetERNS0_2idE"];
asm["__ZNKSt3__26locale9use_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale9use_facetERNS0_2idE.apply(null, arguments);
};

var real___ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv = asm["__ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv = asm["__ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv = asm["__ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv"];
asm["__ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv = asm["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"];
asm["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv = asm["__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv"];
asm["__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv = asm["__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv"];
asm["__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv = asm["__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv"];
asm["__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"];
asm["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"];
asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"];
asm["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"];
asm["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = asm["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"];
asm["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE12do_transformEPKcS3_ = asm["__ZNKSt3__27collateIcE12do_transformEPKcS3_"];
asm["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE12do_transformEPKcS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE7do_hashEPKcS3_ = asm["__ZNKSt3__27collateIcE7do_hashEPKcS3_"];
asm["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE7do_hashEPKcS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = asm["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"];
asm["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE12do_transformEPKwS3_ = asm["__ZNKSt3__27collateIwE12do_transformEPKwS3_"];
asm["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE12do_transformEPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE7do_hashEPKwS3_ = asm["__ZNKSt3__27collateIwE7do_hashEPKwS3_"];
asm["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE7do_hashEPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"];
asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"];
asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"];
asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"];
asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy.apply(null, arguments);
};

var real___ZNKSt3__28ios_base6getlocEv = asm["__ZNKSt3__28ios_base6getlocEv"];
asm["__ZNKSt3__28ios_base6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28ios_base6getlocEv.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
asm["__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = asm["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
asm["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE8do_closeEl = asm["__ZNKSt3__28messagesIcE8do_closeEl"];
asm["__ZNKSt3__28messagesIcE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE8do_closeEl.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = asm["__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"];
asm["__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = asm["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"];
asm["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE8do_closeEl = asm["__ZNKSt3__28messagesIwE8do_closeEl"];
asm["__ZNKSt3__28messagesIwE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE8do_closeEl.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE11do_groupingEv = asm["__ZNKSt3__28numpunctIcE11do_groupingEv"];
asm["__ZNKSt3__28numpunctIcE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE11do_truenameEv = asm["__ZNKSt3__28numpunctIcE11do_truenameEv"];
asm["__ZNKSt3__28numpunctIcE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE11do_truenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE12do_falsenameEv = asm["__ZNKSt3__28numpunctIcE12do_falsenameEv"];
asm["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE12do_falsenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE16do_decimal_pointEv = asm["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"];
asm["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE16do_thousands_sepEv = asm["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"];
asm["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE11do_groupingEv = asm["__ZNKSt3__28numpunctIwE11do_groupingEv"];
asm["__ZNKSt3__28numpunctIwE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE11do_truenameEv = asm["__ZNKSt3__28numpunctIwE11do_truenameEv"];
asm["__ZNKSt3__28numpunctIwE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE11do_truenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE12do_falsenameEv = asm["__ZNKSt3__28numpunctIwE12do_falsenameEv"];
asm["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE12do_falsenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE16do_decimal_pointEv = asm["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"];
asm["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE16do_thousands_sepEv = asm["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"];
asm["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"];
asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"];
asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"];
asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"];
asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc = asm["__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"];
asm["__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc.apply(null, arguments);
};

var real___ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc = asm["__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"];
asm["__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc.apply(null, arguments);
};

var real___ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw = asm["__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"];
asm["__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw.apply(null, arguments);
};

var real___ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_ = asm["__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"];
asm["__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_.apply(null, arguments);
};

var real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"];
asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"];
asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"];
asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"];
asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce.apply(null, arguments);
};

var real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"];
asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"];
asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe.apply(null, arguments);
};

var real___ZNKSt9exception4whatEv = asm["__ZNKSt9exception4whatEv"];
asm["__ZNKSt9exception4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt9exception4whatEv.apply(null, arguments);
};

var real___ZNSt11logic_errorC2EPKc = asm["__ZNSt11logic_errorC2EPKc"];
asm["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorC2EPKc.apply(null, arguments);
};

var real___ZNSt11logic_errorD0Ev = asm["__ZNSt11logic_errorD0Ev"];
asm["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD0Ev.apply(null, arguments);
};

var real___ZNSt11logic_errorD2Ev = asm["__ZNSt11logic_errorD2Ev"];
asm["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD2Ev.apply(null, arguments);
};

var real___ZNSt12length_errorD0Ev = asm["__ZNSt12length_errorD0Ev"];
asm["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt12length_errorD0Ev.apply(null, arguments);
};

var real___ZNSt13runtime_errorC2EPKc = asm["__ZNSt13runtime_errorC2EPKc"];
asm["__ZNSt13runtime_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorC2EPKc.apply(null, arguments);
};

var real___ZNSt13runtime_errorD0Ev = asm["__ZNSt13runtime_errorD0Ev"];
asm["__ZNSt13runtime_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorD0Ev.apply(null, arguments);
};

var real___ZNSt13runtime_errorD2Ev = asm["__ZNSt13runtime_errorD2Ev"];
asm["__ZNSt13runtime_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorD2Ev.apply(null, arguments);
};

var real___ZNSt18bad_variant_accessC2Ev = asm["__ZNSt18bad_variant_accessC2Ev"];
asm["__ZNSt18bad_variant_accessC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt18bad_variant_accessC2Ev.apply(null, arguments);
};

var real___ZNSt18bad_variant_accessD0Ev = asm["__ZNSt18bad_variant_accessD0Ev"];
asm["__ZNSt18bad_variant_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt18bad_variant_accessD0Ev.apply(null, arguments);
};

var real___ZNSt18bad_variant_accessD2Ev = asm["__ZNSt18bad_variant_accessD2Ev"];
asm["__ZNSt18bad_variant_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt18bad_variant_accessD2Ev.apply(null, arguments);
};

var real___ZNSt19bad_optional_accessC2Ev = asm["__ZNSt19bad_optional_accessC2Ev"];
asm["__ZNSt19bad_optional_accessC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt19bad_optional_accessC2Ev.apply(null, arguments);
};

var real___ZNSt19bad_optional_accessD0Ev = asm["__ZNSt19bad_optional_accessD0Ev"];
asm["__ZNSt19bad_optional_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt19bad_optional_accessD0Ev.apply(null, arguments);
};

var real___ZNSt19bad_optional_accessD2Ev = asm["__ZNSt19bad_optional_accessD2Ev"];
asm["__ZNSt19bad_optional_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt19bad_optional_accessD2Ev.apply(null, arguments);
};

var real___ZNSt3__210__back_refIcED0Ev = asm["__ZNSt3__210__back_refIcED0Ev"];
asm["__ZNSt3__210__back_refIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__back_refIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__210__back_refIcED2Ev = asm["__ZNSt3__210__back_refIcED2Ev"];
asm["__ZNSt3__210__back_refIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__back_refIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__210__l_anchorIcED0Ev = asm["__ZNSt3__210__l_anchorIcED0Ev"];
asm["__ZNSt3__210__l_anchorIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__l_anchorIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__210__l_anchorIcED2Ev = asm["__ZNSt3__210__l_anchorIcED2Ev"];
asm["__ZNSt3__210__l_anchorIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__l_anchorIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__210__r_anchorIcED0Ev = asm["__ZNSt3__210__r_anchorIcED0Ev"];
asm["__ZNSt3__210__r_anchorIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__r_anchorIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__210__r_anchorIcED2Ev = asm["__ZNSt3__210__r_anchorIcED2Ev"];
asm["__ZNSt3__210__r_anchorIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__r_anchorIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__210__time_putD2Ev = asm["__ZNSt3__210__time_putD2Ev"];
asm["__ZNSt3__210__time_putD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__time_putD2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb0EED0Ev = asm["__ZNSt3__210moneypunctIcLb0EED0Ev"];
asm["__ZNSt3__210moneypunctIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb0EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb0EED2Ev = asm["__ZNSt3__210moneypunctIcLb0EED2Ev"];
asm["__ZNSt3__210moneypunctIcLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb1EED0Ev = asm["__ZNSt3__210moneypunctIcLb1EED0Ev"];
asm["__ZNSt3__210moneypunctIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb1EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb1EED2Ev = asm["__ZNSt3__210moneypunctIcLb1EED2Ev"];
asm["__ZNSt3__210moneypunctIcLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb0EED0Ev = asm["__ZNSt3__210moneypunctIwLb0EED0Ev"];
asm["__ZNSt3__210moneypunctIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb0EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb0EED2Ev = asm["__ZNSt3__210moneypunctIwLb0EED2Ev"];
asm["__ZNSt3__210moneypunctIwLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb1EED0Ev = asm["__ZNSt3__210moneypunctIwLb1EED0Ev"];
asm["__ZNSt3__210moneypunctIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb1EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb1EED2Ev = asm["__ZNSt3__210moneypunctIwLb1EED2Ev"];
asm["__ZNSt3__210moneypunctIwLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz = asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz"];
asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz.apply(null, arguments);
};

var real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE = asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE"];
asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE.apply(null, arguments);
};

var real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev = asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev"];
asm["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__alternateIcED0Ev = asm["__ZNSt3__211__alternateIcED0Ev"];
asm["__ZNSt3__211__alternateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__alternateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__alternateIcED2Ev = asm["__ZNSt3__211__alternateIcED2Ev"];
asm["__ZNSt3__211__alternateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__alternateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__call_onceERVmPvPFvS2_E = asm["__ZNSt3__211__call_onceERVmPvPFvS2_E"];
asm["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__call_onceERVmPvPFvS2_E.apply(null, arguments);
};

var real___ZNSt3__211__end_stateIcED0Ev = asm["__ZNSt3__211__end_stateIcED0Ev"];
asm["__ZNSt3__211__end_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__end_stateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__end_stateIcED2Ev = asm["__ZNSt3__211__end_stateIcED2Ev"];
asm["__ZNSt3__211__end_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__end_stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__match_anyIcED0Ev = asm["__ZNSt3__211__match_anyIcED0Ev"];
asm["__ZNSt3__211__match_anyIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__match_anyIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__match_anyIcED2Ev = asm["__ZNSt3__211__match_anyIcED2Ev"];
asm["__ZNSt3__211__match_anyIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__match_anyIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = asm["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"];
asm["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = asm["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"];
asm["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = asm["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"];
asm["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = asm["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"];
asm["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i.apply(null, arguments);
};

var real___ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = asm["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"];
asm["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = asm["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"];
asm["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_ = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_.apply(null, arguments);
};

var real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE11eq_int_typeEii = asm["__ZNSt3__211char_traitsIcE11eq_int_typeEii"];
asm["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE11eq_int_typeEii.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE11to_int_typeEc = asm["__ZNSt3__211char_traitsIcE11to_int_typeEc"];
asm["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE11to_int_typeEc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE3eofEv = asm["__ZNSt3__211char_traitsIcE3eofEv"];
asm["__ZNSt3__211char_traitsIcE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE3eofEv.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE4copyEPcPKcm = asm["__ZNSt3__211char_traitsIcE4copyEPcPKcm"];
asm["__ZNSt3__211char_traitsIcE4copyEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE4copyEPcPKcm.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE4moveEPcPKcm = asm["__ZNSt3__211char_traitsIcE4moveEPcPKcm"];
asm["__ZNSt3__211char_traitsIcE4moveEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE4moveEPcPKcm.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6assignEPcmc = asm["__ZNSt3__211char_traitsIcE6assignEPcmc"];
asm["__ZNSt3__211char_traitsIcE6assignEPcmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6assignEPcmc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6assignERcRKc = asm["__ZNSt3__211char_traitsIcE6assignERcRKc"];
asm["__ZNSt3__211char_traitsIcE6assignERcRKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6assignERcRKc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6lengthEPKc = asm["__ZNSt3__211char_traitsIcE6lengthEPKc"];
asm["__ZNSt3__211char_traitsIcE6lengthEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6lengthEPKc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE7compareEPKcS3_m = asm["__ZNSt3__211char_traitsIcE7compareEPKcS3_m"];
asm["__ZNSt3__211char_traitsIcE7compareEPKcS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE7compareEPKcS3_m.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE11eq_int_typeEjj = asm["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"];
asm["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE11eq_int_typeEjj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE11to_int_typeEw = asm["__ZNSt3__211char_traitsIwE11to_int_typeEw"];
asm["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE11to_int_typeEw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE3eofEv = asm["__ZNSt3__211char_traitsIwE3eofEv"];
asm["__ZNSt3__211char_traitsIwE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE3eofEv.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE4copyEPwPKwm = asm["__ZNSt3__211char_traitsIwE4copyEPwPKwm"];
asm["__ZNSt3__211char_traitsIwE4copyEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE4copyEPwPKwm.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE4moveEPwPKwm = asm["__ZNSt3__211char_traitsIwE4moveEPwPKwm"];
asm["__ZNSt3__211char_traitsIwE4moveEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE4moveEPwPKwm.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6assignEPwmw = asm["__ZNSt3__211char_traitsIwE6assignEPwmw"];
asm["__ZNSt3__211char_traitsIwE6assignEPwmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6assignEPwmw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6assignERwRKw = asm["__ZNSt3__211char_traitsIwE6assignERwRKw"];
asm["__ZNSt3__211char_traitsIwE6assignERwRKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6assignERwRKw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6lengthEPKw = asm["__ZNSt3__211char_traitsIwE6lengthEPKw"];
asm["__ZNSt3__211char_traitsIwE6lengthEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6lengthEPKw.apply(null, arguments);
};

var real___ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE = asm["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"];
asm["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE.apply(null, arguments);
};

var real___ZNSt3__211regex_errorD0Ev = asm["__ZNSt3__211regex_errorD0Ev"];
asm["__ZNSt3__211regex_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211regex_errorD0Ev.apply(null, arguments);
};

var real___ZNSt3__211regex_errorD2Ev = asm["__ZNSt3__211regex_errorD2Ev"];
asm["__ZNSt3__211regex_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211regex_errorD2Ev.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc = asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"];
asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc = asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"];
asm["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_ = asm["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"];
asm["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"];
asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_ = asm["__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_"];
asm["__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_ = asm["__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_"];
asm["__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_ = asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_"];
asm["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_.apply(null, arguments);
};

var real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv = asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv"];
asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv.apply(null, arguments);
};

var real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv = asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv"];
asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv.apply(null, arguments);
};

var real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv = asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv"];
asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv.apply(null, arguments);
};

var real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212__do_nothingEPv = asm["__ZNSt3__212__do_nothingEPv"];
asm["__ZNSt3__212__do_nothingEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__do_nothingEPv.apply(null, arguments);
};

var real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE = asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE"];
asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE.apply(null, arguments);
};

var real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_ = asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_"];
asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_.apply(null, arguments);
};

var real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm = asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm"];
asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm.apply(null, arguments);
};

var real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm = asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm"];
asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm.apply(null, arguments);
};

var real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev = asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev"];
asm["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212__match_charIcED0Ev = asm["__ZNSt3__212__match_charIcED0Ev"];
asm["__ZNSt3__212__match_charIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__match_charIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__212__match_charIcED2Ev = asm["__ZNSt3__212__match_charIcED2Ev"];
asm["__ZNSt3__212__match_charIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__match_charIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__212__next_primeEm = asm["__ZNSt3__212__next_primeEm"];
asm["__ZNSt3__212__next_primeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__next_primeEm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"];
asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"];
asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi = asm["__ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi"];
asm["__ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi.apply(null, arguments);
};

var real___ZNSt3__212regex_traitsIcE6__initEv = asm["__ZNSt3__212regex_traitsIcE6__initEv"];
asm["__ZNSt3__212regex_traitsIcE6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212regex_traitsIcE6__initEv.apply(null, arguments);
};

var real___ZNSt3__212regex_traitsIcEC2ERKS1_ = asm["__ZNSt3__212regex_traitsIcEC2ERKS1_"];
asm["__ZNSt3__212regex_traitsIcEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212regex_traitsIcEC2ERKS1_.apply(null, arguments);
};

var real___ZNSt3__212regex_traitsIcEC2Ev = asm["__ZNSt3__212regex_traitsIcEC2Ev"];
asm["__ZNSt3__212regex_traitsIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212regex_traitsIcEC2Ev.apply(null, arguments);
};

var real___ZNSt3__212regex_traitsIcED2Ev = asm["__ZNSt3__212regex_traitsIcED2Ev"];
asm["__ZNSt3__212regex_traitsIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212regex_traitsIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__empty_stateIcED0Ev = asm["__ZNSt3__213__empty_stateIcED0Ev"];
asm["__ZNSt3__213__empty_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__empty_stateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__213__empty_stateIcED2Ev = asm["__ZNSt3__213__empty_stateIcED2Ev"];
asm["__ZNSt3__213__empty_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__empty_stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_ = asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"];
asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_.apply(null, arguments);
};

var real___ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_ = asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"];
asm["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_.apply(null, arguments);
};

var real___ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_ = asm["__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"];
asm["__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev = asm["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"];
asm["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev = asm["__ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev"];
asm["__ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev = asm["__ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev"];
asm["__ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev = asm["__ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev"];
asm["__ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b = asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b"];
asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b.apply(null, arguments);
};

var real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_ = asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_"];
asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_.apply(null, arguments);
};

var real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev = asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev"];
asm["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev = asm["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev"];
asm["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_ = asm["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_"];
asm["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_.apply(null, arguments);
};

var real___ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = asm["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"];
asm["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base12__format_intEPcPKcbj = asm["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"];
asm["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base12__format_intEPcPKcbj.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base14__format_floatEPcPKcj = asm["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"];
asm["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base14__format_floatEPcPKcj.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = asm["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"];
asm["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE.apply(null, arguments);
};

var real___ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = asm["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"];
asm["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_.apply(null, arguments);
};

var real___ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = asm["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"];
asm["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_.apply(null, arguments);
};

var real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"];
asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb.apply(null, arguments);
};

var real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"];
asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb.apply(null, arguments);
};

var real___ZNSt3__214__shared_countD0Ev = asm["__ZNSt3__214__shared_countD0Ev"];
asm["__ZNSt3__214__shared_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__shared_countD0Ev.apply(null, arguments);
};

var real___ZNSt3__214__shared_countD2Ev = asm["__ZNSt3__214__shared_countD2Ev"];
asm["__ZNSt3__214__shared_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__shared_countD2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_ = asm["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_"];
asm["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_ = asm["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_"];
asm["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_ = asm["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_"];
asm["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_ = asm["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_"];
asm["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_ = asm["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_"];
asm["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm = asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm"];
asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_ = asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_"];
asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_ = asm["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_"];
asm["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_ = asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_"];
asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_ = asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_"];
asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"];
asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_ = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"];
asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"];
asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_ = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev = asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev"];
asm["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_ = asm["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_"];
asm["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev = asm["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev"];
asm["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_ = asm["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_"];
asm["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev = asm["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev"];
asm["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ = asm["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_"];
asm["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev = asm["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev"];
asm["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__215__get_classnameEPKcb = asm["__ZNSt3__215__get_classnameEPKcb"];
asm["__ZNSt3__215__get_classnameEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__get_classnameEPKcb.apply(null, arguments);
};

var real___ZNSt3__215__has_one_stateIcED0Ev = asm["__ZNSt3__215__has_one_stateIcED0Ev"];
asm["__ZNSt3__215__has_one_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__has_one_stateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__215__has_one_stateIcED2Ev = asm["__ZNSt3__215__has_one_stateIcED2Ev"];
asm["__ZNSt3__215__has_one_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__has_one_stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"];
asm["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIdEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"];
asm["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIeEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"];
asm["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIfEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"];
asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796 = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796"];
asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796.apply(null, arguments);
};

var real___ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = asm["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"];
asm["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj.apply(null, arguments);
};

var real___ZNSt3__216__narrow_to_utf8ILm32EED0Ev = asm["__ZNSt3__216__narrow_to_utf8ILm32EED0Ev"];
asm["__ZNSt3__216__narrow_to_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__narrow_to_utf8ILm32EED0Ev.apply(null, arguments);
};

var real___ZNSt3__216__owns_one_stateIcED0Ev = asm["__ZNSt3__216__owns_one_stateIcED0Ev"];
asm["__ZNSt3__216__owns_one_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__owns_one_stateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__216__owns_one_stateIcED2Ev = asm["__ZNSt3__216__owns_one_stateIcED2Ev"];
asm["__ZNSt3__216__owns_one_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__owns_one_stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = asm["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"];
asm["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_.apply(null, arguments);
};

var real___ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = asm["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"];
asm["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"];
asm["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"];
asm["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev = asm["__ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev"];
asm["__ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = asm["__ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = asm["__ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_ = asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_"];
asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_ = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv = asm["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"];
asm["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv.apply(null, arguments);
};

var real___ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = asm["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"];
asm["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z.apply(null, arguments);
};

var real___ZNSt3__217__owns_two_statesIcED0Ev = asm["__ZNSt3__217__owns_two_statesIcED0Ev"];
asm["__ZNSt3__217__owns_two_statesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__owns_two_statesIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__217__owns_two_statesIcED2Ev = asm["__ZNSt3__217__owns_two_statesIcED2Ev"];
asm["__ZNSt3__217__owns_two_statesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__owns_two_statesIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__217__repeat_one_loopIcED0Ev = asm["__ZNSt3__217__repeat_one_loopIcED0Ev"];
asm["__ZNSt3__217__repeat_one_loopIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__repeat_one_loopIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__217__repeat_one_loopIcED2Ev = asm["__ZNSt3__217__repeat_one_loopIcED2Ev"];
asm["__ZNSt3__217__repeat_one_loopIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__repeat_one_loopIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__217__widen_from_utf8ILm32EED0Ev = asm["__ZNSt3__217__widen_from_utf8ILm32EED0Ev"];
asm["__ZNSt3__217__widen_from_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__widen_from_utf8ILm32EED0Ev.apply(null, arguments);
};

var real___ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringC2EPKc = asm["__ZNSt3__218__libcpp_refstringC2EPKc"];
asm["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringC2EPKc.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringD2Ev = asm["__ZNSt3__218__libcpp_refstringD2Ev"];
asm["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringD2Ev.apply(null, arguments);
};

var real___ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
asm["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
asm["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"];
asm["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = asm["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"];
asm["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz.apply(null, arguments);
};

var real___ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz = asm["__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"];
asm["__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz.apply(null, arguments);
};

var real___ZNSt3__219__shared_weak_count14__release_weakEv = asm["__ZNSt3__219__shared_weak_count14__release_weakEv"];
asm["__ZNSt3__219__shared_weak_count14__release_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__shared_weak_count14__release_weakEv.apply(null, arguments);
};

var real___ZNSt3__219__shared_weak_countD0Ev = asm["__ZNSt3__219__shared_weak_countD0Ev"];
asm["__ZNSt3__219__shared_weak_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__shared_weak_countD0Ev.apply(null, arguments);
};

var real___ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__get_collation_nameEPKc = asm["__ZNSt3__220__get_collation_nameEPKc"];
asm["__ZNSt3__220__get_collation_nameEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__get_collation_nameEPKc.apply(null, arguments);
};

var real___ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = asm["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"];
asm["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi.apply(null, arguments);
};

var real___ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = asm["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"];
asm["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi.apply(null, arguments);
};

var real___ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev = asm["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev"];
asm["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev = asm["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev"];
asm["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = asm["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"];
asm["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = asm["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"];
asm["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIdLb1EEC2Ev = asm["__ZNSt3__220__optional_copy_baseIdLb1EEC2Ev"];
asm["__ZNSt3__220__optional_copy_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIdLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_copy_baseIiLb1EEC2Ev = asm["__ZNSt3__220__optional_copy_baseIiLb1EEC2Ev"];
asm["__ZNSt3__220__optional_copy_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_copy_baseIiLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = asm["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"];
asm["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = asm["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"];
asm["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIdLb1EEC2Ev = asm["__ZNSt3__220__optional_move_baseIdLb1EEC2Ev"];
asm["__ZNSt3__220__optional_move_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIdLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__220__optional_move_baseIiLb1EEC2Ev = asm["__ZNSt3__220__optional_move_baseIiLb1EEC2Ev"];
asm["__ZNSt3__220__optional_move_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__optional_move_baseIiLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv = asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv"];
asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv.apply(null, arguments);
};

var real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv = asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv"];
asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv.apply(null, arguments);
};

var real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev = asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev"];
asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev.apply(null, arguments);
};

var real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__220__time_get_c_storageIcEC2Ev = asm["__ZNSt3__220__time_get_c_storageIcEC2Ev"];
asm["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__time_get_c_storageIcEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__time_get_c_storageIwEC2Ev = asm["__ZNSt3__220__time_get_c_storageIwEC2Ev"];
asm["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__time_get_c_storageIwEC2Ev.apply(null, arguments);
};

var real___ZNSt3__221__empty_non_own_stateIcED0Ev = asm["__ZNSt3__221__empty_non_own_stateIcED0Ev"];
asm["__ZNSt3__221__empty_non_own_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__221__empty_non_own_stateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__221__empty_non_own_stateIcED2Ev = asm["__ZNSt3__221__empty_non_own_stateIcED2Ev"];
asm["__ZNSt3__221__empty_non_own_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__221__empty_non_own_stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm = asm["__ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"];
asm["__ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm.apply(null, arguments);
};

var real___ZNSt3__221__throw_runtime_errorEPKc = asm["__ZNSt3__221__throw_runtime_errorEPKc"];
asm["__ZNSt3__221__throw_runtime_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__221__throw_runtime_errorEPKc.apply(null, arguments);
};

var real___ZNSt3__223__match_any_but_newlineIcED0Ev = asm["__ZNSt3__223__match_any_but_newlineIcED0Ev"];
asm["__ZNSt3__223__match_any_but_newlineIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__match_any_but_newlineIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__223__match_any_but_newlineIcED2Ev = asm["__ZNSt3__223__match_any_but_newlineIcED2Ev"];
asm["__ZNSt3__223__match_any_but_newlineIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__match_any_but_newlineIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev = asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev"];
asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"];
asm["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev = asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev"];
asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"];
asm["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIdLb0EEC2Ev = asm["__ZNSt3__223__optional_storage_baseIdLb0EEC2Ev"];
asm["__ZNSt3__223__optional_storage_baseIdLb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIdLb0EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__223__optional_storage_baseIiLb0EEC2Ev = asm["__ZNSt3__223__optional_storage_baseIiLb0EEC2Ev"];
asm["__ZNSt3__223__optional_storage_baseIiLb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__223__optional_storage_baseIiLb0EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = asm["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"];
asm["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = asm["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"];
asm["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__226__end_marked_subexpressionIcED0Ev = asm["__ZNSt3__226__end_marked_subexpressionIcED0Ev"];
asm["__ZNSt3__226__end_marked_subexpressionIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__226__end_marked_subexpressionIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__226__end_marked_subexpressionIcED2Ev = asm["__ZNSt3__226__end_marked_subexpressionIcED2Ev"];
asm["__ZNSt3__226__end_marked_subexpressionIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__226__end_marked_subexpressionIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"];
asm["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"];
asm["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"];
asm["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"];
asm["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = asm["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"];
asm["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = asm["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"];
asm["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev = asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev"];
asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev = asm["__ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev"];
asm["__ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = asm["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"];
asm["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = asm["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"];
asm["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev = asm["__ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev"];
asm["__ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"];
asm["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_.apply(null, arguments);
};

var real___ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev = asm["__ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev"];
asm["__ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev.apply(null, arguments);
};

var real___ZNSt3__228__begin_marked_subexpressionIcED0Ev = asm["__ZNSt3__228__begin_marked_subexpressionIcED0Ev"];
asm["__ZNSt3__228__begin_marked_subexpressionIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__228__begin_marked_subexpressionIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__228__begin_marked_subexpressionIcED2Ev = asm["__ZNSt3__228__begin_marked_subexpressionIcED2Ev"];
asm["__ZNSt3__228__begin_marked_subexpressionIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__228__begin_marked_subexpressionIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev = asm["__ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev"];
asm["__ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev.apply(null, arguments);
};

var real___ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_ = asm["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_"];
asm["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_.apply(null, arguments);
};

var real___ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev = asm["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev"];
asm["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE13classic_tableEv = asm["__ZNSt3__25ctypeIcE13classic_tableEv"];
asm["__ZNSt3__25ctypeIcE13classic_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE13classic_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE21__classic_lower_tableEv = asm["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"];
asm["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE21__classic_lower_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE21__classic_upper_tableEv = asm["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"];
asm["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE21__classic_upper_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcEC2EPKtbm = asm["__ZNSt3__25ctypeIcEC2EPKtbm"];
asm["__ZNSt3__25ctypeIcEC2EPKtbm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcEC2EPKtbm.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcED0Ev = asm["__ZNSt3__25ctypeIcED0Ev"];
asm["__ZNSt3__25ctypeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcED2Ev = asm["__ZNSt3__25ctypeIcED2Ev"];
asm["__ZNSt3__25ctypeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__25ctypeIwED0Ev = asm["__ZNSt3__25ctypeIwED0Ev"];
asm["__ZNSt3__25ctypeIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_ = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_ = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_.apply(null, arguments);
};

var real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26__clocEv = asm["__ZNSt3__26__clocEv"];
asm["__ZNSt3__26__clocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__clocEv.apply(null, arguments);
};

var real___ZNSt3__26__loopIcED0Ev = asm["__ZNSt3__26__loopIcED0Ev"];
asm["__ZNSt3__26__loopIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__loopIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__26__loopIcED2Ev = asm["__ZNSt3__26__loopIcED2Ev"];
asm["__ZNSt3__26__loopIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__loopIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__26__nodeIcED0Ev = asm["__ZNSt3__26__nodeIcED0Ev"];
asm["__ZNSt3__26__nodeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__nodeIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__26__nodeIcED2Ev = asm["__ZNSt3__26__nodeIcED2Ev"];
asm["__ZNSt3__26__nodeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__nodeIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__26locale2id5__getEv = asm["__ZNSt3__26locale2id5__getEv"];
asm["__ZNSt3__26locale2id5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale2id5__getEv.apply(null, arguments);
};

var real___ZNSt3__26locale2id6__initEv = asm["__ZNSt3__26locale2id6__initEv"];
asm["__ZNSt3__26locale2id6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale2id6__initEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp11make_globalEv = asm["__ZNSt3__26locale5__imp11make_globalEv"];
asm["__ZNSt3__26locale5__imp11make_globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp11make_globalEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp12make_classicEv = asm["__ZNSt3__26locale5__imp12make_classicEv"];
asm["__ZNSt3__26locale5__imp12make_classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp12make_classicEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installEPNS0_5facetEl = asm["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"];
asm["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installEPNS0_5facetEl.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"];
asm["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__impC2Em = asm["__ZNSt3__26locale5__impC2Em"];
asm["__ZNSt3__26locale5__impC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impC2Em.apply(null, arguments);
};

var real___ZNSt3__26locale5__impD0Ev = asm["__ZNSt3__26locale5__impD0Ev"];
asm["__ZNSt3__26locale5__impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impD0Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5__impD2Ev = asm["__ZNSt3__26locale5__impD2Ev"];
asm["__ZNSt3__26locale5__impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impD2Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5facet16__on_zero_sharedEv = asm["__ZNSt3__26locale5facet16__on_zero_sharedEv"];
asm["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facet16__on_zero_sharedEv.apply(null, arguments);
};

var real___ZNSt3__26locale5facetD0Ev = asm["__ZNSt3__26locale5facetD0Ev"];
asm["__ZNSt3__26locale5facetD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facetD0Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5facetD2Ev = asm["__ZNSt3__26locale5facetD2Ev"];
asm["__ZNSt3__26locale5facetD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facetD2Ev.apply(null, arguments);
};

var real___ZNSt3__26locale7classicEv = asm["__ZNSt3__26locale7classicEv"];
asm["__ZNSt3__26locale7classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale7classicEv.apply(null, arguments);
};

var real___ZNSt3__26locale8__globalEv = asm["__ZNSt3__26locale8__globalEv"];
asm["__ZNSt3__26locale8__globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale8__globalEv.apply(null, arguments);
};

var real___ZNSt3__26localeC2ERKS0_ = asm["__ZNSt3__26localeC2ERKS0_"];
asm["__ZNSt3__26localeC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeC2ERKS0_.apply(null, arguments);
};

var real___ZNSt3__26localeC2Ev = asm["__ZNSt3__26localeC2Ev"];
asm["__ZNSt3__26localeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeC2Ev.apply(null, arguments);
};

var real___ZNSt3__26localeD2Ev = asm["__ZNSt3__26localeD2Ev"];
asm["__ZNSt3__26localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeD2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_ = asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_"];
asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_ = asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_"];
asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m = asm["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m"];
asm["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m.apply(null, arguments);
};

var real___ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm = asm["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm"];
asm["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_ = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_ = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_.apply(null, arguments);
};

var real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_ = asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_"];
asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_ = asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_"];
asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_"];
asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm = asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm"];
asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm.apply(null, arguments);
};

var real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_ = asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_"];
asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"];
asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm = asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm"];
asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm.apply(null, arguments);
};

var real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev = asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev"];
asm["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_"];
asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE = asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE"];
asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev = asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"];
asm["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_ = asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_"];
asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE = asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"];
asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev = asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"];
asm["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_ = asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_"];
asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE = asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"];
asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev = asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"];
asm["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"];
asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"];
asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_ = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"];
asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"];
asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"];
asm["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_ = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_ = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_ = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_ = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_.apply(null, arguments);
};

var real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev = asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"];
asm["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m = asm["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"];
asm["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m.apply(null, arguments);
};

var real___ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm = asm["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm"];
asm["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"];
asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em.apply(null, arguments);
};

var real___ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_ = asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_"];
asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_ = asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_"];
asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE = asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE"];
asm["__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev = asm["__ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev"];
asm["__ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_ = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_ = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_ = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE.apply(null, arguments);
};

var real___ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev = asm["__ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev"];
asm["__ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_ = asm["__ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_"];
asm["__ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_.apply(null, arguments);
};

var real___ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE = asm["__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE"];
asm["__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev = asm["__ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev"];
asm["__ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27__stateIcEC2EOS1_ = asm["__ZNSt3__27__stateIcEC2EOS1_"];
asm["__ZNSt3__27__stateIcEC2EOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__stateIcEC2EOS1_.apply(null, arguments);
};

var real___ZNSt3__27__stateIcEC2ERKS1_ = asm["__ZNSt3__27__stateIcEC2ERKS1_"];
asm["__ZNSt3__27__stateIcEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__stateIcEC2ERKS1_.apply(null, arguments);
};

var real___ZNSt3__27__stateIcED2Ev = asm["__ZNSt3__27__stateIcED2Ev"];
asm["__ZNSt3__27__stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__stateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__27__stateIcEaSERKS1_ = asm["__ZNSt3__27__stateIcEaSERKS1_"];
asm["__ZNSt3__27__stateIcEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__stateIcEaSERKS1_.apply(null, arguments);
};

var real___ZNSt3__27codecvtIDic11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"];
asm["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIDic11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"];
asm["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIDsc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIcc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"];
asm["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIcc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tEC2Em = asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2Em"];
asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tEC2Em.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"];
asm["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tED2Ev = asm["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"];
asm["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tED2Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIcED0Ev = asm["__ZNSt3__27collateIcED0Ev"];
asm["__ZNSt3__27collateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIcED2Ev = asm["__ZNSt3__27collateIcED2Ev"];
asm["__ZNSt3__27collateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIwED0Ev = asm["__ZNSt3__27collateIwED0Ev"];
asm["__ZNSt3__27collateIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIwED2Ev = asm["__ZNSt3__27collateIwED2Ev"];
asm["__ZNSt3__27collateIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_ = asm["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_"];
asm["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_.apply(null, arguments);
};

var real___ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = asm["__ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"];
asm["__ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_ = asm["__ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_"];
asm["__ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_.apply(null, arguments);
};

var real___ZNSt3__28messagesIcED0Ev = asm["__ZNSt3__28messagesIcED0Ev"];
asm["__ZNSt3__28messagesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIcED2Ev = asm["__ZNSt3__28messagesIcED2Ev"];
asm["__ZNSt3__28messagesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIwED0Ev = asm["__ZNSt3__28messagesIwED0Ev"];
asm["__ZNSt3__28messagesIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIwED2Ev = asm["__ZNSt3__28messagesIwED2Ev"];
asm["__ZNSt3__28messagesIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcEC2Em = asm["__ZNSt3__28numpunctIcEC2Em"];
asm["__ZNSt3__28numpunctIcEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcEC2Em.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcED0Ev = asm["__ZNSt3__28numpunctIcED0Ev"];
asm["__ZNSt3__28numpunctIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcED2Ev = asm["__ZNSt3__28numpunctIcED2Ev"];
asm["__ZNSt3__28numpunctIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwEC2Em = asm["__ZNSt3__28numpunctIwEC2Em"];
asm["__ZNSt3__28numpunctIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwEC2Em.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwED0Ev = asm["__ZNSt3__28numpunctIwED0Ev"];
asm["__ZNSt3__28numpunctIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwED2Ev = asm["__ZNSt3__28numpunctIwED2Ev"];
asm["__ZNSt3__28numpunctIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = asm["__ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"];
asm["__ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev = asm["__ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev"];
asm["__ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc = asm["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"];
asm["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc = asm["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"];
asm["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = asm["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"];
asm["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = asm["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"];
asm["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw = asm["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"];
asm["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw = asm["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"];
asm["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = asm["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"];
asm["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = asm["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"];
asm["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_.apply(null, arguments);
};

var real___ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = asm["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"];
asm["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = asm["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"];
asm["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = asm["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"];
asm["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = asm["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"];
asm["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"];
asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"];
asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"];
asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"];
asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"];
asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"];
asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29sub_matchIPKcEaSERKS3_ = asm["__ZNSt3__29sub_matchIPKcEaSERKS3_"];
asm["__ZNSt3__29sub_matchIPKcEaSERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29sub_matchIPKcEaSERKS3_.apply(null, arguments);
};

var real___ZNSt3__29to_stringEi = asm["__ZNSt3__29to_stringEi"];
asm["__ZNSt3__29to_stringEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29to_stringEi.apply(null, arguments);
};

var real___ZNSt3__2L10init_am_pmEv = asm["__ZNSt3__2L10init_am_pmEv"];
asm["__ZNSt3__2L10init_am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L10init_am_pmEv.apply(null, arguments);
};

var real___ZNSt3__2L10init_weeksEv = asm["__ZNSt3__2L10init_weeksEv"];
asm["__ZNSt3__2L10init_weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L10init_weeksEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_monthsEv = asm["__ZNSt3__2L11init_monthsEv"];
asm["__ZNSt3__2L11init_monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_monthsEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_wam_pmEv = asm["__ZNSt3__2L11init_wam_pmEv"];
asm["__ZNSt3__2L11init_wam_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_wam_pmEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_wweeksEv = asm["__ZNSt3__2L11init_wweeksEv"];
asm["__ZNSt3__2L11init_wweeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_wweeksEv.apply(null, arguments);
};

var real___ZNSt3__2L12init_wmonthsEv = asm["__ZNSt3__2L12init_wmonthsEv"];
asm["__ZNSt3__2L12init_wmonthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12init_wmonthsEv.apply(null, arguments);
};

var real___ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
asm["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"];
asm["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"];
asm["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"];
asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE = asm["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE"];
asm["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE = asm["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE"];
asm["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE = asm["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"];
asm["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE.apply(null, arguments);
};

var real___ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_ = asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"];
asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_.apply(null, arguments);
};

var real___ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_ = asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"];
asm["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_.apply(null, arguments);
};

var real___ZNSt9exceptionD0Ev = asm["__ZNSt9exceptionD0Ev"];
asm["__ZNSt9exceptionD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9exceptionD0Ev.apply(null, arguments);
};

var real___ZNSt9exceptionD2Ev = asm["__ZNSt9exceptionD2Ev"];
asm["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9exceptionD2Ev.apply(null, arguments);
};

var real___ZNSt9type_infoD2Ev = asm["__ZNSt9type_infoD2Ev"];
asm["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9type_infoD2Ev.apply(null, arguments);
};

var real___ZSt11__terminatePFvvE = asm["__ZSt11__terminatePFvvE"];
asm["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt11__terminatePFvvE.apply(null, arguments);
};

var real___ZSt13get_terminatev = asm["__ZSt13get_terminatev"];
asm["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt13get_terminatev.apply(null, arguments);
};

var real___ZSt15get_new_handlerv = asm["__ZSt15get_new_handlerv"];
asm["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt15get_new_handlerv.apply(null, arguments);
};

var real___ZSt17__throw_bad_allocv = asm["__ZSt17__throw_bad_allocv"];
asm["__ZSt17__throw_bad_allocv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt17__throw_bad_allocv.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real___ZSt19uncaught_exceptionsv = asm["__ZSt19uncaught_exceptionsv"];
asm["__ZSt19uncaught_exceptionsv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt19uncaught_exceptionsv.apply(null, arguments);
};

var real___ZSt9terminatev = asm["__ZSt9terminatev"];
asm["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt9terminatev.apply(null, arguments);
};

var real___ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd = asm["__ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd"];
asm["__ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE = asm["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE"];
asm["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE = asm["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE"];
asm["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_ = asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_"];
asm["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_ = asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_"];
asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_ = asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_"];
asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_.apply(null, arguments);
};

var real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_ = asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_"];
asm["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_.apply(null, arguments);
};

var real___ZdaPv = asm["__ZdaPv"];
asm["__ZdaPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZdaPv.apply(null, arguments);
};

var real___ZdlPv = asm["__ZdlPv"];
asm["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZdlPv.apply(null, arguments);
};

var real___ZmldRK6Vector = asm["__ZmldRK6Vector"];
asm["__ZmldRK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZmldRK6Vector.apply(null, arguments);
};

var real___Znam = asm["__Znam"];
asm["__Znam"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Znam.apply(null, arguments);
};

var real___Znwm = asm["__Znwm"];
asm["__Znwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Znwm.apply(null, arguments);
};

var real____DOUBLE_BITS_156 = asm["___DOUBLE_BITS_156"];
asm["___DOUBLE_BITS_156"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_156.apply(null, arguments);
};

var real____DOUBLE_BITS_668 = asm["___DOUBLE_BITS_668"];
asm["___DOUBLE_BITS_668"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_668.apply(null, arguments);
};

var real____clang_call_terminate = asm["___clang_call_terminate"];
asm["___clang_call_terminate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____clang_call_terminate.apply(null, arguments);
};

var real____ctype_b_loc = asm["___ctype_b_loc"];
asm["___ctype_b_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_b_loc.apply(null, arguments);
};

var real____ctype_get_mb_cur_max = asm["___ctype_get_mb_cur_max"];
asm["___ctype_get_mb_cur_max"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_get_mb_cur_max.apply(null, arguments);
};

var real____ctype_tolower_loc = asm["___ctype_tolower_loc"];
asm["___ctype_tolower_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_tolower_loc.apply(null, arguments);
};

var real____ctype_toupper_loc = asm["___ctype_toupper_loc"];
asm["___ctype_toupper_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_toupper_loc.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_get_globals_fast = asm["___cxa_get_globals_fast"];
asm["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_get_globals_fast.apply(null, arguments);
};

var real____cxa_guard_acquire = asm["___cxa_guard_acquire"];
asm["___cxa_guard_acquire"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_guard_acquire.apply(null, arguments);
};

var real____cxa_guard_release = asm["___cxa_guard_release"];
asm["___cxa_guard_release"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_guard_release.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____cxx_global_var_init = asm["___cxx_global_var_init"];
asm["___cxx_global_var_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init.apply(null, arguments);
};

var real____cxx_global_var_init_40 = asm["___cxx_global_var_init_40"];
asm["___cxx_global_var_init_40"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_40.apply(null, arguments);
};

var real____dynamic_cast = asm["___dynamic_cast"];
asm["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____dynamic_cast.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____fdopen = asm["___fdopen"];
asm["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fdopen.apply(null, arguments);
};

var real____fflush_unlocked = asm["___fflush_unlocked"];
asm["___fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fflush_unlocked.apply(null, arguments);
};

var real____floatscan = asm["___floatscan"];
asm["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____floatscan.apply(null, arguments);
};

var real____fmodeflags = asm["___fmodeflags"];
asm["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fmodeflags.apply(null, arguments);
};

var real____fwritex = asm["___fwritex"];
asm["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fwritex.apply(null, arguments);
};

var real____get_locale = asm["___get_locale"];
asm["___get_locale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____get_locale.apply(null, arguments);
};

var real____intscan = asm["___intscan"];
asm["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____intscan.apply(null, arguments);
};

var real____loc_is_allocated = asm["___loc_is_allocated"];
asm["___loc_is_allocated"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____loc_is_allocated.apply(null, arguments);
};

var real____lockfile = asm["___lockfile"];
asm["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lockfile.apply(null, arguments);
};

var real____munmap = asm["___munmap"];
asm["___munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____munmap.apply(null, arguments);
};

var real____newlocale = asm["___newlocale"];
asm["___newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____newlocale.apply(null, arguments);
};

var real____ofl_add = asm["___ofl_add"];
asm["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_add.apply(null, arguments);
};

var real____ofl_lock = asm["___ofl_lock"];
asm["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_lock.apply(null, arguments);
};

var real____ofl_unlock = asm["___ofl_unlock"];
asm["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_unlock.apply(null, arguments);
};

var real____overflow = asm["___overflow"];
asm["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____overflow.apply(null, arguments);
};

var real____pthread_self_294 = asm["___pthread_self_294"];
asm["___pthread_self_294"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_294.apply(null, arguments);
};

var real____pthread_self_407 = asm["___pthread_self_407"];
asm["___pthread_self_407"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_407.apply(null, arguments);
};

var real____pthread_self_685 = asm["___pthread_self_685"];
asm["___pthread_self_685"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_685.apply(null, arguments);
};

var real____pthread_self_770 = asm["___pthread_self_770"];
asm["___pthread_self_770"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_770.apply(null, arguments);
};

var real____pthread_self_773 = asm["___pthread_self_773"];
asm["___pthread_self_773"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_773.apply(null, arguments);
};

var real____pthread_self_780 = asm["___pthread_self_780"];
asm["___pthread_self_780"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_780.apply(null, arguments);
};

var real____pthread_self_786 = asm["___pthread_self_786"];
asm["___pthread_self_786"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_786.apply(null, arguments);
};

var real____shgetc = asm["___shgetc"];
asm["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shgetc.apply(null, arguments);
};

var real____shlim = asm["___shlim"];
asm["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shlim.apply(null, arguments);
};

var real____stdio_close = asm["___stdio_close"];
asm["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_close.apply(null, arguments);
};

var real____stdio_read = asm["___stdio_read"];
asm["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_read.apply(null, arguments);
};

var real____stdio_seek = asm["___stdio_seek"];
asm["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_seek.apply(null, arguments);
};

var real____stdio_write = asm["___stdio_write"];
asm["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_write.apply(null, arguments);
};

var real____stdout_write = asm["___stdout_write"];
asm["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdout_write.apply(null, arguments);
};

var real____stpcpy = asm["___stpcpy"];
asm["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stpcpy.apply(null, arguments);
};

var real____strchrnul = asm["___strchrnul"];
asm["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strchrnul.apply(null, arguments);
};

var real____string_read = asm["___string_read"];
asm["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____string_read.apply(null, arguments);
};

var real____syscall_ret = asm["___syscall_ret"];
asm["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____syscall_ret.apply(null, arguments);
};

var real____toread = asm["___toread"];
asm["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____toread.apply(null, arguments);
};

var real____towrite = asm["___towrite"];
asm["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____towrite.apply(null, arguments);
};

var real____uflow = asm["___uflow"];
asm["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uflow.apply(null, arguments);
};

var real____unlist_locked_file = asm["___unlist_locked_file"];
asm["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlist_locked_file.apply(null, arguments);
};

var real____unlockfile = asm["___unlockfile"];
asm["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlockfile.apply(null, arguments);
};

var real____uselocale = asm["___uselocale"];
asm["___uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uselocale.apply(null, arguments);
};

var real____vfprintf_internal = asm["___vfprintf_internal"];
asm["___vfprintf_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____vfprintf_internal.apply(null, arguments);
};

var real__abort_message = asm["_abort_message"];
asm["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__abort_message.apply(null, arguments);
};

var real__arg_n = asm["_arg_n"];
asm["_arg_n"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__arg_n.apply(null, arguments);
};

var real__catclose = asm["_catclose"];
asm["_catclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catclose.apply(null, arguments);
};

var real__catgets = asm["_catgets"];
asm["_catgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catgets.apply(null, arguments);
};

var real__catopen = asm["_catopen"];
asm["_catopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catopen.apply(null, arguments);
};

var real__copysign = asm["_copysign"];
asm["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysign.apply(null, arguments);
};

var real__copysignl = asm["_copysignl"];
asm["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysignl.apply(null, arguments);
};

var real__decfloat = asm["_decfloat"];
asm["_decfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__decfloat.apply(null, arguments);
};

var real__dispose_chunk = asm["_dispose_chunk"];
asm["_dispose_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dispose_chunk.apply(null, arguments);
};

var real__do_read_578 = asm["_do_read_578"];
asm["_do_read_578"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__do_read_578.apply(null, arguments);
};

var real__dummy = asm["_dummy"];
asm["_dummy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dummy.apply(null, arguments);
};

var real__dummy_402 = asm["_dummy_402"];
asm["_dummy_402"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dummy_402.apply(null, arguments);
};

var real__fclose = asm["_fclose"];
asm["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fclose.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__fmod = asm["_fmod"];
asm["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmod.apply(null, arguments);
};

var real__fmodl = asm["_fmodl"];
asm["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmodl.apply(null, arguments);
};

var real__fmt_fp = asm["_fmt_fp"];
asm["_fmt_fp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_fp.apply(null, arguments);
};

var real__fmt_o = asm["_fmt_o"];
asm["_fmt_o"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_o.apply(null, arguments);
};

var real__fmt_u = asm["_fmt_u"];
asm["_fmt_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_u.apply(null, arguments);
};

var real__fmt_x = asm["_fmt_x"];
asm["_fmt_x"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_x.apply(null, arguments);
};

var real__fopen = asm["_fopen"];
asm["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fopen.apply(null, arguments);
};

var real__fputc = asm["_fputc"];
asm["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fputc.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__freelocale = asm["_freelocale"];
asm["_freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freelocale.apply(null, arguments);
};

var real__frexp = asm["_frexp"];
asm["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__frexp.apply(null, arguments);
};

var real__fwrite = asm["_fwrite"];
asm["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fwrite.apply(null, arguments);
};

var real__getint_660 = asm["_getint_660"];
asm["_getint_660"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__getint_660.apply(null, arguments);
};

var real__hexfloat = asm["_hexfloat"];
asm["_hexfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hexfloat.apply(null, arguments);
};

var real__isalpha = asm["_isalpha"];
asm["_isalpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isalpha.apply(null, arguments);
};

var real__isdigit = asm["_isdigit"];
asm["_isdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isdigit.apply(null, arguments);
};

var real__isdigit_l = asm["_isdigit_l"];
asm["_isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isdigit_l.apply(null, arguments);
};

var real__isspace = asm["_isspace"];
asm["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isspace.apply(null, arguments);
};

var real__isxdigit = asm["_isxdigit"];
asm["_isxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isxdigit.apply(null, arguments);
};

var real__isxdigit_l = asm["_isxdigit_l"];
asm["_isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isxdigit_l.apply(null, arguments);
};

var real__lbfgs = asm["_lbfgs"];
asm["_lbfgs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__lbfgs.apply(null, arguments);
};

var real__lbfgs_parameter_init = asm["_lbfgs_parameter_init"];
asm["_lbfgs_parameter_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__lbfgs_parameter_init.apply(null, arguments);
};

var real__line_search_backtracking = asm["_line_search_backtracking"];
asm["_line_search_backtracking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__line_search_backtracking.apply(null, arguments);
};

var real__line_search_backtracking_owlqn = asm["_line_search_backtracking_owlqn"];
asm["_line_search_backtracking_owlqn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__line_search_backtracking_owlqn.apply(null, arguments);
};

var real__line_search_morethuente = asm["_line_search_morethuente"];
asm["_line_search_morethuente"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__line_search_morethuente.apply(null, arguments);
};

var real__main = asm["_main"];
asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__mbrlen = asm["_mbrlen"];
asm["_mbrlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbrlen.apply(null, arguments);
};

var real__mbrtowc = asm["_mbrtowc"];
asm["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbrtowc.apply(null, arguments);
};

var real__mbsinit = asm["_mbsinit"];
asm["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsinit.apply(null, arguments);
};

var real__mbsnrtowcs = asm["_mbsnrtowcs"];
asm["_mbsnrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsnrtowcs.apply(null, arguments);
};

var real__mbsrtowcs = asm["_mbsrtowcs"];
asm["_mbsrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsrtowcs.apply(null, arguments);
};

var real__mbtowc = asm["_mbtowc"];
asm["_mbtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbtowc.apply(null, arguments);
};

var real__memchr = asm["_memchr"];
asm["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memchr.apply(null, arguments);
};

var real__memcmp = asm["_memcmp"];
asm["_memcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memcmp.apply(null, arguments);
};

var real__memmove = asm["_memmove"];
asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__out_659 = asm["_out_659"];
asm["_out_659"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__out_659.apply(null, arguments);
};

var real__owlqn_project = asm["_owlqn_project"];
asm["_owlqn_project"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__owlqn_project.apply(null, arguments);
};

var real__owlqn_pseudo_gradient = asm["_owlqn_pseudo_gradient"];
asm["_owlqn_pseudo_gradient"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__owlqn_pseudo_gradient.apply(null, arguments);
};

var real__owlqn_x1norm = asm["_owlqn_x1norm"];
asm["_owlqn_x1norm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__owlqn_x1norm.apply(null, arguments);
};

var real__pad_665 = asm["_pad_665"];
asm["_pad_665"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pad_665.apply(null, arguments);
};

var real__pop_arg_662 = asm["_pop_arg_662"];
asm["_pop_arg_662"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pop_arg_662.apply(null, arguments);
};

var real__pop_arg_long_double = asm["_pop_arg_long_double"];
asm["_pop_arg_long_double"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pop_arg_long_double.apply(null, arguments);
};

var real__printf = asm["_printf"];
asm["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf.apply(null, arguments);
};

var real__printf_core = asm["_printf_core"];
asm["_printf_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf_core.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"];
asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_getspecific = asm["_pthread_getspecific"];
asm["_pthread_getspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_getspecific.apply(null, arguments);
};

var real__pthread_key_create = asm["_pthread_key_create"];
asm["_pthread_key_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_key_create.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"];
asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"];
asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__pthread_once = asm["_pthread_once"];
asm["_pthread_once"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_once.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"];
asm["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_self.apply(null, arguments);
};

var real__pthread_setspecific = asm["_pthread_setspecific"];
asm["_pthread_setspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_setspecific.apply(null, arguments);
};

var real__realloc = asm["_realloc"];
asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__scalbn = asm["_scalbn"];
asm["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbn.apply(null, arguments);
};

var real__scalbnl = asm["_scalbnl"];
asm["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbnl.apply(null, arguments);
};

var real__scanexp = asm["_scanexp"];
asm["_scanexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scanexp.apply(null, arguments);
};

var real__sn_write = asm["_sn_write"];
asm["_sn_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sn_write.apply(null, arguments);
};

var real__snprintf = asm["_snprintf"];
asm["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__snprintf.apply(null, arguments);
};

var real__sprintf = asm["_sprintf"];
asm["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sprintf.apply(null, arguments);
};

var real__sscanf = asm["_sscanf"];
asm["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sscanf.apply(null, arguments);
};

var real__store_int = asm["_store_int"];
asm["_store_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__store_int.apply(null, arguments);
};

var real__strchr = asm["_strchr"];
asm["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strchr.apply(null, arguments);
};

var real__strcmp = asm["_strcmp"];
asm["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcmp.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"];
asm["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"];
asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__strncmp = asm["_strncmp"];
asm["_strncmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strncmp.apply(null, arguments);
};

var real__strtod = asm["_strtod"];
asm["_strtod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtod.apply(null, arguments);
};

var real__strtod_l = asm["_strtod_l"];
asm["_strtod_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtod_l.apply(null, arguments);
};

var real__strtof = asm["_strtof"];
asm["_strtof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtof.apply(null, arguments);
};

var real__strtof_l = asm["_strtof_l"];
asm["_strtof_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtof_l.apply(null, arguments);
};

var real__strtold = asm["_strtold"];
asm["_strtold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtold.apply(null, arguments);
};

var real__strtold_l = asm["_strtold_l"];
asm["_strtold_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtold_l.apply(null, arguments);
};

var real__strtoll = asm["_strtoll"];
asm["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoll.apply(null, arguments);
};

var real__strtoll_l = asm["_strtoll_l"];
asm["_strtoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoll_l.apply(null, arguments);
};

var real__strtoull = asm["_strtoull"];
asm["_strtoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoull.apply(null, arguments);
};

var real__strtoull_l = asm["_strtoull_l"];
asm["_strtoull_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoull_l.apply(null, arguments);
};

var real__strtox = asm["_strtox"];
asm["_strtox"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtox.apply(null, arguments);
};

var real__strtox_12 = asm["_strtox_12"];
asm["_strtox_12"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtox_12.apply(null, arguments);
};

var real__try_realloc_chunk = asm["_try_realloc_chunk"];
asm["_try_realloc_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__try_realloc_chunk.apply(null, arguments);
};

var real__update_trial_interval = asm["_update_trial_interval"];
asm["_update_trial_interval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__update_trial_interval.apply(null, arguments);
};

var real__vasprintf = asm["_vasprintf"];
asm["_vasprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vasprintf.apply(null, arguments);
};

var real__vec2norm = asm["_vec2norm"];
asm["_vec2norm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vec2norm.apply(null, arguments);
};

var real__vec2norminv = asm["_vec2norminv"];
asm["_vec2norminv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vec2norminv.apply(null, arguments);
};

var real__vecadd = asm["_vecadd"];
asm["_vecadd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecadd.apply(null, arguments);
};

var real__vecalloc = asm["_vecalloc"];
asm["_vecalloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecalloc.apply(null, arguments);
};

var real__veccpy = asm["_veccpy"];
asm["_veccpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__veccpy.apply(null, arguments);
};

var real__vecdiff = asm["_vecdiff"];
asm["_vecdiff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecdiff.apply(null, arguments);
};

var real__vecdot = asm["_vecdot"];
asm["_vecdot"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecdot.apply(null, arguments);
};

var real__vecfree = asm["_vecfree"];
asm["_vecfree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecfree.apply(null, arguments);
};

var real__vecncpy = asm["_vecncpy"];
asm["_vecncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecncpy.apply(null, arguments);
};

var real__vecscale = asm["_vecscale"];
asm["_vecscale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vecscale.apply(null, arguments);
};

var real__vfprintf = asm["_vfprintf"];
asm["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfprintf.apply(null, arguments);
};

var real__vfscanf = asm["_vfscanf"];
asm["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfscanf.apply(null, arguments);
};

var real__vsnprintf = asm["_vsnprintf"];
asm["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsnprintf.apply(null, arguments);
};

var real__vsprintf = asm["_vsprintf"];
asm["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsprintf.apply(null, arguments);
};

var real__vsscanf = asm["_vsscanf"];
asm["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsscanf.apply(null, arguments);
};

var real__wasm_entrypoint = asm["_wasm_entrypoint"];
asm["_wasm_entrypoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wasm_entrypoint.apply(null, arguments);
};

var real__wcrtomb = asm["_wcrtomb"];
asm["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcrtomb.apply(null, arguments);
};

var real__wcslen = asm["_wcslen"];
asm["_wcslen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcslen.apply(null, arguments);
};

var real__wcsnrtombs = asm["_wcsnrtombs"];
asm["_wcsnrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcsnrtombs.apply(null, arguments);
};

var real__wcsrtombs = asm["_wcsrtombs"];
asm["_wcsrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcsrtombs.apply(null, arguments);
};

var real__wctomb = asm["_wctomb"];
asm["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wctomb.apply(null, arguments);
};

var real__wmemcpy = asm["_wmemcpy"];
asm["_wmemcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemcpy.apply(null, arguments);
};

var real__wmemmove = asm["_wmemmove"];
asm["_wmemmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemmove.apply(null, arguments);
};

var real__wmemset = asm["_wmemset"];
asm["_wmemset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemset.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var __GLOBAL__sub_I_parser_cpp = Module["__GLOBAL__sub_I_parser_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_parser_cpp"].apply(null, arguments)
};

var __Z10token_name9TokenType = Module["__Z10token_name9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z10token_name9TokenType"].apply(null, arguments)
};

var __Z14model_progressPvPKdS1_ddddiii = Module["__Z14model_progressPvPKdS1_ddddiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z14model_progressPvPKdS1_ddddiii"].apply(null, arguments)
};

var __Z14put_beziers_inR6StrokeR11SvgExporter = Module["__Z14put_beziers_inR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z14put_beziers_inR6StrokeR11SvgExporter"].apply(null, arguments)
};

var __Z14put_indexes_inR6StrokeR11SvgExporter = Module["__Z14put_indexes_inR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z14put_indexes_inR6StrokeR11SvgExporter"].apply(null, arguments)
};

var __Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_ = Module["__Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z19estimate_derivativeP6StrokeRKNSt3__26vectorIdNS1_9allocatorIdEEEEdS7_"].apply(null, arguments)
};

var __Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE = Module["__Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z21compute_absolute_stepdRKNSt3__26vectorIdNS_9allocatorIdEEEE"].apply(null, arguments)
};

var __Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z28calculate_sample_dynamicallyRKNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

var __Z4maxddd = Module["__Z4maxddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z4maxddd"].apply(null, arguments)
};

var __Z8optimizeP6Stroke = Module["__Z8optimizeP6Stroke"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z8optimizeP6Stroke"].apply(null, arguments)
};

var __Z9build_svgR6StrokeR11SvgExporter = Module["__Z9build_svgR6StrokeR11SvgExporter"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z9build_svgR6StrokeR11SvgExporter"].apply(null, arguments)
};

var __Z9node_name8NodeType = Module["__Z9node_name8NodeType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z9node_name8NodeType"].apply(null, arguments)
};

var __Z9write_svgR6StrokePKc = Module["__Z9write_svgR6StrokePKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z9write_svgR6StrokePKc"].apply(null, arguments)
};

var __ZL14evaluate_modelPvPKdPdid = Module["__ZL14evaluate_modelPvPKdPdid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZL14evaluate_modelPvPKdPdid"].apply(null, arguments)
};

var __ZL25default_terminate_handlerv = Module["__ZL25default_terminate_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZL25default_terminate_handlerv"].apply(null, arguments)
};

var __ZN10ConstraintC2Ev = Module["__ZN10ConstraintC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10ConstraintC2Ev"].apply(null, arguments)
};

var __ZN10ConstraintD0Ev = Module["__ZN10ConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10ConstraintD0Ev"].apply(null, arguments)
};

var __ZN10ConstraintD2Ev = Module["__ZN10ConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10ConstraintD2Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = Module["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"].apply(null, arguments)
};

var __ZN10__cxxabiv116__shim_type_infoD2Ev = Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv116__shim_type_infoD2Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv117__class_type_infoD0Ev = Module["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv117__class_type_infoD0Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv120__si_class_type_infoD0Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv120__si_class_type_infoD0Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv121__vmi_class_type_infoD0Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"].apply(null, arguments)
};

var __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = Module["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"].apply(null, arguments)
};

var __ZN11Interpreter10assignmentERK4Node = Module["__ZN11Interpreter10assignmentERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter10assignmentERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter10eval_minusERK4Node = Module["__ZN11Interpreter10eval_minusERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter10eval_minusERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter10expressionERK4Node = Module["__ZN11Interpreter10expressionERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter10expressionERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter11eval_divideERK4Node = Module["__ZN11Interpreter11eval_divideERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter11eval_divideERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter11eval_fncallERK4Node = Module["__ZN11Interpreter11eval_fncallERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter11eval_fncallERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd = Module["__ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter12set_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEd"].apply(null, arguments)
};

var __ZN11Interpreter13eval_multiplyERK4Node = Module["__ZN11Interpreter13eval_multiplyERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter13eval_multiplyERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter13eval_variableERK4Node = Module["__ZN11Interpreter13eval_variableERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter13eval_variableERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter14eval_argumentsERK4Node = Module["__ZN11Interpreter14eval_argumentsERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter14eval_argumentsERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter15execute_programEv = Module["__ZN11Interpreter15execute_programEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter15execute_programEv"].apply(null, arguments)
};

var __ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node = Module["__ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter19eval_args_recursiveERNSt3__26vectorIdNS0_9allocatorIdEEEERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter9eval_plusERK4Node = Module["__ZN11Interpreter9eval_plusERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter9eval_plusERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter9set_errorEPKcii = Module["__ZN11Interpreter9set_errorEPKcii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter9set_errorEPKcii"].apply(null, arguments)
};

var __ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node = Module["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERK4Node"].apply(null, arguments)
};

var __ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii = Module["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11Interpreter9set_errorERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEii"].apply(null, arguments)
};

var __ZN11InterpreterC2ERK6ParserP15ExternalFuncall = Module["__ZN11InterpreterC2ERK6ParserP15ExternalFuncall"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11InterpreterC2ERK6ParserP15ExternalFuncall"].apply(null, arguments)
};

var __ZN11InterpreterD2Ev = Module["__ZN11InterpreterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11InterpreterD2Ev"].apply(null, arguments)
};

var __ZN11SvgExporter10draw_crossEdd = Module["__ZN11SvgExporter10draw_crossEdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter10draw_crossEdd"].apply(null, arguments)
};

var __ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b = Module["__ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter11draw_bezierERK5PointS2_S2_S2_b"].apply(null, arguments)
};

var __ZN11SvgExporter11draw_circleEddd = Module["__ZN11SvgExporter11draw_circleEddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter11draw_circleEddd"].apply(null, arguments)
};

var __ZN11SvgExporter12setup_canvasEv = Module["__ZN11SvgExporter12setup_canvasEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter12setup_canvasEv"].apply(null, arguments)
};

var __ZN11SvgExporter21draw_horizontal_guideEdPKc = Module["__ZN11SvgExporter21draw_horizontal_guideEdPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter21draw_horizontal_guideEdPKc"].apply(null, arguments)
};

var __ZN11SvgExporter9draw_lineEddddPKcdS1_ = Module["__ZN11SvgExporter9draw_lineEddddPKcdS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter9draw_lineEddddPKcdS1_"].apply(null, arguments)
};

var __ZN11SvgExporter9draw_textEdddPKc = Module["__ZN11SvgExporter9draw_textEdddPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter9draw_textEdddPKc"].apply(null, arguments)
};

var __ZN11SvgExporter9write_svgEPKc = Module["__ZN11SvgExporter9write_svgEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporter9write_svgEPKc"].apply(null, arguments)
};

var __ZN11SvgExporterC2Ev = Module["__ZN11SvgExporterC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporterC2Ev"].apply(null, arguments)
};

var __ZN11SvgExporterD2Ev = Module["__ZN11SvgExporterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN11SvgExporterD2Ev"].apply(null, arguments)
};

var __ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN14FreeConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN14FreeConstraintC2Ei5Point = Module["__ZN14FreeConstraintC2Ei5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN14FreeConstraintC2Ei5Point"].apply(null, arguments)
};

var __ZN14FreeConstraintD0Ev = Module["__ZN14FreeConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN14FreeConstraintD0Ev"].apply(null, arguments)
};

var __ZN14FreeConstraintD2Ev = Module["__ZN14FreeConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN14FreeConstraintD2Ev"].apply(null, arguments)
};

var __ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15AngleConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN15AngleConstraintC2Eiidd = Module["__ZN15AngleConstraintC2Eiidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15AngleConstraintC2Eiidd"].apply(null, arguments)
};

var __ZN15AngleConstraintD0Ev = Module["__ZN15AngleConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15AngleConstraintD0Ev"].apply(null, arguments)
};

var __ZN15AngleConstraintD2Ev = Module["__ZN15AngleConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15AngleConstraintD2Ev"].apply(null, arguments)
};

var __ZN15ExternalFuncallC2Ev = Module["__ZN15ExternalFuncallC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15ExternalFuncallC2Ev"].apply(null, arguments)
};

var __ZN15ExternalFuncallD0Ev = Module["__ZN15ExternalFuncallD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15ExternalFuncallD0Ev"].apply(null, arguments)
};

var __ZN15ExternalFuncallD2Ev = Module["__ZN15ExternalFuncallD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15ExternalFuncallD2Ev"].apply(null, arguments)
};

var __ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15FixedConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN15FixedConstraintC2Ei5Point = Module["__ZN15FixedConstraintC2Ei5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15FixedConstraintC2Ei5Point"].apply(null, arguments)
};

var __ZN15FixedConstraintD0Ev = Module["__ZN15FixedConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15FixedConstraintD0Ev"].apply(null, arguments)
};

var __ZN15FixedConstraintD2Ev = Module["__ZN15FixedConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15FixedConstraintD2Ev"].apply(null, arguments)
};

var __ZN15TokenDefinitionC2ERKS_ = Module["__ZN15TokenDefinitionC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15TokenDefinitionC2ERKS_"].apply(null, arguments)
};

var __ZN15TokenDefinitionD2Ev = Module["__ZN15TokenDefinitionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15TokenDefinitionD2Ev"].apply(null, arguments)
};

var __ZN15WhichCoordinate9try_unionERKS_ = Module["__ZN15WhichCoordinate9try_unionERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15WhichCoordinate9try_unionERKS_"].apply(null, arguments)
};

var __ZN15WhichCoordinateC2Ebb = Module["__ZN15WhichCoordinateC2Ebb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN15WhichCoordinateC2Ebb"].apply(null, arguments)
};

var __ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16MirrorConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN16MirrorConstraintC2Eiii = Module["__ZN16MirrorConstraintC2Eiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16MirrorConstraintC2Eiii"].apply(null, arguments)
};

var __ZN16MirrorConstraintD0Ev = Module["__ZN16MirrorConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16MirrorConstraintD0Ev"].apply(null, arguments)
};

var __ZN16MirrorConstraintD2Ev = Module["__ZN16MirrorConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16MirrorConstraintD2Ev"].apply(null, arguments)
};

var __ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16SmoothConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN16SmoothConstraintC2Eiii = Module["__ZN16SmoothConstraintC2Eiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16SmoothConstraintC2Eiii"].apply(null, arguments)
};

var __ZN16SmoothConstraintD0Ev = Module["__ZN16SmoothConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16SmoothConstraintD0Ev"].apply(null, arguments)
};

var __ZN16SmoothConstraintD2Ev = Module["__ZN16SmoothConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN16SmoothConstraintD2Ev"].apply(null, arguments)
};

var __ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN19DirectionConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN19DirectionConstraintC2Eiid = Module["__ZN19DirectionConstraintC2Eiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN19DirectionConstraintC2Eiid"].apply(null, arguments)
};

var __ZN19DirectionConstraintD0Ev = Module["__ZN19DirectionConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN19DirectionConstraintD0Ev"].apply(null, arguments)
};

var __ZN19DirectionConstraintD2Ev = Module["__ZN19DirectionConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN19DirectionConstraintD2Ev"].apply(null, arguments)
};

var __ZN20CoordinateDefinitionC2Eibb = Module["__ZN20CoordinateDefinitionC2Eibb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN20CoordinateDefinitionC2Eibb"].apply(null, arguments)
};

var __ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN20SameOffsetConstraint23get_free_variables_fromERKNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZN20SameOffsetConstraintC2Eiiii = Module["__ZN20SameOffsetConstraintC2Eiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN20SameOffsetConstraintC2Eiiii"].apply(null, arguments)
};

var __ZN20SameOffsetConstraintD0Ev = Module["__ZN20SameOffsetConstraintD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN20SameOffsetConstraintD0Ev"].apply(null, arguments)
};

var __ZN20SameOffsetConstraintD2Ev = Module["__ZN20SameOffsetConstraintD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN20SameOffsetConstraintD2Ev"].apply(null, arguments)
};

var __ZN4NodeC2E8NodeTypeRK5Token = Module["__ZN4NodeC2E8NodeTypeRK5Token"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4NodeC2E8NodeTypeRK5Token"].apply(null, arguments)
};

var __ZN4NodeC2EOS_ = Module["__ZN4NodeC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4NodeC2EOS_"].apply(null, arguments)
};

var __ZN4NodeD2Ev = Module["__ZN4NodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4NodeD2Ev"].apply(null, arguments)
};

var __ZN5Lexer4nextEv = Module["__ZN5Lexer4nextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5Lexer4nextEv"].apply(null, arguments)
};

var __ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5LexerC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZN5LexerD2Ev = Module["__ZN5LexerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5LexerD2Ev"].apply(null, arguments)
};

var __ZN5PointC2EOS_ = Module["__ZN5PointC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointC2EOS_"].apply(null, arguments)
};

var __ZN5PointC2ERKS_ = Module["__ZN5PointC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointC2ERKS_"].apply(null, arguments)
};

var __ZN5PointC2Edd = Module["__ZN5PointC2Edd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointC2Edd"].apply(null, arguments)
};

var __ZN5PointC2Ev = Module["__ZN5PointC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointC2Ev"].apply(null, arguments)
};

var __ZN5PointaSEOS_ = Module["__ZN5PointaSEOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointaSEOS_"].apply(null, arguments)
};

var __ZN5PointaSERKS_ = Module["__ZN5PointaSERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5PointaSERKS_"].apply(null, arguments)
};

var __ZN5TokenC2EOS_ = Module["__ZN5TokenC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5TokenC2EOS_"].apply(null, arguments)
};

var __ZN5TokenC2ERKS_ = Module["__ZN5TokenC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5TokenC2ERKS_"].apply(null, arguments)
};

var __ZN5TokenC2Ev = Module["__ZN5TokenC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5TokenC2Ev"].apply(null, arguments)
};

var __ZN5TokenD2Ev = Module["__ZN5TokenD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5TokenD2Ev"].apply(null, arguments)
};

var __ZN5TokenaSEOS_ = Module["__ZN5TokenaSEOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN5TokenaSEOS_"].apply(null, arguments)
};

var __ZN6BezierC2E5PointS0_S0_S0_ = Module["__ZN6BezierC2E5PointS0_S0_S0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6BezierC2E5PointS0_S0_S0_"].apply(null, arguments)
};

var __ZN6BezierC2ERKS_ = Module["__ZN6BezierC2ERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6BezierC2ERKS_"].apply(null, arguments)
};

var __ZN6Bridge10get_strokeEv = Module["__ZN6Bridge10get_strokeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Bridge10get_strokeEv"].apply(null, arguments)
};

var __ZN6Bridge10has_strokeEv = Module["__ZN6Bridge10has_strokeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Bridge10has_strokeEv"].apply(null, arguments)
};

var __ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE = Module["__ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Bridge7funcallERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIdNS4_IdEEEE"].apply(null, arguments)
};

var __ZN6BridgeC2Ev = Module["__ZN6BridgeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6BridgeC2Ev"].apply(null, arguments)
};

var __ZN6BridgeD0Ev = Module["__ZN6BridgeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6BridgeD0Ev"].apply(null, arguments)
};

var __ZN6BridgeD2Ev = Module["__ZN6BridgeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6BridgeD2Ev"].apply(null, arguments)
};

var __ZN6Parser11e5_subtractEv = Module["__ZN6Parser11e5_subtractEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser11e5_subtractEv"].apply(null, arguments)
};

var __ZN6Parser11e6_multiplyEv = Module["__ZN6Parser11e6_multiplyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser11e6_multiplyEv"].apply(null, arguments)
};

var __ZN6Parser12e1_statementEv = Module["__ZN6Parser12e1_statementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser12e1_statementEv"].apply(null, arguments)
};

var __ZN6Parser13e3_expressionEv = Module["__ZN6Parser13e3_expressionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser13e3_expressionEv"].apply(null, arguments)
};

var __ZN6Parser14e8_parenthesesEv = Module["__ZN6Parser14e8_parenthesesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser14e8_parenthesesEv"].apply(null, arguments)
};

var __ZN6Parser5parseEv = Module["__ZN6Parser5parseEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser5parseEv"].apply(null, arguments)
};

var __ZN6Parser6acceptE9TokenType = Module["__ZN6Parser6acceptE9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser6acceptE9TokenType"].apply(null, arguments)
};

var __ZN6Parser6e4_addEv = Module["__ZN6Parser6e4_addEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser6e4_addEv"].apply(null, arguments)
};

var __ZN6Parser6expectE9TokenType = Module["__ZN6Parser6expectE9TokenType"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser6expectE9TokenType"].apply(null, arguments)
};

var __ZN6Parser8e2_commaEv = Module["__ZN6Parser8e2_commaEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser8e2_commaEv"].apply(null, arguments)
};

var __ZN6Parser8e9_tokenEv = Module["__ZN6Parser8e9_tokenEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser8e9_tokenEv"].apply(null, arguments)
};

var __ZN6Parser9e7_divideEv = Module["__ZN6Parser9e7_divideEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser9e7_divideEv"].apply(null, arguments)
};

var __ZN6Parser9set_errorEPKcii = Module["__ZN6Parser9set_errorEPKcii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Parser9set_errorEPKcii"].apply(null, arguments)
};

var __ZN6ParserC2ER5Lexer = Module["__ZN6ParserC2ER5Lexer"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6ParserC2ER5Lexer"].apply(null, arguments)
};

var __ZN6ParserD2Ev = Module["__ZN6ParserD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6ParserD2Ev"].apply(null, arguments)
};

var __ZN6Stroke12update_modelEv = Module["__ZN6Stroke12update_modelEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Stroke12update_modelEv"].apply(null, arguments)
};

var __ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE = Module["__ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Stroke14add_constraintENSt3__210unique_ptrI10ConstraintNS0_14default_deleteIS2_EEEE"].apply(null, arguments)
};

var __ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Stroke18set_free_variablesERKNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Stroke19calculate_value_forERKNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZN6Stroke6freezeEv = Module["__ZN6Stroke6freezeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6Stroke6freezeEv"].apply(null, arguments)
};

var __ZN6StrokeC2EOS_ = Module["__ZN6StrokeC2EOS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6StrokeC2EOS_"].apply(null, arguments)
};

var __ZN6StrokeC2Ei = Module["__ZN6StrokeC2Ei"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6StrokeC2Ei"].apply(null, arguments)
};

var __ZN6StrokeD2Ev = Module["__ZN6StrokeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6StrokeD2Ev"].apply(null, arguments)
};

var __ZN6VectorC2ERK5Point = Module["__ZN6VectorC2ERK5Point"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6VectorC2ERK5Point"].apply(null, arguments)
};

var __ZN6VectorC2Edd = Module["__ZN6VectorC2Edd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN6VectorC2Edd"].apply(null, arguments)
};

var __ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLComment9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLComment9ToCommentEv = Module["__ZN8tinyxml210XMLComment9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLComment9ToCommentEv"].apply(null, arguments)
};

var __ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLCommentC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLCommentD0Ev = Module["__ZN8tinyxml210XMLCommentD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLCommentD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLCommentD2Ev = Module["__ZN8tinyxml210XMLCommentD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLCommentD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement12SetAttributeEPKcS2_ = Module["__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement12SetAttributeEPKcS2_"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement12SetAttributeEPKcd = Module["__ZN8tinyxml210XMLElement12SetAttributeEPKcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement12SetAttributeEPKcd"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement15CreateAttributeEv = Module["__ZN8tinyxml210XMLElement15CreateAttributeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement15CreateAttributeEv"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE = Module["__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement15DeleteAttributeEPNS_12XMLAttributeE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement15ParseAttributesEPcPi = Module["__ZN8tinyxml210XMLElement15ParseAttributesEPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement15ParseAttributesEPcPi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc = Module["__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement21FindOrCreateAttributeEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement7SetNameEPKcb = Module["__ZN8tinyxml210XMLElement7SetNameEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement7SetNameEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement7SetTextEPKc = Module["__ZN8tinyxml210XMLElement7SetTextEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement7SetTextEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElement9ToElementEv = Module["__ZN8tinyxml210XMLElement9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElement9ToElementEv"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElementC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElementD0Ev = Module["__ZN8tinyxml210XMLElementD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElementD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLElementD2Ev = Module["__ZN8tinyxml210XMLElementD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLElementD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter10PrintSpaceEi = Module["__ZN8tinyxml210XMLPrinter10PrintSpaceEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter10PrintSpaceEi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter10PushHeaderEbb = Module["__ZN8tinyxml210XMLPrinter10PushHeaderEbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter10PushHeaderEbb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE = Module["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter10VisitEnterERKNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE = Module["__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter11CompactModeERKNS_10XMLElementE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter11OpenElementEPKcb = Module["__ZN8tinyxml210XMLPrinter11OpenElementEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter11OpenElementEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter11PrintStringEPKcb = Module["__ZN8tinyxml210XMLPrinter11PrintStringEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter11PrintStringEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter11PushCommentEPKc = Module["__ZN8tinyxml210XMLPrinter11PushCommentEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter11PushCommentEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter11PushUnknownEPKc = Module["__ZN8tinyxml210XMLPrinter11PushUnknownEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter11PushUnknownEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter12CloseElementEb = Module["__ZN8tinyxml210XMLPrinter12CloseElementEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter12CloseElementEb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_ = Module["__ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter13PushAttributeEPKcS2_"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter15PushDeclarationEPKc = Module["__ZN8tinyxml210XMLPrinter15PushDeclarationEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter15PushDeclarationEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv = Module["__ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter23SealElementIfJustOpenedEv"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter4PutcEc = Module["__ZN8tinyxml210XMLPrinter4PutcEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter4PutcEc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE = Module["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLCommentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE = Module["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5VisitERKNS_10XMLUnknownE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE = Module["__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5VisitERKNS_14XMLDeclarationE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE = Module["__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5VisitERKNS_7XMLTextE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5WriteEPKc = Module["__ZN8tinyxml210XMLPrinter5WriteEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5WriteEPKc"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter5WriteEPKcm = Module["__ZN8tinyxml210XMLPrinter5WriteEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter5WriteEPKcm"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter8PushTextEPKcb = Module["__ZN8tinyxml210XMLPrinter8PushTextEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter8PushTextEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE = Module["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_10XMLElementE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinter9VisitExitERKNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi = Module["__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinterC2EP8_IO_FILEbi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinterD0Ev = Module["__ZN8tinyxml210XMLPrinterD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinterD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLPrinterD2Ev = Module["__ZN8tinyxml210XMLPrinterD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLPrinterD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLUnknown9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml210XMLUnknown9ToUnknownEv = Module["__ZN8tinyxml210XMLUnknown9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLUnknown9ToUnknownEv"].apply(null, arguments)
};

var __ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLUnknownC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLUnknownD0Ev = Module["__ZN8tinyxml210XMLUnknownD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLUnknownD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLUnknownD2Ev = Module["__ZN8tinyxml210XMLUnknownD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLUnknownD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE = Module["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_10XMLElementEPKNS_12XMLAttributeE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor10VisitEnterERKNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE = Module["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLCommentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE = Module["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor5VisitERKNS_10XMLUnknownE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE = Module["__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor5VisitERKNS_14XMLDeclarationE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE = Module["__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor5VisitERKNS_7XMLTextE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE = Module["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_10XMLElementE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE = Module["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitor9VisitExitERKNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitorC2Ev = Module["__ZN8tinyxml210XMLVisitorC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitorC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitorD0Ev = Module["__ZN8tinyxml210XMLVisitorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitorD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml210XMLVisitorD2Ev = Module["__ZN8tinyxml210XMLVisitorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml210XMLVisitorD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10ClearErrorEv = Module["__ZN8tinyxml211XMLDocument10ClearErrorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10ClearErrorEv"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE = Module["__ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10DeleteNodeEPNS_7XMLNodeE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10NewCommentEPKc = Module["__ZN8tinyxml211XMLDocument10NewCommentEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10NewCommentEPKc"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10NewElementEPKc = Module["__ZN8tinyxml211XMLDocument10NewElementEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10NewElementEPKc"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10NewUnknownEPKc = Module["__ZN8tinyxml211XMLDocument10NewUnknownEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10NewUnknownEPKc"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument10ToDocumentEv = Module["__ZN8tinyxml211XMLDocument10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument10ToDocumentEv"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_ = Module["__ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument12DepthTrackerC2EPS0_"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument12DepthTrackerD2Ev = Module["__ZN8tinyxml211XMLDocument12DepthTrackerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument12DepthTrackerD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE = Module["__ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument13ErrorIDToNameENS_8XMLErrorE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument14NewDeclarationEPKc = Module["__ZN8tinyxml211XMLDocument14NewDeclarationEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument14NewDeclarationEPKc"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE = Module["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLCommentELi52EEEPT_RNS_8MemPoolTIXT0_EEE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE = Module["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLElementELi60EEEPT_RNS_8MemPoolTIXT0_EEE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE = Module["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_10XMLUnknownELi52EEEPT_RNS_8MemPoolTIXT0_EEE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE = Module["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_14XMLDeclarationELi52EEEPT_RNS_8MemPoolTIXT0_EEE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE = Module["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument18CreateUnlinkedNodeINS_7XMLTextELi56EEEPT_RNS_8MemPoolTIXT0_EEE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument5ClearEv = Module["__ZN8tinyxml211XMLDocument5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument5ClearEv"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument7NewTextEPKc = Module["__ZN8tinyxml211XMLDocument7NewTextEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument7NewTextEPKc"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE = Module["__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument8IdentifyEPcPPNS_7XMLNodeE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument8PopDepthEv = Module["__ZN8tinyxml211XMLDocument8PopDepthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument8PopDepthEv"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb = Module["__ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument8SaveFileEP8_IO_FILEb"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument8SaveFileEPKcb = Module["__ZN8tinyxml211XMLDocument8SaveFileEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument8SaveFileEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz = Module["__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument8SetErrorENS_8XMLErrorEiPKcz"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE = Module["__ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument9MarkInUseEPNS_7XMLNodeE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocument9PushDepthEv = Module["__ZN8tinyxml211XMLDocument9PushDepthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocument9PushDepthEv"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE = Module["__ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocumentC2EbNS_10WhitespaceE"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocumentD0Ev = Module["__ZN8tinyxml211XMLDocumentD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocumentD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml211XMLDocumentD2Ev = Module["__ZN8tinyxml211XMLDocumentD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml211XMLDocumentD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttribute12SetAttributeEPKc = Module["__ZN8tinyxml212XMLAttribute12SetAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttribute12SetAttributeEPKc"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttribute12SetAttributeEd = Module["__ZN8tinyxml212XMLAttribute12SetAttributeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttribute12SetAttributeEd"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttribute7SetNameEPKc = Module["__ZN8tinyxml212XMLAttribute7SetNameEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttribute7SetNameEPKc"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi = Module["__ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttribute9ParseDeepEPcbPi"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttributeC2Ev = Module["__ZN8tinyxml212XMLAttributeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttributeC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttributeD0Ev = Module["__ZN8tinyxml212XMLAttributeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttributeD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml212XMLAttributeD2Ev = Module["__ZN8tinyxml212XMLAttributeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml212XMLAttributeD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml214XMLDeclaration13ToDeclarationEv = Module["__ZN8tinyxml214XMLDeclaration13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml214XMLDeclaration13ToDeclarationEv"].apply(null, arguments)
};

var __ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml214XMLDeclaration9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml214XMLDeclarationC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml214XMLDeclarationD0Ev = Module["__ZN8tinyxml214XMLDeclarationD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml214XMLDeclarationD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml214XMLDeclarationD2Ev = Module["__ZN8tinyxml214XMLDeclarationD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml214XMLDeclarationD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27MemPoolC2Ev = Module["__ZN8tinyxml27MemPoolC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27MemPoolC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27MemPoolD0Ev = Module["__ZN8tinyxml27MemPoolD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27MemPoolD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml27MemPoolD2Ev = Module["__ZN8tinyxml27MemPoolD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27MemPoolD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair10TransferToEPS0_ = Module["__ZN8tinyxml27StrPair10TransferToEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair10TransferToEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair14SetInternedStrEPKc = Module["__ZN8tinyxml27StrPair14SetInternedStrEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair14SetInternedStrEPKc"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair18CollapseWhitespaceEv = Module["__ZN8tinyxml27StrPair18CollapseWhitespaceEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair18CollapseWhitespaceEv"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair3SetEPcS1_i = Module["__ZN8tinyxml27StrPair3SetEPcS1_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair3SetEPcS1_i"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair5ResetEv = Module["__ZN8tinyxml27StrPair5ResetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair5ResetEv"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair6GetStrEv = Module["__ZN8tinyxml27StrPair6GetStrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair6GetStrEv"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair6SetStrEPKci = Module["__ZN8tinyxml27StrPair6SetStrEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair6SetStrEPKci"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair9ParseNameEPc = Module["__ZN8tinyxml27StrPair9ParseNameEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair9ParseNameEPc"].apply(null, arguments)
};

var __ZN8tinyxml27StrPair9ParseTextEPcPKciPi = Module["__ZN8tinyxml27StrPair9ParseTextEPcPKciPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPair9ParseTextEPcPKciPi"].apply(null, arguments)
};

var __ZN8tinyxml27StrPairC2Ev = Module["__ZN8tinyxml27StrPairC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPairC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27StrPairD2Ev = Module["__ZN8tinyxml27StrPairD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27StrPairD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode10DeleteNodeEPS0_ = Module["__ZN8tinyxml27XMLNode10DeleteNodeEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode10DeleteNodeEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode10FirstChildEv = Module["__ZN8tinyxml27XMLNode10FirstChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode10FirstChildEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode10ToDocumentEv = Module["__ZN8tinyxml27XMLNode10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode10ToDocumentEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode11DeleteChildEPS0_ = Module["__ZN8tinyxml27XMLNode11DeleteChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode11DeleteChildEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode11GetDocumentEv = Module["__ZN8tinyxml27XMLNode11GetDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode11GetDocumentEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode13ToDeclarationEv = Module["__ZN8tinyxml27XMLNode13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode13ToDeclarationEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode14DeleteChildrenEv = Module["__ZN8tinyxml27XMLNode14DeleteChildrenEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode14DeleteChildrenEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode14InsertEndChildEPS0_ = Module["__ZN8tinyxml27XMLNode14InsertEndChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode14InsertEndChildEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode16InsertFirstChildEPS0_ = Module["__ZN8tinyxml27XMLNode16InsertFirstChildEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode16InsertFirstChildEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode6ToTextEv = Module["__ZN8tinyxml27XMLNode6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode6ToTextEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode6UnlinkEPS0_ = Module["__ZN8tinyxml27XMLNode6UnlinkEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode6UnlinkEPS0_"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode8SetValueEPKcb = Module["__ZN8tinyxml27XMLNode8SetValueEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode8SetValueEPKcb"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode9LastChildEv = Module["__ZN8tinyxml27XMLNode9LastChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode9LastChildEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode9ToCommentEv = Module["__ZN8tinyxml27XMLNode9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode9ToCommentEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode9ToElementEv = Module["__ZN8tinyxml27XMLNode9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode9ToElementEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNode9ToUnknownEv = Module["__ZN8tinyxml27XMLNode9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNode9ToUnknownEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNodeC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNodeD0Ev = Module["__ZN8tinyxml27XMLNodeD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNodeD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml27XMLNodeD2Ev = Module["__ZN8tinyxml27XMLNodeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLNodeD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27XMLText6ToTextEv = Module["__ZN8tinyxml27XMLText6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLText6ToTextEv"].apply(null, arguments)
};

var __ZN8tinyxml27XMLText8SetCDataEb = Module["__ZN8tinyxml27XMLText8SetCDataEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLText8SetCDataEb"].apply(null, arguments)
};

var __ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi = Module["__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLText9ParseDeepEPcPNS_7StrPairEPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE = Module["__ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLTextC2EPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZN8tinyxml27XMLTextD0Ev = Module["__ZN8tinyxml27XMLTextD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLTextD0Ev"].apply(null, arguments)
};

var __ZN8tinyxml27XMLTextD2Ev = Module["__ZN8tinyxml27XMLTextD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLTextD2Ev"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil10IsNameCharEh = Module["__ZN8tinyxml27XMLUtil10IsNameCharEh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil10IsNameCharEh"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i = Module["__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil11StringEqualEPKcS2_i"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil12IsWhiteSpaceEc = Module["__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil12IsWhiteSpaceEc"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi = Module["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPKcPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi = Module["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil14SkipWhiteSpaceEPcPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi = Module["__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil15GetCharacterRefEPKcPcPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil15IsNameStartCharEh = Module["__ZN8tinyxml27XMLUtil15IsNameStartCharEh"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil15IsNameStartCharEh"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi = Module["__ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil18ConvertUTF32ToUTF8EmPcPi"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc = Module["__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil18IsUTF8ContinuationEc"].apply(null, arguments)
};

var __ZN8tinyxml27XMLUtil5ToStrEdPci = Module["__ZN8tinyxml27XMLUtil5ToStrEdPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml27XMLUtil5ToStrEdPci"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPKcLi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPKcLi10EE3PopEv = Module["__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPKcLi10EE3PopEv"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_ = Module["__ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPKcLi10EE4PushES2_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPKcLi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPKcLi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPKcLi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPKcLi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPKcLi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE10SwapRemoveEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_ = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4PushES2_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi = Module["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_7XMLNodeELi10EEixEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE3PopEv"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_ = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE4PushES4_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE3PopEv"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_ = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE4PushES4_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE3PopEv"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_ = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE4PushES4_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE3PopEv"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_ = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE4PushES4_"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev = Module["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi = Module["__ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIcLi20EE14EnsureCapacityEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIcLi20EE4PushEc = Module["__ZN8tinyxml28DynArrayIcLi20EE4PushEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIcLi20EE4PushEc"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIcLi20EE7PushArrEi = Module["__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIcLi20EE7PushArrEi"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIcLi20EEC2Ev = Module["__ZN8tinyxml28DynArrayIcLi20EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIcLi20EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28DynArrayIcLi20EED2Ev = Module["__ZN8tinyxml28DynArrayIcLi20EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28DynArrayIcLi20EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv = Module["__ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EE10SetTrackedEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EE4FreeEPv = Module["__ZN8tinyxml28MemPoolTILi40EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EE4FreeEPv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EE5AllocEv = Module["__ZN8tinyxml28MemPoolTILi40EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EE5AllocEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EE5ClearEv = Module["__ZN8tinyxml28MemPoolTILi40EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EE5ClearEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EEC2Ev = Module["__ZN8tinyxml28MemPoolTILi40EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EED0Ev = Module["__ZN8tinyxml28MemPoolTILi40EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EED0Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi40EED2Ev = Module["__ZN8tinyxml28MemPoolTILi40EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi40EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv = Module["__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EE10SetTrackedEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EE4FreeEPv = Module["__ZN8tinyxml28MemPoolTILi52EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EE4FreeEPv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EE5AllocEv = Module["__ZN8tinyxml28MemPoolTILi52EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EE5AllocEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EE5ClearEv = Module["__ZN8tinyxml28MemPoolTILi52EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EE5ClearEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EEC2Ev = Module["__ZN8tinyxml28MemPoolTILi52EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EED0Ev = Module["__ZN8tinyxml28MemPoolTILi52EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EED0Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi52EED2Ev = Module["__ZN8tinyxml28MemPoolTILi52EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi52EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv = Module["__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EE10SetTrackedEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EE4FreeEPv = Module["__ZN8tinyxml28MemPoolTILi56EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EE4FreeEPv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EE5AllocEv = Module["__ZN8tinyxml28MemPoolTILi56EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EE5AllocEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EE5ClearEv = Module["__ZN8tinyxml28MemPoolTILi56EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EE5ClearEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EEC2Ev = Module["__ZN8tinyxml28MemPoolTILi56EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EED0Ev = Module["__ZN8tinyxml28MemPoolTILi56EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EED0Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi56EED2Ev = Module["__ZN8tinyxml28MemPoolTILi56EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi56EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv = Module["__ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EE10SetTrackedEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EE4FreeEPv = Module["__ZN8tinyxml28MemPoolTILi60EE4FreeEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EE4FreeEPv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EE5AllocEv = Module["__ZN8tinyxml28MemPoolTILi60EE5AllocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EE5AllocEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EE5ClearEv = Module["__ZN8tinyxml28MemPoolTILi60EE5ClearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EE5ClearEv"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EEC2Ev = Module["__ZN8tinyxml28MemPoolTILi60EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EEC2Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EED0Ev = Module["__ZN8tinyxml28MemPoolTILi60EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EED0Ev"].apply(null, arguments)
};

var __ZN8tinyxml28MemPoolTILi60EED2Ev = Module["__ZN8tinyxml28MemPoolTILi60EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml28MemPoolTILi60EED2Ev"].apply(null, arguments)
};

var __ZN8tinyxml2L9callfopenEPKcS1_ = Module["__ZN8tinyxml2L9callfopenEPKcS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN8tinyxml2L9callfopenEPKcS1_"].apply(null, arguments)
};

var __ZNK10__cxxabiv116__shim_type_info5noop1Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"].apply(null, arguments)
};

var __ZNK10__cxxabiv116__shim_type_info5noop2Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"].apply(null, arguments)
};

var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments)
};

var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

var __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

var __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

var __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

var __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments)
};

var __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments)
};

var __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments)
};

var __ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK11Interpreter12get_variableERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNK11Interpreter9get_errorEv = Module["__ZNK11Interpreter9get_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK11Interpreter9get_errorEv"].apply(null, arguments)
};

var __ZNK11SvgExporter13x_to_canvas_xEd = Module["__ZNK11SvgExporter13x_to_canvas_xEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK11SvgExporter13x_to_canvas_xEd"].apply(null, arguments)
};

var __ZNK11SvgExporter13y_to_canvas_yEd = Module["__ZNK11SvgExporter13y_to_canvas_yEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK11SvgExporter13y_to_canvas_yEd"].apply(null, arguments)
};

var __ZNK11SvgExporter9to_stringEv = Module["__ZNK11SvgExporter9to_stringEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK11SvgExporter9to_stringEv"].apply(null, arguments)
};

var __ZNK14FreeConstraint10get_limitsEv = Module["__ZNK14FreeConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK14FreeConstraint17determines_pointsEv = Module["__ZNK14FreeConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK14FreeConstraint18num_free_variablesEv = Module["__ZNK14FreeConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK14FreeConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK15AngleConstraint10get_limitsEv = Module["__ZNK15AngleConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK15AngleConstraint17determines_pointsEv = Module["__ZNK15AngleConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK15AngleConstraint18num_free_variablesEv = Module["__ZNK15AngleConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15AngleConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK15FixedConstraint10get_limitsEv = Module["__ZNK15FixedConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK15FixedConstraint17determines_pointsEv = Module["__ZNK15FixedConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK15FixedConstraint18num_free_variablesEv = Module["__ZNK15FixedConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15FixedConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK15WhichCoordinate12defines_sameERKS_ = Module["__ZNK15WhichCoordinate12defines_sameERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15WhichCoordinate12defines_sameERKS_"].apply(null, arguments)
};

var __ZNK15WhichCoordinate17fully_constrainedEv = Module["__ZNK15WhichCoordinate17fully_constrainedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK15WhichCoordinate17fully_constrainedEv"].apply(null, arguments)
};

var __ZNK16MirrorConstraint10get_limitsEv = Module["__ZNK16MirrorConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK16MirrorConstraint17determines_pointsEv = Module["__ZNK16MirrorConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK16MirrorConstraint18num_free_variablesEv = Module["__ZNK16MirrorConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16MirrorConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK16SmoothConstraint10get_limitsEv = Module["__ZNK16SmoothConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK16SmoothConstraint17determines_pointsEv = Module["__ZNK16SmoothConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK16SmoothConstraint18num_free_variablesEv = Module["__ZNK16SmoothConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK16SmoothConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK19DirectionConstraint10get_limitsEv = Module["__ZNK19DirectionConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK19DirectionConstraint17determines_pointsEv = Module["__ZNK19DirectionConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK19DirectionConstraint18num_free_variablesEv = Module["__ZNK19DirectionConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK19DirectionConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint10get_limitsEv = Module["__ZNK20SameOffsetConstraint10get_limitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint10get_limitsEv"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE = Module["__ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint12update_modelERNSt3__26vectorI5PointNS0_9allocatorIS2_EEEE"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint17determines_pointsEv = Module["__ZNK20SameOffsetConstraint17determines_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint17determines_pointsEv"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint18num_free_variablesEv = Module["__ZNK20SameOffsetConstraint18num_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint18num_free_variablesEv"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi = Module["__ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint21put_free_variables_inERNSt3__26vectorIdNS0_9allocatorIdEEEEi"].apply(null, arguments)
};

var __ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK20SameOffsetConstraint24append_free_variables_toERNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK5Point1xEv = Module["__ZNK5Point1xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK5Point1xEv"].apply(null, arguments)
};

var __ZNK5Point1yEv = Module["__ZNK5Point1yEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK5Point1yEv"].apply(null, arguments)
};

var __ZNK5PointmiERK6Vector = Module["__ZNK5PointmiERK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK5PointmiERK6Vector"].apply(null, arguments)
};

var __ZNK5PointmiERKS_ = Module["__ZNK5PointmiERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK5PointmiERKS_"].apply(null, arguments)
};

var __ZNK5PointplERK6Vector = Module["__ZNK5PointplERK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK5PointplERK6Vector"].apply(null, arguments)
};

var __ZNK6Bezier11evaluate_d1Ed = Module["__ZNK6Bezier11evaluate_d1Ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier11evaluate_d1Ed"].apply(null, arguments)
};

var __ZNK6Bezier11evaluate_d2Ed = Module["__ZNK6Bezier11evaluate_d2Ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier11evaluate_d2Ed"].apply(null, arguments)
};

var __ZNK6Bezier20evaluate_left_normalEd = Module["__ZNK6Bezier20evaluate_left_normalEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier20evaluate_left_normalEd"].apply(null, arguments)
};

var __ZNK6Bezier2c1Ev = Module["__ZNK6Bezier2c1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier2c1Ev"].apply(null, arguments)
};

var __ZNK6Bezier2c2Ev = Module["__ZNK6Bezier2c2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier2c2Ev"].apply(null, arguments)
};

var __ZNK6Bezier2p1Ev = Module["__ZNK6Bezier2p1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier2p1Ev"].apply(null, arguments)
};

var __ZNK6Bezier2p2Ev = Module["__ZNK6Bezier2p2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Bezier2p2Ev"].apply(null, arguments)
};

var __ZNK6Parser14get_statementsEv = Module["__ZNK6Parser14get_statementsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Parser14get_statementsEv"].apply(null, arguments)
};

var __ZNK6Parser8is_errorEv = Module["__ZNK6Parser8is_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Parser8is_errorEv"].apply(null, arguments)
};

var __ZNK6Parser9get_errorEv = Module["__ZNK6Parser9get_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Parser9get_errorEv"].apply(null, arguments)
};

var __ZNK6Parser9get_nodesEv = Module["__ZNK6Parser9get_nodesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Parser9get_nodesEv"].apply(null, arguments)
};

var __ZNK6Stroke10get_pointsEv = Module["__ZNK6Stroke10get_pointsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Stroke10get_pointsEv"].apply(null, arguments)
};

var __ZNK6Stroke13build_beziersEv = Module["__ZNK6Stroke13build_beziersEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Stroke13build_beziersEv"].apply(null, arguments)
};

var __ZNK6Stroke17calculate_2nd_derEv = Module["__ZNK6Stroke17calculate_2nd_derEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Stroke17calculate_2nd_derEv"].apply(null, arguments)
};

var __ZNK6Stroke18get_free_variablesEv = Module["__ZNK6Stroke18get_free_variablesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Stroke18get_free_variablesEv"].apply(null, arguments)
};

var __ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE = Module["__ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEE"].apply(null, arguments)
};

var __ZNK6Vector10normalizedEv = Module["__ZNK6Vector10normalizedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector10normalizedEv"].apply(null, arguments)
};

var __ZNK6Vector19is_numerically_zeroEv = Module["__ZNK6Vector19is_numerically_zeroEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector19is_numerically_zeroEv"].apply(null, arguments)
};

var __ZNK6Vector1xEv = Module["__ZNK6Vector1xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector1xEv"].apply(null, arguments)
};

var __ZNK6Vector1yEv = Module["__ZNK6Vector1yEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector1yEv"].apply(null, arguments)
};

var __ZNK6Vector3dotERKS_ = Module["__ZNK6Vector3dotERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector3dotERKS_"].apply(null, arguments)
};

var __ZNK6Vector6lengthEv = Module["__ZNK6Vector6lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6Vector6lengthEv"].apply(null, arguments)
};

var __ZNK6VectormiERKS_ = Module["__ZNK6VectormiERKS_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6VectormiERKS_"].apply(null, arguments)
};

var __ZNK6VectormlEd = Module["__ZNK6VectormlEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK6VectormlEd"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE = Module["__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLComment12ShallowCloneEPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLComment12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLComment6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLComment9ToCommentEv = Module["__ZNK8tinyxml210XMLComment9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLComment9ToCommentEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement11ClosingTypeEv = Module["__ZNK8tinyxml210XMLElement11ClosingTypeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement11ClosingTypeEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE = Module["__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement12ShallowCloneEPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement13FindAttributeEPKc = Module["__ZNK8tinyxml210XMLElement13FindAttributeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement13FindAttributeEPKc"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement14FirstAttributeEv = Module["__ZNK8tinyxml210XMLElement14FirstAttributeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement14FirstAttributeEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement4NameEv = Module["__ZNK8tinyxml210XMLElement4NameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement4NameEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement9AttributeEPKcS2_ = Module["__ZNK8tinyxml210XMLElement9AttributeEPKcS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement9AttributeEPKcS2_"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLElement9ToElementEv = Module["__ZNK8tinyxml210XMLElement9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLElement9ToElementEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLPrinter4CStrEv = Module["__ZNK8tinyxml210XMLPrinter4CStrEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLPrinter4CStrEv"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE = Module["__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLUnknown12ShallowCloneEPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLUnknown12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLUnknown6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml210XMLUnknown9ToUnknownEv = Module["__ZNK8tinyxml210XMLUnknown9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml210XMLUnknown9ToUnknownEv"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument10ToDocumentEv = Module["__ZNK8tinyxml211XMLDocument10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument10ToDocumentEv"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_ = Module["__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument12ShallowCloneEPS0_"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument14WhitespaceModeEv = Module["__ZNK8tinyxml211XMLDocument14WhitespaceModeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument14WhitespaceModeEv"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument15ProcessEntitiesEv = Module["__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument15ProcessEntitiesEv"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument5ErrorEv = Module["__ZNK8tinyxml211XMLDocument5ErrorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument5ErrorEv"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE = Module["__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument5PrintEPNS_10XMLPrinterE"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml211XMLDocument6HasBOMEv = Module["__ZNK8tinyxml211XMLDocument6HasBOMEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml211XMLDocument6HasBOMEv"].apply(null, arguments)
};

var __ZNK8tinyxml212XMLAttribute4NameEv = Module["__ZNK8tinyxml212XMLAttribute4NameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml212XMLAttribute4NameEv"].apply(null, arguments)
};

var __ZNK8tinyxml212XMLAttribute4NextEv = Module["__ZNK8tinyxml212XMLAttribute4NextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml212XMLAttribute4NextEv"].apply(null, arguments)
};

var __ZNK8tinyxml212XMLAttribute5ValueEv = Module["__ZNK8tinyxml212XMLAttribute5ValueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml212XMLAttribute5ValueEv"].apply(null, arguments)
};

var __ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE = Module["__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml214XMLDeclaration12ShallowCloneEPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml214XMLDeclaration12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml214XMLDeclaration13ToDeclarationEv = Module["__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml214XMLDeclaration13ToDeclarationEv"].apply(null, arguments)
};

var __ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml214XMLDeclaration6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml27StrPair5EmptyEv = Module["__ZNK8tinyxml27StrPair5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27StrPair5EmptyEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode10FirstChildEv = Module["__ZNK8tinyxml27XMLNode10FirstChildEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode10FirstChildEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode10ToDocumentEv = Module["__ZNK8tinyxml27XMLNode10ToDocumentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode10ToDocumentEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode11NextSiblingEv = Module["__ZNK8tinyxml27XMLNode11NextSiblingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode11NextSiblingEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode13ToDeclarationEv = Module["__ZNK8tinyxml27XMLNode13ToDeclarationEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode13ToDeclarationEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_ = Module["__ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode19InsertChildPreambleEPS0_"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode5ValueEv = Module["__ZNK8tinyxml27XMLNode5ValueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode5ValueEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode6ParentEv = Module["__ZNK8tinyxml27XMLNode6ParentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode6ParentEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode6ToTextEv = Module["__ZNK8tinyxml27XMLNode6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode6ToTextEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode9ToCommentEv = Module["__ZNK8tinyxml27XMLNode9ToCommentEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode9ToCommentEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode9ToElementEv = Module["__ZNK8tinyxml27XMLNode9ToElementEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode9ToElementEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLNode9ToUnknownEv = Module["__ZNK8tinyxml27XMLNode9ToUnknownEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLNode9ToUnknownEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE = Module["__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLText12ShallowCloneEPNS_11XMLDocumentE"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE = Module["__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLText12ShallowEqualEPKNS_7XMLNodeE"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLText5CDataEv = Module["__ZNK8tinyxml27XMLText5CDataEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLText5CDataEv"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE = Module["__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLText6AcceptEPNS_10XMLVisitorE"].apply(null, arguments)
};

var __ZNK8tinyxml27XMLText6ToTextEv = Module["__ZNK8tinyxml27XMLText6ToTextEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml27XMLText6ToTextEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv = Module["__ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIPNS_7XMLNodeELi10EE4SizeEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv = Module["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi40EE5BlockELi10EE5EmptyEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv = Module["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi52EE5BlockELi10EE5EmptyEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv = Module["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi56EE5BlockELi10EE5EmptyEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv = Module["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIPNS_8MemPoolTILi60EE5BlockELi10EE5EmptyEv"].apply(null, arguments)
};

var __ZNK8tinyxml28DynArrayIcLi20EE3MemEv = Module["__ZNK8tinyxml28DynArrayIcLi20EE3MemEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28DynArrayIcLi20EE3MemEv"].apply(null, arguments)
};

var __ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv = Module["__ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28MemPoolTILi40EE8ItemSizeEv"].apply(null, arguments)
};

var __ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv = Module["__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28MemPoolTILi52EE8ItemSizeEv"].apply(null, arguments)
};

var __ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv = Module["__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28MemPoolTILi56EE8ItemSizeEv"].apply(null, arguments)
};

var __ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv = Module["__ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK8tinyxml28MemPoolTILi60EE8ItemSizeEv"].apply(null, arguments)
};

var __ZNKSt11logic_error4whatEv = Module["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt11logic_error4whatEv"].apply(null, arguments)
};

var __ZNKSt13runtime_error4whatEv = Module["__ZNKSt13runtime_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt13runtime_error4whatEv"].apply(null, arguments)
};

var __ZNKSt18bad_variant_access4whatEv = Module["__ZNKSt18bad_variant_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt18bad_variant_access4whatEv"].apply(null, arguments)
};

var __ZNKSt19bad_optional_access4whatEv = Module["__ZNKSt19bad_optional_access4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt19bad_optional_access4whatEv"].apply(null, arguments)
};

var __ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__back_refIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__l_anchorIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__r_anchorIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"].apply(null, arguments)
};

var __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"].apply(null, arguments)
};

var __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE = Module["__ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211__alternateIcE12__exec_splitEbRNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211__alternateIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211__end_stateIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211__lookaheadIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211__match_anyIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = Module["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE16__match_at_startINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"].apply(null, arguments)
};

var __ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = Module["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE21__match_at_start_ecmaINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"].apply(null, arguments)
};

var __ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = Module["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE27__match_at_start_posix_subsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"].apply(null, arguments)
};

var __ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb = Module["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE29__match_at_start_posix_nosubsINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeEb"].apply(null, arguments)
};

var __ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE = Module["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__211basic_regexIcNS_12regex_traitsIcEEE8__searchINS_9allocatorINS_9sub_matchIPKcEEEEEEbS8_S8_RNS_13match_resultsIS8_T_EENS_15regex_constants15match_flag_typeE"].apply(null, arguments)
};

var __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv = Module["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"].apply(null, arguments)
};

var __ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv = Module["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212_GLOBAL__N_114initial_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiLb0EEclEv"].apply(null, arguments)
};

var __ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_ = Module["__ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_"].apply(null, arguments)
};

var __ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212__match_charIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm = Module["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE16translate_nocaseEc = Module["__ZNKSt3__212regex_traitsIcE16translate_nocaseEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE16translate_nocaseEc"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc = Module["__ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE18__lookup_classnameIPKcEEtT_S5_bc"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c = Module["__ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE19__transform_primaryINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_c"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c = Module["__ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE19__transform_primaryIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c = Module["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPKcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SB_c"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c = Module["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE20__lookup_collatenameIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_c"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE7isctypeEct = Module["__ZNKSt3__212regex_traitsIcE7isctypeEct"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE7isctypeEct"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_ = Module["__ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE9transformINS_11__wrap_iterIPcEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SC_"].apply(null, arguments)
};

var __ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_ = Module["__ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212regex_traitsIcE9transformIPcEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEET_SA_"].apply(null, arguments)
};

var __ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__213__empty_stateIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__215__word_boundaryIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__217__repeat_one_loopIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__back_ref_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv = Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"].apply(null, arguments)
};

var __ZNKSt3__218__libcpp_refstring5c_strEv = Module["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__libcpp_refstring5c_strEv"].apply(null, arguments)
};

var __ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__match_char_icaseIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info = Module["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info"].apply(null, arguments)
};

var __ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__bracket_expressionIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE = Module["__ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__match_char_collateIcNS_12regex_traitsIcEEE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info = Module["__ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__XEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__cEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__rEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__xEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIcE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__XEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__cEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__rEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__xEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"].apply(null, arguments)
};

var __ZNKSt3__220__time_get_c_storageIwE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"].apply(null, arguments)
};

var __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"].apply(null, arguments)
};

var __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"].apply(null, arguments)
};

var __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv"].apply(null, arguments)
};

var __ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__221__empty_non_own_stateIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__223__match_any_but_newlineIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__226__end_marked_subexpressionIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__228__begin_marked_subexpressionIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_ = Module["__ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__24hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE10do_tolowerEc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_tolowerEc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE10do_toupperEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE10do_toupperEc = Module["__ZNKSt3__25ctypeIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_toupperEc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = Module["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE8do_widenEc = Module["__ZNKSt3__25ctypeIcE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE8do_widenEc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = Module["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIcE9do_narrowEcc = Module["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE9do_narrowEcc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE10do_tolowerEw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_tolowerEw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE10do_toupperEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE10do_toupperEw = Module["__ZNKSt3__25ctypeIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_toupperEw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE5do_isEtw = Module["__ZNKSt3__25ctypeIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE5do_isEtw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE8do_widenEc = Module["__ZNKSt3__25ctypeIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE8do_widenEc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"].apply(null, arguments)
};

var __ZNKSt3__25ctypeIwE9do_narrowEwc = Module["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE9do_narrowEwc"].apply(null, arguments)
};

var __ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE = Module["__ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26__loopIcE12__exec_splitEbRNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26__loopIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE = Module["__ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26__nodeIcE12__exec_splitEbRNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE = Module["__ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26__nodeIcE6__execERNS_7__stateIcEE"].apply(null, arguments)
};

var __ZNKSt3__26locale4nameEv = Module["__ZNKSt3__26locale4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale4nameEv"].apply(null, arguments)
};

var __ZNKSt3__26locale5__imp4nameEv = Module["__ZNKSt3__26locale5__imp4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale5__imp4nameEv"].apply(null, arguments)
};

var __ZNKSt3__26locale5__imp9use_facetEl = Module["__ZNKSt3__26locale5__imp9use_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale5__imp9use_facetEl"].apply(null, arguments)
};

var __ZNKSt3__26locale9use_facetERNS0_2idE = Module["__ZNKSt3__26locale9use_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale9use_facetERNS0_2idE"].apply(null, arguments)
};

var __ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI4NodeNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI5PointNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv = Module["__ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorI6BezierNS_9allocatorIS1_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv = Module["__ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv = Module["__ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIPKcNS_9allocatorIS2_EEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv = Module["__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv = Module["__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv = Module["__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"].apply(null, arguments)
};

var __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m"].apply(null, arguments)
};

var __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"].apply(null, arguments)
};

var __ZNKSt3__27collateIcE12do_transformEPKcS3_ = Module["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE12do_transformEPKcS3_"].apply(null, arguments)
};

var __ZNKSt3__27collateIcE7do_hashEPKcS3_ = Module["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE7do_hashEPKcS3_"].apply(null, arguments)
};

var __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"].apply(null, arguments)
};

var __ZNKSt3__27collateIwE12do_transformEPKwS3_ = Module["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE12do_transformEPKwS3_"].apply(null, arguments)
};

var __ZNKSt3__27collateIwE7do_hashEPKwS3_ = Module["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE7do_hashEPKwS3_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments)
};

var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"].apply(null, arguments)
};

var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"].apply(null, arguments)
};

var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"].apply(null, arguments)
};

var __ZNKSt3__28ios_base6getlocEv = Module["__ZNKSt3__28ios_base6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28ios_base6getlocEv"].apply(null, arguments)
};

var __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments)
};

var __ZNKSt3__28messagesIcE8do_closeEl = Module["__ZNKSt3__28messagesIcE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE8do_closeEl"].apply(null, arguments)
};

var __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = Module["__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"].apply(null, arguments)
};

var __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments)
};

var __ZNKSt3__28messagesIwE8do_closeEl = Module["__ZNKSt3__28messagesIwE8do_closeEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE8do_closeEl"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIcE11do_groupingEv = Module["__ZNKSt3__28numpunctIcE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIcE11do_truenameEv = Module["__ZNKSt3__28numpunctIcE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE11do_truenameEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIcE12do_falsenameEv = Module["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE12do_falsenameEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIcE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIcE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIwE11do_groupingEv = Module["__ZNKSt3__28numpunctIwE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE11do_groupingEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIwE11do_truenameEv = Module["__ZNKSt3__28numpunctIwE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE11do_truenameEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIwE12do_falsenameEv = Module["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE12do_falsenameEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIwE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"].apply(null, arguments)
};

var __ZNKSt3__28numpunctIwE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments)
};

var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments)
};

var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments)
};

var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"].apply(null, arguments)
};

var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"].apply(null, arguments)
};

var __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc = Module["__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc"].apply(null, arguments)
};

var __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc = Module["__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc"].apply(null, arguments)
};

var __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw = Module["__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw"].apply(null, arguments)
};

var __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_ = Module["__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_"].apply(null, arguments)
};

var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments)
};

var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments)
};

var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments)
};

var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"].apply(null, arguments)
};

var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments)
};

var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"].apply(null, arguments)
};

var __ZNKSt9exception4whatEv = Module["__ZNKSt9exception4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt9exception4whatEv"].apply(null, arguments)
};

var __ZNSt11logic_errorC2EPKc = Module["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorC2EPKc"].apply(null, arguments)
};

var __ZNSt11logic_errorD0Ev = Module["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorD0Ev"].apply(null, arguments)
};

var __ZNSt11logic_errorD2Ev = Module["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorD2Ev"].apply(null, arguments)
};

var __ZNSt12length_errorD0Ev = Module["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt12length_errorD0Ev"].apply(null, arguments)
};

var __ZNSt13runtime_errorC2EPKc = Module["__ZNSt13runtime_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorC2EPKc"].apply(null, arguments)
};

var __ZNSt13runtime_errorD0Ev = Module["__ZNSt13runtime_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorD0Ev"].apply(null, arguments)
};

var __ZNSt13runtime_errorD2Ev = Module["__ZNSt13runtime_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorD2Ev"].apply(null, arguments)
};

var __ZNSt18bad_variant_accessC2Ev = Module["__ZNSt18bad_variant_accessC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt18bad_variant_accessC2Ev"].apply(null, arguments)
};

var __ZNSt18bad_variant_accessD0Ev = Module["__ZNSt18bad_variant_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt18bad_variant_accessD0Ev"].apply(null, arguments)
};

var __ZNSt18bad_variant_accessD2Ev = Module["__ZNSt18bad_variant_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt18bad_variant_accessD2Ev"].apply(null, arguments)
};

var __ZNSt19bad_optional_accessC2Ev = Module["__ZNSt19bad_optional_accessC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt19bad_optional_accessC2Ev"].apply(null, arguments)
};

var __ZNSt19bad_optional_accessD0Ev = Module["__ZNSt19bad_optional_accessD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt19bad_optional_accessD0Ev"].apply(null, arguments)
};

var __ZNSt19bad_optional_accessD2Ev = Module["__ZNSt19bad_optional_accessD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt19bad_optional_accessD2Ev"].apply(null, arguments)
};

var __ZNSt3__210__back_refIcED0Ev = Module["__ZNSt3__210__back_refIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__back_refIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__210__back_refIcED2Ev = Module["__ZNSt3__210__back_refIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__back_refIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__210__l_anchorIcED0Ev = Module["__ZNSt3__210__l_anchorIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__l_anchorIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__210__l_anchorIcED2Ev = Module["__ZNSt3__210__l_anchorIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__l_anchorIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__210__r_anchorIcED0Ev = Module["__ZNSt3__210__r_anchorIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__r_anchorIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__210__r_anchorIcED2Ev = Module["__ZNSt3__210__r_anchorIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__r_anchorIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__210__time_putD2Ev = Module["__ZNSt3__210__time_putD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__time_putD2Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIcLb0EED0Ev = Module["__ZNSt3__210moneypunctIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb0EED0Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIcLb0EED2Ev = Module["__ZNSt3__210moneypunctIcLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIcLb1EED0Ev = Module["__ZNSt3__210moneypunctIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb1EED0Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIcLb1EED2Ev = Module["__ZNSt3__210moneypunctIcLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIwLb0EED0Ev = Module["__ZNSt3__210moneypunctIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb0EED0Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIwLb0EED2Ev = Module["__ZNSt3__210moneypunctIwLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIwLb1EED0Ev = Module["__ZNSt3__210moneypunctIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb1EED0Ev"].apply(null, arguments)
};

var __ZNSt3__210moneypunctIwLb1EED2Ev = Module["__ZNSt3__210moneypunctIwLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz = Module["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEE18__enable_weak_thisEz"].apply(null, arguments)
};

var __ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE = Module["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE"].apply(null, arguments)
};

var __ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev = Module["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210shared_ptrINS_13__empty_stateIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__211__alternateIcED0Ev = Module["__ZNSt3__211__alternateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__alternateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__211__alternateIcED2Ev = Module["__ZNSt3__211__alternateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__alternateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__211__call_onceERVmPvPFvS2_E = Module["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__call_onceERVmPvPFvS2_E"].apply(null, arguments)
};

var __ZNSt3__211__end_stateIcED0Ev = Module["__ZNSt3__211__end_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__end_stateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__211__end_stateIcED2Ev = Module["__ZNSt3__211__end_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__end_stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__lookaheadIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__211__match_anyIcED0Ev = Module["__ZNSt3__211__match_anyIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__match_anyIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__211__match_anyIcED2Ev = Module["__ZNSt3__211__match_anyIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__match_anyIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = Module["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"].apply(null, arguments)
};

var __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = Module["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"].apply(null, arguments)
};

var __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = Module["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"].apply(null, arguments)
};

var __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = Module["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"].apply(null, arguments)
};

var __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = Module["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"].apply(null, arguments)
};

var __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = Module["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_charEc"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE11__push_loopEmmPNS_16__owns_one_stateIcEEmmb"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_atomIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_grepIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__parse_termIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE12__push_emptyEv"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE13__parse_egrepIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__parse_BACKREFIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_back_refEi"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE15__push_r_anchorEv"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ORD_CHARIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__parse_ecma_expIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_lookaheadERKS3_bj"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE16__push_match_anyEv"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_DUP_COUNTIPKcEET_S7_S7_Ri"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_assertionIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE17__parse_simple_REIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_ERE_branchIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_awk_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__parse_nondupl_REIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE18__push_alternationEPNS_16__owns_one_stateIcEES6_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_QUOTED_CHARIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_alternativeIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_atom_escapeIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE19__parse_follow_listIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_ORD_CHAR_EREIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__parse_class_escapeIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPNS_20__bracket_expressionIcS2_EE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE20__push_word_boundaryEb"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_RE_expressionIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__parse_basic_reg_expIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE21__start_matching_listEb"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_ERE_expressionIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_RE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE22__parse_decimal_escapeIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_braceIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_Back_open_parenIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_ERE_dupl_symbolIPKcEET_S7_S7_PNS_16__owns_one_stateIcEEjj"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_QUOTED_CHAR_EREIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_character_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE23__parse_expression_termIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_braceIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_Back_close_parenIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_character_escapeIPKcEET_S7_S7_PNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_collating_symbolIPKcEET_S7_S7_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE24__parse_extended_reg_expIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_equivalence_classIPKcEET_S7_S7_PNS_20__bracket_expressionIcS2_EE"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE25__parse_pattern_characterIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE26__parse_bracket_expressionIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE28__push_match_any_but_newlineEv"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE30__parse_character_class_escapeIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE31__push_end_marked_subexpressionEj"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE32__parse_one_char_or_coll_elem_REIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__parse_one_char_or_coll_elem_EREIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE33__push_begin_marked_subexpressionEv"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEE7__parseIPKcEET_S7_S7_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_ = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEEC2ERKS3_"].apply(null, arguments)
};

var __ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211basic_regexIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE11eq_int_typeEii = Module["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE11eq_int_typeEii"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE11to_int_typeEc = Module["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE11to_int_typeEc"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE3eofEv = Module["__ZNSt3__211char_traitsIcE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE3eofEv"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE4copyEPcPKcm = Module["__ZNSt3__211char_traitsIcE4copyEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE4copyEPcPKcm"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE4moveEPcPKcm = Module["__ZNSt3__211char_traitsIcE4moveEPcPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE4moveEPcPKcm"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE6assignEPcmc = Module["__ZNSt3__211char_traitsIcE6assignEPcmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6assignEPcmc"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE6assignERcRKc = Module["__ZNSt3__211char_traitsIcE6assignERcRKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6assignERcRKc"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE6lengthEPKc = Module["__ZNSt3__211char_traitsIcE6lengthEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6lengthEPKc"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIcE7compareEPKcS3_m = Module["__ZNSt3__211char_traitsIcE7compareEPKcS3_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE7compareEPKcS3_m"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE11eq_int_typeEjj = Module["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE11to_int_typeEw = Module["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE11to_int_typeEw"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE3eofEv = Module["__ZNSt3__211char_traitsIwE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE3eofEv"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE4copyEPwPKwm = Module["__ZNSt3__211char_traitsIwE4copyEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE4copyEPwPKwm"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE4moveEPwPKwm = Module["__ZNSt3__211char_traitsIwE4moveEPwPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE4moveEPwPKwm"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE6assignEPwmw = Module["__ZNSt3__211char_traitsIwE6assignEPwmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6assignEPwmw"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE6assignERwRKw = Module["__ZNSt3__211char_traitsIwE6assignERwRKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6assignERwRKw"].apply(null, arguments)
};

var __ZNSt3__211char_traitsIwE6lengthEPKw = Module["__ZNSt3__211char_traitsIwE6lengthEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6lengthEPKw"].apply(null, arguments)
};

var __ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE = Module["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211regex_errorC2ENS_15regex_constants10error_typeE"].apply(null, arguments)
};

var __ZNSt3__211regex_errorD0Ev = Module["__ZNSt3__211regex_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211regex_errorD0Ev"].apply(null, arguments)
};

var __ZNSt3__211regex_errorD2Ev = Module["__ZNSt3__211regex_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211regex_errorD2Ev"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc = Module["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_10classnamesEPKc"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc = Module["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_110use_strcmpclERKNS0_14collationnamesEPKc"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_ = Module["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_"].apply(null, arguments)
};

var __ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_ = Module["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_19as_stringINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPFiPcmPKczEiEET_T0_SD_PKNSD_10value_typeET1_"].apply(null, arguments)
};

var __ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv = Module["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE3endEv"].apply(null, arguments)
};

var __ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv = Module["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5beginEv"].apply(null, arguments)
};

var __ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv = Module["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEE5clearEv"].apply(null, arguments)
};

var __ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__deque_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__212__do_nothingEPv = Module["__ZNSt3__212__do_nothingEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__do_nothingEPv"].apply(null, arguments)
};

var __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE = Module["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS8_PvEEEE"].apply(null, arguments)
};

var __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_ = Module["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSN_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS8_PvEENS_22__hash_node_destructorINS5_ISV_EEEEEEmOT_DpOT0_"].apply(null, arguments)
};

var __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm = Module["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEm"].apply(null, arguments)
};

var __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm = Module["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEm"].apply(null, arguments)
};

var __ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev = Module["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__212__match_charIcED0Ev = Module["__ZNSt3__212__match_charIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__match_charIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__212__match_charIcED2Ev = Module["__ZNSt3__212__match_charIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__match_charIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__212__next_primeEm = Module["__ZNSt3__212__next_primeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__next_primeEm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_11__wrap_iterIPcEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSEc"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"].apply(null, arguments)
};

var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi = Module["__ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212regex_traitsIcE20__regex_traits_valueEhi"].apply(null, arguments)
};

var __ZNSt3__212regex_traitsIcE6__initEv = Module["__ZNSt3__212regex_traitsIcE6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212regex_traitsIcE6__initEv"].apply(null, arguments)
};

var __ZNSt3__212regex_traitsIcEC2ERKS1_ = Module["__ZNSt3__212regex_traitsIcEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212regex_traitsIcEC2ERKS1_"].apply(null, arguments)
};

var __ZNSt3__212regex_traitsIcEC2Ev = Module["__ZNSt3__212regex_traitsIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212regex_traitsIcEC2Ev"].apply(null, arguments)
};

var __ZNSt3__212regex_traitsIcED2Ev = Module["__ZNSt3__212regex_traitsIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212regex_traitsIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__empty_stateIcED0Ev = Module["__ZNSt3__213__empty_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__empty_stateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__213__empty_stateIcED2Ev = Module["__ZNSt3__213__empty_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__empty_stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_10classnamesEPKcEET0_S9_S9_RKT1_T_"].apply(null, arguments)
};

var __ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__lower_boundIRNS_12_GLOBAL__N_110use_strcmpEPKNS1_14collationnamesEPKcEET0_S9_S9_RKT1_T_"].apply(null, arguments)
};

var __ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_ = Module["__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__lower_boundIRNS_6__lessIjmEEPKjmEET0_S6_S6_RKT1_T_"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI14VariableLimitsNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI15TokenDefinitionNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI4NodeNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI5PointNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseI6BezierNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_4pairIccEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIPKcNS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev = Module["__ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev = Module["__ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev = Module["__ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b = Module["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEE6__initEjS2_S2_b"].apply(null, arguments)
};

var __ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_ = Module["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEEC2ERKS6_"].apply(null, arguments)
};

var __ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev = Module["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213match_resultsIPKcNS_9allocatorINS_9sub_matchIS2_EEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev = Module["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_ = Module["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_dEEEEEixERSC_"].apply(null, arguments)
};

var __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = Module["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"].apply(null, arguments)
};

var __ZNSt3__214__num_put_base12__format_intEPcPKcbj = Module["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"].apply(null, arguments)
};

var __ZNSt3__214__num_put_base14__format_floatEPcPKcj = Module["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"].apply(null, arguments)
};

var __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = Module["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"].apply(null, arguments)
};

var __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"].apply(null, arguments)
};

var __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"].apply(null, arguments)
};

var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments)
};

var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments)
};

var __ZNSt3__214__shared_countD0Ev = Module["__ZNSt3__214__shared_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__shared_countD0Ev"].apply(null, arguments)
};

var __ZNSt3__214__shared_countD2Ev = Module["__ZNSt3__214__shared_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__shared_countD2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI14VariableLimitsRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI15WhichCoordinateRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI20CoordinateDefinitionRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI4NodeRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI5PointRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_ = Module["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEEC2EmmS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferI6BezierRNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_ = Module["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEEC2EmmS8_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_ = Module["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_ = Module["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEEC2EmmSA_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EERNS5_IS8_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_ = Module["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEEC2EmmS5_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairIccEERNS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm = Module["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEE18__construct_at_endEm"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_ = Module["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEEC2EmmS7_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_4pairImPKcEERNS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_ = Module["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEEC2EmmS5_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_7__stateIcEERNS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_ = Module["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEE18__construct_at_endEmRKS4_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_ = Module["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEEC2EmmS7_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferINS_9sub_matchIPKcEERNS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_ = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontEOS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE10push_frontERKS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEE9push_backEOS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEENS_9allocatorIS3_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE10push_frontERKS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE18__construct_at_endINS_13move_iteratorIPS3_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEE9push_backEOS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_ = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEEC2EmmS6_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_7__stateIcEERNS_9allocatorIS3_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_ = Module["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev = Module["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_ = Module["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev = Module["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_ = Module["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_"].apply(null, arguments)
};

var __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev = Module["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__215__get_classnameEPKcb = Module["__ZNSt3__215__get_classnameEPKcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__get_classnameEPKcb"].apply(null, arguments)
};

var __ZNSt3__215__has_one_stateIcED0Ev = Module["__ZNSt3__215__has_one_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__has_one_stateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__215__has_one_stateIcED2Ev = Module["__ZNSt3__215__has_one_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__has_one_stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"].apply(null, arguments)
};

var __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"].apply(null, arguments)
};

var __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"].apply(null, arguments)
};

var __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"].apply(null, arguments)
};

var __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796 = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_796"].apply(null, arguments)
};

var __ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__word_boundaryIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__back_ref_icaseIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = Module["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"].apply(null, arguments)
};

var __ZNSt3__216__narrow_to_utf8ILm32EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__narrow_to_utf8ILm32EED0Ev"].apply(null, arguments)
};

var __ZNSt3__216__owns_one_stateIcED0Ev = Module["__ZNSt3__216__owns_one_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__owns_one_stateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__216__owns_one_stateIcED2Ev = Module["__ZNSt3__216__owns_one_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__owns_one_stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments)
};

var __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEC2EOSB_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SE_EEEEEEDcSI_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSF_1EJdSD_EEEEEEDcSH_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchIOZNS0_12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvEUlRT_E_JRNS0_6__baseILSG_1EJS8_dSE_EEEEEEDcSI_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_ = Module["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchIOZNS0_13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_dSE_EEEOSU_EEEDcSM_DpT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEENS0_13__valueless_tE"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev = Module["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail13__constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__copy_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail17__move_assignmentINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__copy_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_S9_EEEILm1EJS9_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EEC2EOSC_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEENS0_13__valueless_tE"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSB_1EJS3_dS9_EEEILm0EJS3_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSA_1EJdS8_EEEILm1EJRS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev = Module["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail18__move_constructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev = Module["__ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail5__altILm0E6StrokeED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = Module["__ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail5__altILm1ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = Module["__ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail5__altILm2ENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__baseILNS0_6_TraitE1EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJRA40_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_S8_EEEILm1EJS8_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_ = Module["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS9_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJS2_dS8_EEEILm0EJS2_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm0EJdEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA16_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA18_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA23_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRA27_KcEEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_ = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJdS7_EEEILm1EJRS7_EEENS_16in_place_index_tIXT_EEEDpOT0_"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail6__implIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__variant_detail7__unionILNS0_6_TraitE1ELm0EJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv = Module["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"].apply(null, arguments)
};

var __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = Module["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"].apply(null, arguments)
};

var __ZNSt3__217__owns_two_statesIcED0Ev = Module["__ZNSt3__217__owns_two_statesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__owns_two_statesIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__217__owns_two_statesIcED2Ev = Module["__ZNSt3__217__owns_two_statesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__owns_two_statesIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__217__repeat_one_loopIcED0Ev = Module["__ZNSt3__217__repeat_one_loopIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__repeat_one_loopIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__217__repeat_one_loopIcED2Ev = Module["__ZNSt3__217__repeat_one_loopIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__repeat_one_loopIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__217__widen_from_utf8ILm32EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILm32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__widen_from_utf8ILm32EED0Ev"].apply(null, arguments)
};

var __ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__back_ref_collateIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__218__libcpp_refstringC2EPKc = Module["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__libcpp_refstringC2EPKc"].apply(null, arguments)
};

var __ZNSt3__218__libcpp_refstringD2Ev = Module["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__libcpp_refstringD2Ev"].apply(null, arguments)
};

var __ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__match_char_icaseIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

var __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

var __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments)
};

var __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"].apply(null, arguments)
};

var __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz"].apply(null, arguments)
};

var __ZNSt3__219__shared_weak_count14__release_weakEv = Module["__ZNSt3__219__shared_weak_count14__release_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__shared_weak_count14__release_weakEv"].apply(null, arguments)
};

var __ZNSt3__219__shared_weak_countD0Ev = Module["__ZNSt3__219__shared_weak_countD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__shared_weak_countD0Ev"].apply(null, arguments)
};

var __ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__bracket_expressionIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__get_collation_nameEPKc = Module["__ZNSt3__220__get_collation_nameEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__get_collation_nameEPKc"].apply(null, arguments)
};

var __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

var __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments)
};

var __ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev = Module["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev = Module["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__match_char_collateIcNS_12regex_traitsIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = Module["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = Module["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIdLb1EEC2Ev = Module["__ZNSt3__220__optional_copy_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIdLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_copy_baseIiLb1EEC2Ev = Module["__ZNSt3__220__optional_copy_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_copy_baseIiLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = Module["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = Module["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIdLb1EEC2Ev = Module["__ZNSt3__220__optional_move_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIdLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__220__optional_move_baseIiLb1EEC2Ev = Module["__ZNSt3__220__optional_move_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__optional_move_baseIiLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv = Module["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv"].apply(null, arguments)
};

var __ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv = Module["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv"].apply(null, arguments)
};

var __ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev = Module["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev"].apply(null, arguments)
};

var __ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__220__time_get_c_storageIcEC2Ev = Module["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__time_get_c_storageIcEC2Ev"].apply(null, arguments)
};

var __ZNSt3__220__time_get_c_storageIwEC2Ev = Module["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__time_get_c_storageIwEC2Ev"].apply(null, arguments)
};

var __ZNSt3__221__empty_non_own_stateIcED0Ev = Module["__ZNSt3__221__empty_non_own_stateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__221__empty_non_own_stateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__221__empty_non_own_stateIcED2Ev = Module["__ZNSt3__221__empty_non_own_stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__221__empty_non_own_stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm = Module["__ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__221__murmur2_or_cityhashImLm32EEclEPKvm"].apply(null, arguments)
};

var __ZNSt3__221__throw_runtime_errorEPKc = Module["__ZNSt3__221__throw_runtime_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__221__throw_runtime_errorEPKc"].apply(null, arguments)
};

var __ZNSt3__223__match_any_but_newlineIcED0Ev = Module["__ZNSt3__223__match_any_but_newlineIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__match_any_but_newlineIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__223__match_any_but_newlineIcED2Ev = Module["__ZNSt3__223__match_any_but_newlineIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__match_any_but_newlineIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev = Module["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = Module["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev = Module["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = Module["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIdLb0EEC2Ev = Module["__ZNSt3__223__optional_storage_baseIdLb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIdLb0EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIdLb0EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__223__optional_storage_baseIiLb0EEC2Ev = Module["__ZNSt3__223__optional_storage_baseIiLb0EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__223__optional_storage_baseIiLb0EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__226__end_marked_subexpressionIcED0Ev = Module["__ZNSt3__226__end_marked_subexpressionIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__226__end_marked_subexpressionIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__226__end_marked_subexpressionIcED2Ev = Module["__ZNSt3__226__end_marked_subexpressionIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__226__end_marked_subexpressionIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = Module["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = Module["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev = Module["__ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIdLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev = Module["__ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_copy_assign_baseIiLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EECI2NS_24__optional_destruct_baseIS6_Lb0EEEIJS6_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev = Module["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EECI2NS_24__optional_destruct_baseIS4_Lb0EEEIJS4_EEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev = Module["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseINS_6vectorIdNS_9allocatorIdEEEELb0EED2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev = Module["__ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIdLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRKdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJRdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJdEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_ = Module["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIdLb1EECI2NS_24__optional_destruct_baseIdLb1EEEIJiEEENS_10in_place_tEDpOT_"].apply(null, arguments)
};

var __ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev = Module["__ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__optional_move_assign_baseIiLb1EEC2Ev"].apply(null, arguments)
};

var __ZNSt3__228__begin_marked_subexpressionIcED0Ev = Module["__ZNSt3__228__begin_marked_subexpressionIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__228__begin_marked_subexpressionIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__228__begin_marked_subexpressionIcED2Ev = Module["__ZNSt3__228__begin_marked_subexpressionIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__228__begin_marked_subexpressionIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev = Module["__ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__24pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdED2Ev"].apply(null, arguments)
};

var __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_ = Module["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_EC2EOS7_"].apply(null, arguments)
};

var __ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev = Module["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__24pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcE13classic_tableEv = Module["__ZNSt3__25ctypeIcE13classic_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE13classic_tableEv"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcE21__classic_lower_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcE21__classic_upper_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcEC2EPKtbm = Module["__ZNSt3__25ctypeIcEC2EPKtbm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcEC2EPKtbm"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcED0Ev = Module["__ZNSt3__25ctypeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__25ctypeIcED2Ev = Module["__ZNSt3__25ctypeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__25ctypeIwED0Ev = Module["__ZNSt3__25ctypeIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIwED0Ev"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_ = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE10push_frontEOS2_"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE19__add_back_capacityEv"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE20__add_front_capacityEv"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE8pop_backEv"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_ = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEE9push_backEOS2_"].apply(null, arguments)
};

var __ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25dequeINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26__clocEv = Module["__ZNSt3__26__clocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__clocEv"].apply(null, arguments)
};

var __ZNSt3__26__loopIcED0Ev = Module["__ZNSt3__26__loopIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__loopIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__26__loopIcED2Ev = Module["__ZNSt3__26__loopIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__loopIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__26__nodeIcED0Ev = Module["__ZNSt3__26__nodeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__nodeIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__26__nodeIcED2Ev = Module["__ZNSt3__26__nodeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__nodeIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__26locale2id5__getEv = Module["__ZNSt3__26locale2id5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale2id5__getEv"].apply(null, arguments)
};

var __ZNSt3__26locale2id6__initEv = Module["__ZNSt3__26locale2id6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale2id6__initEv"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp11make_globalEv = Module["__ZNSt3__26locale5__imp11make_globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp11make_globalEv"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp12make_classicEv = Module["__ZNSt3__26locale5__imp12make_classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp12make_classicEv"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installEPNS0_5facetEl = Module["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments)
};

var __ZNSt3__26locale5__impC2Em = Module["__ZNSt3__26locale5__impC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impC2Em"].apply(null, arguments)
};

var __ZNSt3__26locale5__impD0Ev = Module["__ZNSt3__26locale5__impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impD0Ev"].apply(null, arguments)
};

var __ZNSt3__26locale5__impD2Ev = Module["__ZNSt3__26locale5__impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impD2Ev"].apply(null, arguments)
};

var __ZNSt3__26locale5facet16__on_zero_sharedEv = Module["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facet16__on_zero_sharedEv"].apply(null, arguments)
};

var __ZNSt3__26locale5facetD0Ev = Module["__ZNSt3__26locale5facetD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facetD0Ev"].apply(null, arguments)
};

var __ZNSt3__26locale5facetD2Ev = Module["__ZNSt3__26locale5facetD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facetD2Ev"].apply(null, arguments)
};

var __ZNSt3__26locale7classicEv = Module["__ZNSt3__26locale7classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale7classicEv"].apply(null, arguments)
};

var __ZNSt3__26locale8__globalEv = Module["__ZNSt3__26locale8__globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale8__globalEv"].apply(null, arguments)
};

var __ZNSt3__26localeC2ERKS0_ = Module["__ZNSt3__26localeC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeC2ERKS0_"].apply(null, arguments)
};

var __ZNSt3__26localeC2Ev = Module["__ZNSt3__26localeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeC2Ev"].apply(null, arguments)
};

var __ZNSt3__26localeD2Ev = Module["__ZNSt3__26localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeD2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_ = Module["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_ = Module["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRS1_EEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI14VariableLimitsNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m = Module["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE18__construct_at_endIPKS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m"].apply(null, arguments)
};

var __ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm = Module["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15TokenDefinitionNS_9allocatorIS1_EEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE10deallocateEv"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_ = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJbbEEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_ = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEEC2ERKS4_"].apply(null, arguments)
};

var __ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI15WhichCoordinateNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_ = Module["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRKibbEEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI20CoordinateDefinitionNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_ = Module["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJ8NodeTypeR5TokenEEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI4NodeNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = Module["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJEEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm = Module["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEE7reserveEm"].apply(null, arguments)
};

var __ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI5PointNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_ = Module["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRK5PointS8_S8_S8_EEEvDpOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE = Module["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm = Module["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEE7reserveEm"].apply(null, arguments)
};

var __ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev = Module["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorI6BezierNS_9allocatorIS1_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = Module["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE = Module["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev = Module["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_10unique_ptrI10ConstraintNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_ = Module["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE = Module["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev = Module["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_ = Module["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE21__push_back_slow_pathIS8_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE = Module["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev = Module["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS5_IS8_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = Module["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = Module["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairIccEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE10deallocateEv"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endEm"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE6resizeEm"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8__appendEm"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_ = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEEC2ERKS7_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_4pairImPKcEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = Module["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE = Module["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev = Module["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_7__stateIcEENS_9allocatorIS2_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE10deallocateEv"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_m"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_ = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignEmRKS4_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_ = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_ = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE6resizeEmRKS4_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_ = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8__appendEmRKS4_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_ = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEEC2ERKS7_"].apply(null, arguments)
};

var __ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev = Module["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorINS_9sub_matchIPKcEENS_9allocatorIS4_EEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m = Module["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE18__construct_at_endIPKS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_m"].apply(null, arguments)
};

var __ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm = Module["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPKcNS_9allocatorIS2_EEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em"].apply(null, arguments)
};

var __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_ = Module["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_ = Module["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIcEEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE = Module["__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev = Module["__ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_m"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_ = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_ = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE7reserveEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_ = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2ERKS3_"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEEC2IPKdEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE"].apply(null, arguments)
};

var __ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev = Module["__ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIdNS_9allocatorIdEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_ = Module["__ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_"].apply(null, arguments)
};

var __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE = Module["__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE"].apply(null, arguments)
};

var __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev = Module["__ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27__stateIcEC2EOS1_ = Module["__ZNSt3__27__stateIcEC2EOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__stateIcEC2EOS1_"].apply(null, arguments)
};

var __ZNSt3__27__stateIcEC2ERKS1_ = Module["__ZNSt3__27__stateIcEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__stateIcEC2ERKS1_"].apply(null, arguments)
};

var __ZNSt3__27__stateIcED2Ev = Module["__ZNSt3__27__stateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__stateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__27__stateIcEaSERKS1_ = Module["__ZNSt3__27__stateIcEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__stateIcEaSERKS1_"].apply(null, arguments)
};

var __ZNSt3__27codecvtIDic11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"].apply(null, arguments)
};

var __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"].apply(null, arguments)
};

var __ZNSt3__27codecvtIcc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"].apply(null, arguments)
};

var __ZNSt3__27codecvtIwc11__mbstate_tEC2Em = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tEC2Em"].apply(null, arguments)
};

var __ZNSt3__27codecvtIwc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"].apply(null, arguments)
};

var __ZNSt3__27codecvtIwc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"].apply(null, arguments)
};

var __ZNSt3__27collateIcED0Ev = Module["__ZNSt3__27collateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__27collateIcED2Ev = Module["__ZNSt3__27collateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__27collateIwED0Ev = Module["__ZNSt3__27collateIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIwED0Ev"].apply(null, arguments)
};

var __ZNSt3__27collateIwED2Ev = Module["__ZNSt3__27collateIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIwED2Ev"].apply(null, arguments)
};

var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27variantIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_ = Module["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEC2EOS8_"].apply(null, arguments)
};

var __ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27variantIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev = Module["__ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27variantIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_ = Module["__ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28__searchIRNS_10__equal_toIccEEPKcPcEENS_4pairIT0_S8_EES8_S8_T1_SA_T_NS_26random_access_iterator_tagESC_"].apply(null, arguments)
};

var __ZNSt3__28messagesIcED0Ev = Module["__ZNSt3__28messagesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__28messagesIcED2Ev = Module["__ZNSt3__28messagesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__28messagesIwED0Ev = Module["__ZNSt3__28messagesIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIwED0Ev"].apply(null, arguments)
};

var __ZNSt3__28messagesIwED2Ev = Module["__ZNSt3__28messagesIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIwED2Ev"].apply(null, arguments)
};

var __ZNSt3__28numpunctIcEC2Em = Module["__ZNSt3__28numpunctIcEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcEC2Em"].apply(null, arguments)
};

var __ZNSt3__28numpunctIcED0Ev = Module["__ZNSt3__28numpunctIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcED0Ev"].apply(null, arguments)
};

var __ZNSt3__28numpunctIcED2Ev = Module["__ZNSt3__28numpunctIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcED2Ev"].apply(null, arguments)
};

var __ZNSt3__28numpunctIwEC2Em = Module["__ZNSt3__28numpunctIwEC2Em"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwEC2Em"].apply(null, arguments)
};

var __ZNSt3__28numpunctIwED0Ev = Module["__ZNSt3__28numpunctIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwED0Ev"].apply(null, arguments)
};

var __ZNSt3__28numpunctIwED2Ev = Module["__ZNSt3__28numpunctIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwED2Ev"].apply(null, arguments)
};

var __ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev = Module["__ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28optionalINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev = Module["__ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28optionalINS_6vectorIdNS_9allocatorIdEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc = Module["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc"].apply(null, arguments)
};

var __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc = Module["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc"].apply(null, arguments)
};

var __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"].apply(null, arguments)
};

var __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"].apply(null, arguments)
};

var __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw = Module["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw"].apply(null, arguments)
};

var __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw = Module["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw"].apply(null, arguments)
};

var __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = Module["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"].apply(null, arguments)
};

var __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = Module["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"].apply(null, arguments)
};

var __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments)
};

var __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments)
};

var __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments)
};

var __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments)
};

var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"].apply(null, arguments)
};

var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"].apply(null, arguments)
};

var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments)
};

var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments)
};

var __ZNSt3__29sub_matchIPKcEaSERKS3_ = Module["__ZNSt3__29sub_matchIPKcEaSERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29sub_matchIPKcEaSERKS3_"].apply(null, arguments)
};

var __ZNSt3__29to_stringEi = Module["__ZNSt3__29to_stringEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29to_stringEi"].apply(null, arguments)
};

var __ZNSt3__2L10init_am_pmEv = Module["__ZNSt3__2L10init_am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L10init_am_pmEv"].apply(null, arguments)
};

var __ZNSt3__2L10init_weeksEv = Module["__ZNSt3__2L10init_weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L10init_weeksEv"].apply(null, arguments)
};

var __ZNSt3__2L11init_monthsEv = Module["__ZNSt3__2L11init_monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_monthsEv"].apply(null, arguments)
};

var __ZNSt3__2L11init_wam_pmEv = Module["__ZNSt3__2L11init_wam_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_wam_pmEv"].apply(null, arguments)
};

var __ZNSt3__2L11init_wweeksEv = Module["__ZNSt3__2L11init_wweeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_wweeksEv"].apply(null, arguments)
};

var __ZNSt3__2L12init_wmonthsEv = Module["__ZNSt3__2L12init_wmonthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12init_wmonthsEv"].apply(null, arguments)
};

var __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE = Module["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE = Module["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE"].apply(null, arguments)
};

var __ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE = Module["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L22make_error_type_stringENS_15regex_constants10error_typeE"].apply(null, arguments)
};

var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_"].apply(null, arguments)
};

var __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_ = Module["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"].apply(null, arguments)
};

var __ZNSt9exceptionD0Ev = Module["__ZNSt9exceptionD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9exceptionD0Ev"].apply(null, arguments)
};

var __ZNSt9exceptionD2Ev = Module["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9exceptionD2Ev"].apply(null, arguments)
};

var __ZNSt9type_infoD2Ev = Module["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9type_infoD2Ev"].apply(null, arguments)
};

var __ZSt11__terminatePFvvE = Module["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt11__terminatePFvvE"].apply(null, arguments)
};

var __ZSt13get_terminatev = Module["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt13get_terminatev"].apply(null, arguments)
};

var __ZSt15get_new_handlerv = Module["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt15get_new_handlerv"].apply(null, arguments)
};

var __ZSt17__throw_bad_allocv = Module["__ZSt17__throw_bad_allocv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt17__throw_bad_allocv"].apply(null, arguments)
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var __ZSt19uncaught_exceptionsv = Module["__ZSt19uncaught_exceptionsv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt19uncaught_exceptionsv"].apply(null, arguments)
};

var __ZSt9terminatev = Module["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt9terminatev"].apply(null, arguments)
};

var __ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd = Module["__ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNK6Stroke22calculate_limit_errorsERKNSt3__26vectorIdNS0_9allocatorIdEEEEENK3__0clEdd"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE = Module["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm1EddEEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb1EEE"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE = Module["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__assignmentINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE12__assign_altILm2ES9_RS9_EEvRNS0_5__altIXT_ET0_EEOT1_ENKUt_clENS_17integral_constantIbLb0EEE"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJ6StrokeNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES9_EEEEDaSE_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0ES3_EEEEDaSE_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1EdEEEEDaSE_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm2ES9_EEEEDaSE_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm0EdEEEEDaSD_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_ = Module["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail12__destructorINS0_8__traitsIJdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyEvENKUlRT_E_clINS0_5__altILm1ES8_EEEEDaSD_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_ = Module["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm0ES3_EESP_EEDaSJ_SL_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_ = Module["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm1EdEESP_EEDaSJ_SL_"].apply(null, arguments)
};

var __ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_ = Module["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZZNSt3__216__variant_detail13__constructorINS0_8__traitsIJNS_9monostateEdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructINS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_ENKUlRSH_OT0_E_clINS0_5__altILm2ES9_EESP_EEDaSJ_SL_"].apply(null, arguments)
};

var __ZdaPv = Module["__ZdaPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZdaPv"].apply(null, arguments)
};

var __ZdlPv = Module["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZdlPv"].apply(null, arguments)
};

var __ZmldRK6Vector = Module["__ZmldRK6Vector"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZmldRK6Vector"].apply(null, arguments)
};

var __Znam = Module["__Znam"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Znam"].apply(null, arguments)
};

var __Znwm = Module["__Znwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Znwm"].apply(null, arguments)
};

var ___DOUBLE_BITS_156 = Module["___DOUBLE_BITS_156"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_156"].apply(null, arguments)
};

var ___DOUBLE_BITS_668 = Module["___DOUBLE_BITS_668"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_668"].apply(null, arguments)
};

var ___clang_call_terminate = Module["___clang_call_terminate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___clang_call_terminate"].apply(null, arguments)
};

var ___ctype_b_loc = Module["___ctype_b_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_b_loc"].apply(null, arguments)
};

var ___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_get_mb_cur_max"].apply(null, arguments)
};

var ___ctype_tolower_loc = Module["___ctype_tolower_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_tolower_loc"].apply(null, arguments)
};

var ___ctype_toupper_loc = Module["___ctype_toupper_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_toupper_loc"].apply(null, arguments)
};

var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments)
};

var ___cxa_get_globals_fast = Module["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_get_globals_fast"].apply(null, arguments)
};

var ___cxa_guard_acquire = Module["___cxa_guard_acquire"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_guard_acquire"].apply(null, arguments)
};

var ___cxa_guard_release = Module["___cxa_guard_release"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_guard_release"].apply(null, arguments)
};

var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments)
};

var ___cxx_global_var_init = Module["___cxx_global_var_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init"].apply(null, arguments)
};

var ___cxx_global_var_init_40 = Module["___cxx_global_var_init_40"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_40"].apply(null, arguments)
};

var ___dynamic_cast = Module["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___dynamic_cast"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___fdopen = Module["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fdopen"].apply(null, arguments)
};

var ___fflush_unlocked = Module["___fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fflush_unlocked"].apply(null, arguments)
};

var ___floatscan = Module["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___floatscan"].apply(null, arguments)
};

var ___fmodeflags = Module["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fmodeflags"].apply(null, arguments)
};

var ___fwritex = Module["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fwritex"].apply(null, arguments)
};

var ___get_locale = Module["___get_locale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___get_locale"].apply(null, arguments)
};

var ___intscan = Module["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___intscan"].apply(null, arguments)
};

var ___loc_is_allocated = Module["___loc_is_allocated"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___loc_is_allocated"].apply(null, arguments)
};

var ___lockfile = Module["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___lockfile"].apply(null, arguments)
};

var ___munmap = Module["___munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___munmap"].apply(null, arguments)
};

var ___newlocale = Module["___newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___newlocale"].apply(null, arguments)
};

var ___ofl_add = Module["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_add"].apply(null, arguments)
};

var ___ofl_lock = Module["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_lock"].apply(null, arguments)
};

var ___ofl_unlock = Module["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_unlock"].apply(null, arguments)
};

var ___overflow = Module["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___overflow"].apply(null, arguments)
};

var ___pthread_self_294 = Module["___pthread_self_294"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_294"].apply(null, arguments)
};

var ___pthread_self_407 = Module["___pthread_self_407"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_407"].apply(null, arguments)
};

var ___pthread_self_685 = Module["___pthread_self_685"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_685"].apply(null, arguments)
};

var ___pthread_self_770 = Module["___pthread_self_770"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_770"].apply(null, arguments)
};

var ___pthread_self_773 = Module["___pthread_self_773"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_773"].apply(null, arguments)
};

var ___pthread_self_780 = Module["___pthread_self_780"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_780"].apply(null, arguments)
};

var ___pthread_self_786 = Module["___pthread_self_786"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_786"].apply(null, arguments)
};

var ___shgetc = Module["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___shgetc"].apply(null, arguments)
};

var ___shlim = Module["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___shlim"].apply(null, arguments)
};

var ___stdio_close = Module["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_close"].apply(null, arguments)
};

var ___stdio_read = Module["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_read"].apply(null, arguments)
};

var ___stdio_seek = Module["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_seek"].apply(null, arguments)
};

var ___stdio_write = Module["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_write"].apply(null, arguments)
};

var ___stdout_write = Module["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdout_write"].apply(null, arguments)
};

var ___stpcpy = Module["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stpcpy"].apply(null, arguments)
};

var ___strchrnul = Module["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___strchrnul"].apply(null, arguments)
};

var ___string_read = Module["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___string_read"].apply(null, arguments)
};

var ___syscall_ret = Module["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___syscall_ret"].apply(null, arguments)
};

var ___toread = Module["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___toread"].apply(null, arguments)
};

var ___towrite = Module["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___towrite"].apply(null, arguments)
};

var ___uflow = Module["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uflow"].apply(null, arguments)
};

var ___unlist_locked_file = Module["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___unlist_locked_file"].apply(null, arguments)
};

var ___unlockfile = Module["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___unlockfile"].apply(null, arguments)
};

var ___uselocale = Module["___uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uselocale"].apply(null, arguments)
};

var ___vfprintf_internal = Module["___vfprintf_internal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___vfprintf_internal"].apply(null, arguments)
};

var _abort_message = Module["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_abort_message"].apply(null, arguments)
};

var _arg_n = Module["_arg_n"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_arg_n"].apply(null, arguments)
};

var _catclose = Module["_catclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catclose"].apply(null, arguments)
};

var _catgets = Module["_catgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catgets"].apply(null, arguments)
};

var _catopen = Module["_catopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catopen"].apply(null, arguments)
};

var _copysign = Module["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_copysign"].apply(null, arguments)
};

var _copysignl = Module["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_copysignl"].apply(null, arguments)
};

var _decfloat = Module["_decfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_decfloat"].apply(null, arguments)
};

var _dispose_chunk = Module["_dispose_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dispose_chunk"].apply(null, arguments)
};

var _do_read_578 = Module["_do_read_578"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_do_read_578"].apply(null, arguments)
};

var _dummy = Module["_dummy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dummy"].apply(null, arguments)
};

var _dummy_402 = Module["_dummy_402"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dummy_402"].apply(null, arguments)
};

var _fclose = Module["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fclose"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments)
};

var _fmod = Module["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmod"].apply(null, arguments)
};

var _fmodl = Module["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmodl"].apply(null, arguments)
};

var _fmt_fp = Module["_fmt_fp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_fp"].apply(null, arguments)
};

var _fmt_o = Module["_fmt_o"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_o"].apply(null, arguments)
};

var _fmt_u = Module["_fmt_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_u"].apply(null, arguments)
};

var _fmt_x = Module["_fmt_x"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_x"].apply(null, arguments)
};

var _fopen = Module["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fopen"].apply(null, arguments)
};

var _fputc = Module["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fputc"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments)
};

var _freelocale = Module["_freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_freelocale"].apply(null, arguments)
};

var _frexp = Module["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_frexp"].apply(null, arguments)
};

var _fwrite = Module["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fwrite"].apply(null, arguments)
};

var _getint_660 = Module["_getint_660"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_getint_660"].apply(null, arguments)
};

var _hexfloat = Module["_hexfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_hexfloat"].apply(null, arguments)
};

var _isalpha = Module["_isalpha"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isalpha"].apply(null, arguments)
};

var _isdigit = Module["_isdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isdigit"].apply(null, arguments)
};

var _isdigit_l = Module["_isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isdigit_l"].apply(null, arguments)
};

var _isspace = Module["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isspace"].apply(null, arguments)
};

var _isxdigit = Module["_isxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isxdigit"].apply(null, arguments)
};

var _isxdigit_l = Module["_isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isxdigit_l"].apply(null, arguments)
};

var _lbfgs = Module["_lbfgs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_lbfgs"].apply(null, arguments)
};

var _lbfgs_parameter_init = Module["_lbfgs_parameter_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_lbfgs_parameter_init"].apply(null, arguments)
};

var _line_search_backtracking = Module["_line_search_backtracking"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_line_search_backtracking"].apply(null, arguments)
};

var _line_search_backtracking_owlqn = Module["_line_search_backtracking_owlqn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_line_search_backtracking_owlqn"].apply(null, arguments)
};

var _line_search_morethuente = Module["_line_search_morethuente"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_line_search_morethuente"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments)
};

var _mbrlen = Module["_mbrlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbrlen"].apply(null, arguments)
};

var _mbrtowc = Module["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbrtowc"].apply(null, arguments)
};

var _mbsinit = Module["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsinit"].apply(null, arguments)
};

var _mbsnrtowcs = Module["_mbsnrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsnrtowcs"].apply(null, arguments)
};

var _mbsrtowcs = Module["_mbsrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsrtowcs"].apply(null, arguments)
};

var _mbtowc = Module["_mbtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbtowc"].apply(null, arguments)
};

var _memchr = Module["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memchr"].apply(null, arguments)
};

var _memcmp = Module["_memcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcmp"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments)
};

var _out_659 = Module["_out_659"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_out_659"].apply(null, arguments)
};

var _owlqn_project = Module["_owlqn_project"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_owlqn_project"].apply(null, arguments)
};

var _owlqn_pseudo_gradient = Module["_owlqn_pseudo_gradient"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_owlqn_pseudo_gradient"].apply(null, arguments)
};

var _owlqn_x1norm = Module["_owlqn_x1norm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_owlqn_x1norm"].apply(null, arguments)
};

var _pad_665 = Module["_pad_665"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pad_665"].apply(null, arguments)
};

var _pop_arg_662 = Module["_pop_arg_662"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pop_arg_662"].apply(null, arguments)
};

var _pop_arg_long_double = Module["_pop_arg_long_double"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pop_arg_long_double"].apply(null, arguments)
};

var _printf = Module["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_printf"].apply(null, arguments)
};

var _printf_core = Module["_printf_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_printf_core"].apply(null, arguments)
};

var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments)
};

var _pthread_getspecific = Module["_pthread_getspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_getspecific"].apply(null, arguments)
};

var _pthread_key_create = Module["_pthread_key_create"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_key_create"].apply(null, arguments)
};

var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments)
};

var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments)
};

var _pthread_once = Module["_pthread_once"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_once"].apply(null, arguments)
};

var _pthread_self = Module["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_self"].apply(null, arguments)
};

var _pthread_setspecific = Module["_pthread_setspecific"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_setspecific"].apply(null, arguments)
};

var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_realloc"].apply(null, arguments)
};

var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments)
};

var _scalbn = Module["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scalbn"].apply(null, arguments)
};

var _scalbnl = Module["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scalbnl"].apply(null, arguments)
};

var _scanexp = Module["_scanexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scanexp"].apply(null, arguments)
};

var _sn_write = Module["_sn_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sn_write"].apply(null, arguments)
};

var _snprintf = Module["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_snprintf"].apply(null, arguments)
};

var _sprintf = Module["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sprintf"].apply(null, arguments)
};

var _sscanf = Module["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sscanf"].apply(null, arguments)
};

var _store_int = Module["_store_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_store_int"].apply(null, arguments)
};

var _strchr = Module["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strchr"].apply(null, arguments)
};

var _strcmp = Module["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strcmp"].apply(null, arguments)
};

var _strcpy = Module["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strcpy"].apply(null, arguments)
};

var _strlen = Module["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strlen"].apply(null, arguments)
};

var _strncmp = Module["_strncmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strncmp"].apply(null, arguments)
};

var _strtod = Module["_strtod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtod"].apply(null, arguments)
};

var _strtod_l = Module["_strtod_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtod_l"].apply(null, arguments)
};

var _strtof = Module["_strtof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtof"].apply(null, arguments)
};

var _strtof_l = Module["_strtof_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtof_l"].apply(null, arguments)
};

var _strtold = Module["_strtold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtold"].apply(null, arguments)
};

var _strtold_l = Module["_strtold_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtold_l"].apply(null, arguments)
};

var _strtoll = Module["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoll"].apply(null, arguments)
};

var _strtoll_l = Module["_strtoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoll_l"].apply(null, arguments)
};

var _strtoull = Module["_strtoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoull"].apply(null, arguments)
};

var _strtoull_l = Module["_strtoull_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoull_l"].apply(null, arguments)
};

var _strtox = Module["_strtox"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtox"].apply(null, arguments)
};

var _strtox_12 = Module["_strtox_12"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtox_12"].apply(null, arguments)
};

var _try_realloc_chunk = Module["_try_realloc_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_try_realloc_chunk"].apply(null, arguments)
};

var _update_trial_interval = Module["_update_trial_interval"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_update_trial_interval"].apply(null, arguments)
};

var _vasprintf = Module["_vasprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vasprintf"].apply(null, arguments)
};

var _vec2norm = Module["_vec2norm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vec2norm"].apply(null, arguments)
};

var _vec2norminv = Module["_vec2norminv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vec2norminv"].apply(null, arguments)
};

var _vecadd = Module["_vecadd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecadd"].apply(null, arguments)
};

var _vecalloc = Module["_vecalloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecalloc"].apply(null, arguments)
};

var _veccpy = Module["_veccpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_veccpy"].apply(null, arguments)
};

var _vecdiff = Module["_vecdiff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecdiff"].apply(null, arguments)
};

var _vecdot = Module["_vecdot"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecdot"].apply(null, arguments)
};

var _vecfree = Module["_vecfree"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecfree"].apply(null, arguments)
};

var _vecncpy = Module["_vecncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecncpy"].apply(null, arguments)
};

var _vecscale = Module["_vecscale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vecscale"].apply(null, arguments)
};

var _vfprintf = Module["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vfprintf"].apply(null, arguments)
};

var _vfscanf = Module["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vfscanf"].apply(null, arguments)
};

var _vsnprintf = Module["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsnprintf"].apply(null, arguments)
};

var _vsprintf = Module["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsprintf"].apply(null, arguments)
};

var _vsscanf = Module["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsscanf"].apply(null, arguments)
};

var _wasm_entrypoint = Module["_wasm_entrypoint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wasm_entrypoint"].apply(null, arguments)
};

var _wcrtomb = Module["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcrtomb"].apply(null, arguments)
};

var _wcslen = Module["_wcslen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcslen"].apply(null, arguments)
};

var _wcsnrtombs = Module["_wcsnrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcsnrtombs"].apply(null, arguments)
};

var _wcsrtombs = Module["_wcsrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcsrtombs"].apply(null, arguments)
};

var _wctomb = Module["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wctomb"].apply(null, arguments)
};

var _wmemcpy = Module["_wmemcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemcpy"].apply(null, arguments)
};

var _wmemmove = Module["_wmemmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemmove"].apply(null, arguments)
};

var _wmemset = Module["_wmemset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemset"].apply(null, arguments)
};

var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_diiiid = Module["dynCall_diiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiiid"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiiddddiii = Module["dynCall_iiiiddddiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiddddiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments)
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiiii"].apply(null, arguments)
};

var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = '"' + what + '"';
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



